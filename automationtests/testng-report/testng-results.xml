<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="30" ignored="104" total="477" passed="343">
  <reporter-output>
  </reporter-output>
  <suite name="Mosip API Suite" duration-ms="852313" started-at="2019-06-29T08:44:09Z" finished-at="2019-06-29T08:58:21Z">
    <groups>
    </groups>
    <test name="Kernel Tests" duration-ms="852313" started-at="2019-06-29T08:44:09Z" finished-at="2019-06-29T08:58:21Z">
      <class name="io.mosip.kernel.tests.SyncPublicKeyToRegClient">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncPublicKeyToRegClient@214b199c]" test-instance-name="kernel_SyncPublicKeyToRegClient_invalid_timeStamp_format" name="getTestCaseName" is-config="true" duration-ms="229" started-at="2019-06-29T14:26:48Z" finished-at="2019-06-29T14:26:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncPublicKeyToRegClient.syncPublicKeyToRegClient(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@65ff5e07]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="syncPublicKeyToRegClient(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncPublicKeyToRegClient@214b199c]" test-instance-name="kernel_SyncPublicKeyToRegClient_invalid_timeStamp_format" name="kernel_SyncPublicKeyToRegClient_allValid_smoke" duration-ms="10282" started-at="2019-06-29T14:26:49Z" data-provider="fetchData" finished-at="2019-06-29T14:26:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncPublicKeyToRegClient_allValid_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncPublicKeyToRegClient@214b199c]" test-instance-name="kernel_SyncPublicKeyToRegClient_invalid_timeStamp_format" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:59Z" finished-at="2019-06-29T14:26:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncPublicKeyToRegClient_allValid_smoke status=SUCCESS method=SyncPublicKeyToRegClient.syncPublicKeyToRegClient(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncPublicKeyToRegClient@214b199c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncPublicKeyToRegClient@214b199c]" test-instance-name="kernel_SyncPublicKeyToRegClient_invalid_timeStamp_format" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:59Z" finished-at="2019-06-29T14:26:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncPublicKeyToRegClient.syncPublicKeyToRegClient(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@51ce29c9]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="FAIL" signature="syncPublicKeyToRegClient(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncPublicKeyToRegClient@214b199c]" test-instance-name="kernel_SyncPublicKeyToRegClient_invalid_timeStamp_format" name="kernel_SyncPublicKeyToRegClient_invalid_applicationId_non-existing" duration-ms="267" started-at="2019-06-29T14:26:59Z" data-provider="fetchData" finished-at="2019-06-29T14:26:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_applicationId_non-existing]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.util.CommonLibrary.responseAuthValidation(CommonLibrary.java:160)
	at io.mosip.kernel.tests.SyncPublicKeyToRegClient.syncPublicKeyToRegClient(SyncPublicKeyToRegClient.java:124)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncPublicKeyToRegClient_invalid_applicationId_non-existing -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncPublicKeyToRegClient@214b199c]" test-instance-name="kernel_SyncPublicKeyToRegClient_invalid_timeStamp_format" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:59Z" finished-at="2019-06-29T14:26:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncPublicKeyToRegClient_invalid_applicationId_non-existing status=FAILURE method=SyncPublicKeyToRegClient.syncPublicKeyToRegClient(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncPublicKeyToRegClient@214b199c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncPublicKeyToRegClient@214b199c]" test-instance-name="kernel_SyncPublicKeyToRegClient_invalid_timeStamp_format" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:26:59Z" finished-at="2019-06-29T14:26:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncPublicKeyToRegClient.syncPublicKeyToRegClient(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@55f20d7e]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="FAIL" signature="syncPublicKeyToRegClient(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncPublicKeyToRegClient@214b199c]" test-instance-name="kernel_SyncPublicKeyToRegClient_invalid_timeStamp_format" name="kernel_SyncPublicKeyToRegClient_invalid_timeStamp_format" duration-ms="264" started-at="2019-06-29T14:26:59Z" data-provider="fetchData" finished-at="2019-06-29T14:27:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_timeStamp_format]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.util.CommonLibrary.responseAuthValidation(CommonLibrary.java:160)
	at io.mosip.kernel.tests.SyncPublicKeyToRegClient.syncPublicKeyToRegClient(SyncPublicKeyToRegClient.java:124)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncPublicKeyToRegClient_invalid_timeStamp_format -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncPublicKeyToRegClient@214b199c]" test-instance-name="kernel_SyncPublicKeyToRegClient_invalid_timeStamp_format" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:27:00Z" finished-at="2019-06-29T14:27:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncPublicKeyToRegClient_invalid_timeStamp_format status=FAILURE method=SyncPublicKeyToRegClient.syncPublicKeyToRegClient(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncPublicKeyToRegClient@214b199c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.SyncPublicKeyToRegClient -->
      <class name="io.mosip.kernel.tests.FetchTemplate">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632]" test-instance-name="kernel_FetchTemplate_invalid_templatetypecode_unexisting" name="getTestCaseName" is-config="true" duration-ms="229" started-at="2019-06-29T14:20:23Z" finished-at="2019-06-29T14:20:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchTemplate.fetchTemplate(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7a60c431]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchTemplate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632]" test-instance-name="kernel_FetchTemplate_invalid_templatetypecode_unexisting" name="kernel_FetchTemplate_allValid_smoke_Get" duration-ms="13533" started-at="2019-06-29T14:20:23Z" data-provider="fetchData" finished-at="2019-06-29T14:20:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke_Get]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchTemplate_allValid_smoke_Get -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632]" test-instance-name="kernel_FetchTemplate_invalid_templatetypecode_unexisting" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:20:37Z" finished-at="2019-06-29T14:20:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchTemplate_allValid_smoke_Get status=SUCCESS method=FetchTemplate.fetchTemplate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632]" test-instance-name="kernel_FetchTemplate_invalid_templatetypecode_unexisting" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:20:37Z" finished-at="2019-06-29T14:20:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchTemplate.fetchTemplate(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@3256cd5a]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchTemplate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632]" test-instance-name="kernel_FetchTemplate_invalid_templatetypecode_unexisting" name="kernel_FetchTemplate_allValid_smoke_with_lang" duration-ms="13691" started-at="2019-06-29T14:20:37Z" data-provider="fetchData" finished-at="2019-06-29T14:20:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke_with_lang]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchTemplate_allValid_smoke_with_lang -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632]" test-instance-name="kernel_FetchTemplate_invalid_templatetypecode_unexisting" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:20:51Z" finished-at="2019-06-29T14:20:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchTemplate_allValid_smoke_with_lang status=SUCCESS method=FetchTemplate.fetchTemplate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632]" test-instance-name="kernel_FetchTemplate_invalid_templatetypecode_unexisting" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:20:51Z" finished-at="2019-06-29T14:20:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchTemplate.fetchTemplate(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@4f415a37]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchTemplate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632]" test-instance-name="kernel_FetchTemplate_invalid_templatetypecode_unexisting" name="kernel_FetchTemplate_allValid_smoke_with_lang_and_templatetypecode" duration-ms="13997" started-at="2019-06-29T14:20:51Z" data-provider="fetchData" finished-at="2019-06-29T14:21:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke_with_lang_and_templatetypecode]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchTemplate_allValid_smoke_with_lang_and_templatetypecode -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632]" test-instance-name="kernel_FetchTemplate_invalid_templatetypecode_unexisting" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:21:05Z" finished-at="2019-06-29T14:21:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchTemplate_allValid_smoke_with_lang_and_templatetypecode status=SUCCESS method=FetchTemplate.fetchTemplate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632]" test-instance-name="kernel_FetchTemplate_invalid_templatetypecode_unexisting" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:05Z" finished-at="2019-06-29T14:21:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchTemplate.fetchTemplate(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@28b1ccd1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchTemplate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632]" test-instance-name="kernel_FetchTemplate_invalid_templatetypecode_unexisting" name="kernel_FetchTemplate_invalid_langcode_blank_with_templatetypecode" duration-ms="294" started-at="2019-06-29T14:21:05Z" data-provider="fetchData" finished-at="2019-06-29T14:21:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode_blank_with_templatetypecode]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchTemplate_invalid_langcode_blank_with_templatetypecode -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632]" test-instance-name="kernel_FetchTemplate_invalid_templatetypecode_unexisting" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:21:05Z" finished-at="2019-06-29T14:21:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchTemplate_invalid_langcode_blank_with_templatetypecode status=SUCCESS method=FetchTemplate.fetchTemplate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632]" test-instance-name="kernel_FetchTemplate_invalid_templatetypecode_unexisting" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:21:05Z" finished-at="2019-06-29T14:21:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchTemplate.fetchTemplate(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@548cc4ba]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchTemplate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632]" test-instance-name="kernel_FetchTemplate_invalid_templatetypecode_unexisting" name="kernel_FetchTemplate_invalid_langcode_unexisting" duration-ms="306" started-at="2019-06-29T14:21:05Z" data-provider="fetchData" finished-at="2019-06-29T14:21:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode_unexisting]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchTemplate_invalid_langcode_unexisting -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632]" test-instance-name="kernel_FetchTemplate_invalid_templatetypecode_unexisting" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:05Z" finished-at="2019-06-29T14:21:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchTemplate_invalid_langcode_unexisting status=SUCCESS method=FetchTemplate.fetchTemplate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632]" test-instance-name="kernel_FetchTemplate_invalid_templatetypecode_unexisting" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:05Z" finished-at="2019-06-29T14:21:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchTemplate.fetchTemplate(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5034ef6c]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchTemplate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632]" test-instance-name="kernel_FetchTemplate_invalid_templatetypecode_unexisting" name="kernel_FetchTemplate_invalid_langcode_unexisting_with_templatetypecode" duration-ms="299" started-at="2019-06-29T14:21:05Z" data-provider="fetchData" finished-at="2019-06-29T14:21:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode_unexisting_with_templatetypecode]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchTemplate_invalid_langcode_unexisting_with_templatetypecode -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632]" test-instance-name="kernel_FetchTemplate_invalid_templatetypecode_unexisting" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:05Z" finished-at="2019-06-29T14:21:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchTemplate_invalid_langcode_unexisting_with_templatetypecode status=SUCCESS method=FetchTemplate.fetchTemplate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632]" test-instance-name="kernel_FetchTemplate_invalid_templatetypecode_unexisting" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:21:05Z" finished-at="2019-06-29T14:21:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchTemplate.fetchTemplate(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@156187bf]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchTemplate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632]" test-instance-name="kernel_FetchTemplate_invalid_templatetypecode_unexisting" name="kernel_FetchTemplate_invalid_templatetypecode_unexisting" duration-ms="328" started-at="2019-06-29T14:21:05Z" data-provider="fetchData" finished-at="2019-06-29T14:21:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_templatetypecode_unexisting]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchTemplate_invalid_templatetypecode_unexisting -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632]" test-instance-name="kernel_FetchTemplate_invalid_templatetypecode_unexisting" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:21:06Z" finished-at="2019-06-29T14:21:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchTemplate_invalid_templatetypecode_unexisting status=SUCCESS method=FetchTemplate.fetchTemplate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchTemplate@589b3632] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.FetchTemplate -->
      <class name="io.mosip.kernel.tests.GetIndividualType">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetIndividualType@55a1c291]" test-instance-name="Kernel_GetIndividualType_smoke" name="getTestCaseName" is-config="true" duration-ms="239" started-at="2019-06-29T14:22:43Z" finished-at="2019-06-29T14:22:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetIndividualType.getIndividualType(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5ce4af92]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getIndividualType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetIndividualType@55a1c291]" test-instance-name="Kernel_GetIndividualType_smoke" name="Kernel_GetIndividualType_smoke" duration-ms="294" started-at="2019-06-29T14:22:43Z" data-provider="GetIndividualType" finished-at="2019-06-29T14:22:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetIndividualType_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetIndividualType_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetIndividualType@55a1c291]" test-instance-name="Kernel_GetIndividualType_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:43Z" finished-at="2019-06-29T14:22:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetIndividualType_smoke status=SUCCESS method=GetIndividualType.getIndividualType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetIndividualType@55a1c291] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.GetIndividualType -->
      <class name="io.mosip.kernel.tests.SyncConfigurations">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncConfigurations@1f1c7bf6]" test-instance-name="Kernel_SyncConfigurations_smoke" name="getTestCaseName" is-config="true" duration-ms="327" started-at="2019-06-29T14:26:31Z" finished-at="2019-06-29T14:26:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncConfigurations.syncConfigurations(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5381deec]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="syncConfigurations(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncConfigurations@1f1c7bf6]" test-instance-name="Kernel_SyncConfigurations_smoke" name="Kernel_SyncConfigurations_smoke" duration-ms="3218" started-at="2019-06-29T14:26:31Z" data-provider="SyncConfigurations" finished-at="2019-06-29T14:26:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_SyncConfigurations_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_SyncConfigurations_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncConfigurations@1f1c7bf6]" test-instance-name="Kernel_SyncConfigurations_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:34Z" finished-at="2019-06-29T14:26:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_SyncConfigurations_smoke status=SUCCESS method=SyncConfigurations.syncConfigurations(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncConfigurations@1f1c7bf6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.SyncConfigurations -->
      <class name="io.mosip.kernel.tests.GetUserHistory">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7]" test-instance-name="kernel_GetUserHistory_validating_request" name="getTestCaseName" is-config="true" duration-ms="235" started-at="2019-06-29T14:22:57Z" finished-at="2019-06-29T14:22:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetUserHistory.getUserHistory(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@32dca84b]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getUserHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7]" test-instance-name="kernel_GetUserHistory_validating_request" name="kernel_GetUserHistory_eff_dtimes_invalidFormat" duration-ms="293" started-at="2019-06-29T14:22:58Z" data-provider="GetUserHistory" finished-at="2019-06-29T14:22:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[eff_dtimes_invalidFormat]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_GetUserHistory_eff_dtimes_invalidFormat -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7]" test-instance-name="kernel_GetUserHistory_validating_request" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:58Z" finished-at="2019-06-29T14:22:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_GetUserHistory_eff_dtimes_invalidFormat status=SUCCESS method=GetUserHistory.getUserHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7]" test-instance-name="kernel_GetUserHistory_validating_request" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:22:58Z" finished-at="2019-06-29T14:22:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetUserHistory.getUserHistory(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@329ba591]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getUserHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7]" test-instance-name="kernel_GetUserHistory_validating_request" name="kernel_GetUserHistory_firstUpdateDate" duration-ms="301" started-at="2019-06-29T14:22:58Z" data-provider="GetUserHistory" finished-at="2019-06-29T14:22:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[firstUpdateDate]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_GetUserHistory_firstUpdateDate -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7]" test-instance-name="kernel_GetUserHistory_validating_request" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:22:58Z" finished-at="2019-06-29T14:22:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetUserHistory.getUserHistory(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6d448772]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7]" test-instance-name="kernel_GetUserHistory_validating_request" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:58Z" finished-at="2019-06-29T14:22:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_GetUserHistory_firstUpdateDate status=SUCCESS method=GetUserHistory.getUserHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getUserHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7]" test-instance-name="kernel_GetUserHistory_validating_request" name="kernel_GetUserHistory_futureDate" duration-ms="301" started-at="2019-06-29T14:22:58Z" data-provider="GetUserHistory" finished-at="2019-06-29T14:22:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[futureDate]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_GetUserHistory_futureDate -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7]" test-instance-name="kernel_GetUserHistory_validating_request" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:59Z" finished-at="2019-06-29T14:22:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetUserHistory.getUserHistory(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@614a32ef]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7]" test-instance-name="kernel_GetUserHistory_validating_request" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:59Z" finished-at="2019-06-29T14:22:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_GetUserHistory_futureDate status=SUCCESS method=GetUserHistory.getUserHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getUserHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7]" test-instance-name="kernel_GetUserHistory_validating_request" name="kernel_GetUserHistory_id_invalid" duration-ms="301" started-at="2019-06-29T14:22:59Z" data-provider="GetUserHistory" finished-at="2019-06-29T14:22:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[id_invalid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_GetUserHistory_id_invalid -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7]" test-instance-name="kernel_GetUserHistory_validating_request" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:59Z" finished-at="2019-06-29T14:22:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_GetUserHistory_id_invalid status=SUCCESS method=GetUserHistory.getUserHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7]" test-instance-name="kernel_GetUserHistory_validating_request" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:59Z" finished-at="2019-06-29T14:22:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetUserHistory.getUserHistory(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@3683407d]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getUserHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7]" test-instance-name="kernel_GetUserHistory_validating_request" name="kernel_GetUserHistory_secondUpdateDate" duration-ms="284" started-at="2019-06-29T14:22:59Z" data-provider="GetUserHistory" finished-at="2019-06-29T14:22:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[secondUpdateDate]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_GetUserHistory_secondUpdateDate -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7]" test-instance-name="kernel_GetUserHistory_validating_request" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:59Z" finished-at="2019-06-29T14:22:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetUserHistory.getUserHistory(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@595bcc11]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7]" test-instance-name="kernel_GetUserHistory_validating_request" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:59Z" finished-at="2019-06-29T14:22:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_GetUserHistory_secondUpdateDate status=SUCCESS method=GetUserHistory.getUserHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getUserHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7]" test-instance-name="kernel_GetUserHistory_validating_request" name="kernel_GetUserHistory_smoke" duration-ms="307" started-at="2019-06-29T14:22:59Z" data-provider="GetUserHistory" finished-at="2019-06-29T14:22:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_GetUserHistory_smoke -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7]" test-instance-name="kernel_GetUserHistory_validating_request" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:59Z" finished-at="2019-06-29T14:22:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetUserHistory.getUserHistory(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@106dbf5f]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7]" test-instance-name="kernel_GetUserHistory_validating_request" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:59Z" finished-at="2019-06-29T14:22:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_GetUserHistory_smoke status=SUCCESS method=GetUserHistory.getUserHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getUserHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7]" test-instance-name="kernel_GetUserHistory_validating_request" name="kernel_GetUserHistory_timeformat_2" duration-ms="279" started-at="2019-06-29T14:22:59Z" data-provider="GetUserHistory" finished-at="2019-06-29T14:23:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[timeformat_2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_GetUserHistory_timeformat_2 -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7]" test-instance-name="kernel_GetUserHistory_validating_request" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:23:00Z" finished-at="2019-06-29T14:23:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetUserHistory.getUserHistory(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@20003af7]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7]" test-instance-name="kernel_GetUserHistory_validating_request" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:00Z" finished-at="2019-06-29T14:23:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_GetUserHistory_timeformat_2 status=SUCCESS method=GetUserHistory.getUserHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getUserHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7]" test-instance-name="kernel_GetUserHistory_validating_request" name="kernel_GetUserHistory_timeformat_3" duration-ms="294" started-at="2019-06-29T14:23:00Z" data-provider="GetUserHistory" finished-at="2019-06-29T14:23:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[timeformat_3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_GetUserHistory_timeformat_3 -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7]" test-instance-name="kernel_GetUserHistory_validating_request" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:00Z" finished-at="2019-06-29T14:23:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_GetUserHistory_timeformat_3 status=SUCCESS method=GetUserHistory.getUserHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7]" test-instance-name="kernel_GetUserHistory_validating_request" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:23:00Z" finished-at="2019-06-29T14:23:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetUserHistory.getUserHistory(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@c2c1622]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getUserHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7]" test-instance-name="kernel_GetUserHistory_validating_request" name="kernel_GetUserHistory_validating_request" duration-ms="290" started-at="2019-06-29T14:23:00Z" data-provider="GetUserHistory" finished-at="2019-06-29T14:23:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[validating_request]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_GetUserHistory_validating_request -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7]" test-instance-name="kernel_GetUserHistory_validating_request" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:23:00Z" finished-at="2019-06-29T14:23:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_GetUserHistory_validating_request status=SUCCESS method=GetUserHistory.getUserHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetUserHistory@105fece7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.GetUserHistory -->
      <class name="io.mosip.kernel.tests.UINStatusUpdate">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934]" test-instance-name="Kernel_UINStatusUpdate_UIN_Status_UnusedToAssigned" name="getTestCaseName" is-config="true" duration-ms="243" started-at="2019-06-29T14:27:31Z" finished-at="2019-06-29T14:27:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.UINStatusUpdate.updateUINStatusUpdate(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@774d286]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="updateUINStatusUpdate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934]" test-instance-name="Kernel_UINStatusUpdate_UIN_Status_UnusedToAssigned" name="Kernel_UINStatusUpdate_UIN_Status_AssignedToIssued" duration-ms="1064" started-at="2019-06-29T14:27:31Z" data-provider="UINStatusUpdate" finished-at="2019-06-29T14:27:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_UINStatusUpdate_UIN_Status_AssignedToIssued]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_UINStatusUpdate_UIN_Status_AssignedToIssued -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934]" test-instance-name="Kernel_UINStatusUpdate_UIN_Status_UnusedToAssigned" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:27:32Z" finished-at="2019-06-29T14:27:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_UINStatusUpdate_UIN_Status_AssignedToIssued status=SUCCESS method=UINStatusUpdate.updateUINStatusUpdate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934]" test-instance-name="Kernel_UINStatusUpdate_UIN_Status_UnusedToAssigned" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:27:32Z" finished-at="2019-06-29T14:27:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.UINStatusUpdate.updateUINStatusUpdate(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@31311d54]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="updateUINStatusUpdate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934]" test-instance-name="Kernel_UINStatusUpdate_UIN_Status_UnusedToAssigned" name="Kernel_UINStatusUpdate_UIN_Status_AssignedToUnused" duration-ms="1166" started-at="2019-06-29T14:27:32Z" data-provider="UINStatusUpdate" finished-at="2019-06-29T14:27:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_UINStatusUpdate_UIN_Status_AssignedToUnused]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_UINStatusUpdate_UIN_Status_AssignedToUnused -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934]" test-instance-name="Kernel_UINStatusUpdate_UIN_Status_UnusedToAssigned" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:27:33Z" finished-at="2019-06-29T14:27:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_UINStatusUpdate_UIN_Status_AssignedToUnused status=SUCCESS method=UINStatusUpdate.updateUINStatusUpdate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934]" test-instance-name="Kernel_UINStatusUpdate_UIN_Status_UnusedToAssigned" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:27:33Z" finished-at="2019-06-29T14:27:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.UINStatusUpdate.updateUINStatusUpdate(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@17994ef8]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="updateUINStatusUpdate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934]" test-instance-name="Kernel_UINStatusUpdate_UIN_Status_UnusedToAssigned" name="Kernel_UINStatusUpdate_UIN_Status_empty_status" duration-ms="18898" started-at="2019-06-29T14:27:33Z" data-provider="UINStatusUpdate" finished-at="2019-06-29T14:27:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_UINStatusUpdate_UIN_Status_empty_status]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_UINStatusUpdate_UIN_Status_empty_status -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934]" test-instance-name="Kernel_UINStatusUpdate_UIN_Status_UnusedToAssigned" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:27:52Z" finished-at="2019-06-29T14:27:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_UINStatusUpdate_UIN_Status_empty_status status=SUCCESS method=UINStatusUpdate.updateUINStatusUpdate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934]" test-instance-name="Kernel_UINStatusUpdate_UIN_Status_UnusedToAssigned" name="getTestCaseName" is-config="true" duration-ms="6" started-at="2019-06-29T14:27:52Z" finished-at="2019-06-29T14:27:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.UINStatusUpdate.updateUINStatusUpdate(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@c0684ee]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="updateUINStatusUpdate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934]" test-instance-name="Kernel_UINStatusUpdate_UIN_Status_UnusedToAssigned" name="Kernel_UINStatusUpdate_UIN_Status_empty_uin" duration-ms="698" started-at="2019-06-29T14:27:52Z" data-provider="UINStatusUpdate" finished-at="2019-06-29T14:27:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_UINStatusUpdate_UIN_Status_empty_uin]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_UINStatusUpdate_UIN_Status_empty_uin -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934]" test-instance-name="Kernel_UINStatusUpdate_UIN_Status_UnusedToAssigned" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:27:53Z" finished-at="2019-06-29T14:27:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.UINStatusUpdate.updateUINStatusUpdate(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2d47970a]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934]" test-instance-name="Kernel_UINStatusUpdate_UIN_Status_UnusedToAssigned" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:27:53Z" finished-at="2019-06-29T14:27:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_UINStatusUpdate_UIN_Status_empty_uin status=SUCCESS method=UINStatusUpdate.updateUINStatusUpdate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="updateUINStatusUpdate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934]" test-instance-name="Kernel_UINStatusUpdate_UIN_Status_UnusedToAssigned" name="Kernel_UINStatusUpdate_UIN_Status_IssuedToAssigned" duration-ms="705" started-at="2019-06-29T14:27:53Z" data-provider="UINStatusUpdate" finished-at="2019-06-29T14:27:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_UINStatusUpdate_UIN_Status_IssuedToAssigned]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_UINStatusUpdate_UIN_Status_IssuedToAssigned -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934]" test-instance-name="Kernel_UINStatusUpdate_UIN_Status_UnusedToAssigned" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:27:53Z" finished-at="2019-06-29T14:27:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_UINStatusUpdate_UIN_Status_IssuedToAssigned status=SUCCESS method=UINStatusUpdate.updateUINStatusUpdate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934]" test-instance-name="Kernel_UINStatusUpdate_UIN_Status_UnusedToAssigned" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:27:53Z" finished-at="2019-06-29T14:27:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.UINStatusUpdate.updateUINStatusUpdate(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1425f44b]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="updateUINStatusUpdate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934]" test-instance-name="Kernel_UINStatusUpdate_UIN_Status_UnusedToAssigned" name="Kernel_UINStatusUpdate_UIN_Status_smoke_IssuedToUnused" duration-ms="766" started-at="2019-06-29T14:27:53Z" data-provider="UINStatusUpdate" finished-at="2019-06-29T14:27:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_UINStatusUpdate_UIN_Status_smoke_IssuedToUnused]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_UINStatusUpdate_UIN_Status_smoke_IssuedToUnused -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934]" test-instance-name="Kernel_UINStatusUpdate_UIN_Status_UnusedToAssigned" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:27:54Z" finished-at="2019-06-29T14:27:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_UINStatusUpdate_UIN_Status_smoke_IssuedToUnused status=SUCCESS method=UINStatusUpdate.updateUINStatusUpdate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934]" test-instance-name="Kernel_UINStatusUpdate_UIN_Status_UnusedToAssigned" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:27:54Z" finished-at="2019-06-29T14:27:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.UINStatusUpdate.updateUINStatusUpdate(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@499686b9]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="updateUINStatusUpdate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934]" test-instance-name="Kernel_UINStatusUpdate_UIN_Status_UnusedToAssigned" name="Kernel_UINStatusUpdate_UIN_Status_UnusedToAssigned" duration-ms="17264" started-at="2019-06-29T14:27:54Z" data-provider="UINStatusUpdate" finished-at="2019-06-29T14:28:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_UINStatusUpdate_UIN_Status_UnusedToAssigned]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_UINStatusUpdate_UIN_Status_UnusedToAssigned -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934]" test-instance-name="Kernel_UINStatusUpdate_UIN_Status_UnusedToAssigned" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:28:11Z" finished-at="2019-06-29T14:28:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_UINStatusUpdate_UIN_Status_UnusedToAssigned status=SUCCESS method=UINStatusUpdate.updateUINStatusUpdate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UINStatusUpdate@2c34f934] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.UINStatusUpdate -->
      <class name="io.mosip.kernel.tests.FetchMachineHistory">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchMachineHistory@5ea434c8]" test-instance-name="kernel_FetchMachineHistory_invalid_langcode_unexisting in DB" name="getTestCaseName" is-config="true" duration-ms="268" started-at="2019-06-29T14:18:49Z" finished-at="2019-06-29T14:18:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchMachineHistory.fetchMachineHistory(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@622031f8]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchMachineHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchMachineHistory@5ea434c8]" test-instance-name="kernel_FetchMachineHistory_invalid_langcode_unexisting in DB" name="kernel_FetchMachineHistory_allValid_smoke" duration-ms="15268" started-at="2019-06-29T14:18:49Z" data-provider="fetchData" finished-at="2019-06-29T14:19:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchMachineHistory_allValid_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchMachineHistory@5ea434c8]" test-instance-name="kernel_FetchMachineHistory_invalid_langcode_unexisting in DB" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:19:05Z" finished-at="2019-06-29T14:19:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchMachineHistory_allValid_smoke status=SUCCESS method=FetchMachineHistory.fetchMachineHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchMachineHistory@5ea434c8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchMachineHistory@5ea434c8]" test-instance-name="kernel_FetchMachineHistory_invalid_langcode_unexisting in DB" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:19:05Z" finished-at="2019-06-29T14:19:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchMachineHistory.fetchMachineHistory(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@366c2d9c]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchMachineHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchMachineHistory@5ea434c8]" test-instance-name="kernel_FetchMachineHistory_invalid_langcode_unexisting in DB" name="kernel_FetchMachineHistory_invalid_effdatetimes_before effective date" duration-ms="276" started-at="2019-06-29T14:19:05Z" data-provider="fetchData" finished-at="2019-06-29T14:19:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_effdatetimes_before effective date]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchMachineHistory_invalid_effdatetimes_before effective date -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchMachineHistory@5ea434c8]" test-instance-name="kernel_FetchMachineHistory_invalid_langcode_unexisting in DB" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:19:05Z" finished-at="2019-06-29T14:19:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchMachineHistory_invalid_effdatetimes_before effective date status=SUCCESS method=FetchMachineHistory.fetchMachineHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchMachineHistory@5ea434c8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="fetchMachineHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchMachineHistory@5ea434c8]" test-instance-name="kernel_FetchMachineHistory_invalid_langcode_unexisting in DB" name="kernel_FetchMachineHistory_invalid_effdatetimes_invalid Date format" duration-ms="272" started-at="2019-06-29T14:19:05Z" data-provider="fetchData" finished-at="2019-06-29T14:19:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_effdatetimes_invalid Date format]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchMachineHistory_invalid_effdatetimes_invalid Date format -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchMachineHistory@5ea434c8]" test-instance-name="kernel_FetchMachineHistory_invalid_langcode_unexisting in DB" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:19:05Z" finished-at="2019-06-29T14:19:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchMachineHistory.fetchMachineHistory(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1872c2d5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchMachineHistory@5ea434c8]" test-instance-name="kernel_FetchMachineHistory_invalid_langcode_unexisting in DB" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:19:05Z" finished-at="2019-06-29T14:19:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchMachineHistory.fetchMachineHistory(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@15b810df]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchMachineHistory@5ea434c8]" test-instance-name="kernel_FetchMachineHistory_invalid_langcode_unexisting in DB" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:19:05Z" finished-at="2019-06-29T14:19:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchMachineHistory_invalid_effdatetimes_invalid Date format status=SUCCESS method=FetchMachineHistory.fetchMachineHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchMachineHistory@5ea434c8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="fetchMachineHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchMachineHistory@5ea434c8]" test-instance-name="kernel_FetchMachineHistory_invalid_langcode_unexisting in DB" name="kernel_FetchMachineHistory_invalid_id_unexisting" duration-ms="297" started-at="2019-06-29T14:19:05Z" data-provider="fetchData" finished-at="2019-06-29T14:19:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_id_unexisting]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchMachineHistory_invalid_id_unexisting -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchMachineHistory@5ea434c8]" test-instance-name="kernel_FetchMachineHistory_invalid_langcode_unexisting in DB" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:19:06Z" finished-at="2019-06-29T14:19:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchMachineHistory_invalid_id_unexisting status=SUCCESS method=FetchMachineHistory.fetchMachineHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchMachineHistory@5ea434c8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchMachineHistory@5ea434c8]" test-instance-name="kernel_FetchMachineHistory_invalid_langcode_unexisting in DB" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:19:06Z" finished-at="2019-06-29T14:19:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchMachineHistory.fetchMachineHistory(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@76745c61]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchMachineHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchMachineHistory@5ea434c8]" test-instance-name="kernel_FetchMachineHistory_invalid_langcode_unexisting in DB" name="kernel_FetchMachineHistory_invalid_langcode_unexisting in DB" duration-ms="295" started-at="2019-06-29T14:19:06Z" data-provider="fetchData" finished-at="2019-06-29T14:19:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode_unexisting in DB]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchMachineHistory_invalid_langcode_unexisting in DB -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchMachineHistory@5ea434c8]" test-instance-name="kernel_FetchMachineHistory_invalid_langcode_unexisting in DB" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:19:06Z" finished-at="2019-06-29T14:19:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchMachineHistory_invalid_langcode_unexisting in DB status=SUCCESS method=FetchMachineHistory.fetchMachineHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchMachineHistory@5ea434c8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.FetchMachineHistory -->
      <class name="io.mosip.kernel.tests.FetchDocumentTypes">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentTypes@525f1e4e]" test-instance-name="kernel_fetchDocumentTypes_valid_smoke" name="getTestCaseName" is-config="true" duration-ms="259" started-at="2019-06-29T14:16:42Z" finished-at="2019-06-29T14:16:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchDocumentTypes.fetchDocumentTypes(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@315bd2cd]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchDocumentTypes(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentTypes@525f1e4e]" test-instance-name="kernel_fetchDocumentTypes_valid_smoke" name="kernel_fetchDocumentTypes_invalid_documentcategorycode_notpresent" duration-ms="288" started-at="2019-06-29T14:16:42Z" data-provider="fetchData" finished-at="2019-06-29T14:16:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_documentcategorycode_notpresent]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchDocumentTypes_invalid_documentcategorycode_notpresent -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentTypes@525f1e4e]" test-instance-name="kernel_fetchDocumentTypes_valid_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:16:42Z" finished-at="2019-06-29T14:16:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchDocumentTypes_invalid_documentcategorycode_notpresent status=SUCCESS method=FetchDocumentTypes.fetchDocumentTypes(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentTypes@525f1e4e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentTypes@525f1e4e]" test-instance-name="kernel_fetchDocumentTypes_valid_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:16:42Z" finished-at="2019-06-29T14:16:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchDocumentTypes.fetchDocumentTypes(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@49f5758f]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchDocumentTypes(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentTypes@525f1e4e]" test-instance-name="kernel_fetchDocumentTypes_valid_smoke" name="kernel_fetchDocumentTypes_invalid_langcode_notpresent" duration-ms="282" started-at="2019-06-29T14:16:42Z" data-provider="fetchData" finished-at="2019-06-29T14:16:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode_notpresent]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchDocumentTypes_invalid_langcode_notpresent -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentTypes@525f1e4e]" test-instance-name="kernel_fetchDocumentTypes_valid_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:16:42Z" finished-at="2019-06-29T14:16:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchDocumentTypes_invalid_langcode_notpresent status=SUCCESS method=FetchDocumentTypes.fetchDocumentTypes(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentTypes@525f1e4e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentTypes@525f1e4e]" test-instance-name="kernel_fetchDocumentTypes_valid_smoke" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:16:42Z" finished-at="2019-06-29T14:16:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchDocumentTypes.fetchDocumentTypes(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@716661b3]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchDocumentTypes(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentTypes@525f1e4e]" test-instance-name="kernel_fetchDocumentTypes_valid_smoke" name="kernel_fetchDocumentTypes_valid_smoke" duration-ms="274" started-at="2019-06-29T14:16:42Z" data-provider="fetchData" finished-at="2019-06-29T14:16:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[valid_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchDocumentTypes_valid_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentTypes@525f1e4e]" test-instance-name="kernel_fetchDocumentTypes_valid_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:16:43Z" finished-at="2019-06-29T14:16:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchDocumentTypes_valid_smoke status=SUCCESS method=FetchDocumentTypes.fetchDocumentTypes(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentTypes@525f1e4e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.FetchDocumentTypes -->
      <class name="io.mosip.kernel.tests.GetDocTypeDocCatByLangCode">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByLangCode@8e0379d]" test-instance-name="Kernel_GetDocType_DocCatByLangCode_smoke" name="getTestCaseName" is-config="true" duration-ms="229" started-at="2019-06-29T14:22:13Z" finished-at="2019-06-29T14:22:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetDocTypeDocCatByLangCode.getDocType_DocCatByLangCode(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@50a7dc25]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getDocType_DocCatByLangCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByLangCode@8e0379d]" test-instance-name="Kernel_GetDocType_DocCatByLangCode_smoke" name="Kernel_GetDocType_DocCatByLangCode_invalid_languagecode" duration-ms="297" started-at="2019-06-29T14:22:13Z" data-provider="GetDocType_DocCatByLangCode" finished-at="2019-06-29T14:22:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetDocType_DocCatByLangCode_invalid_languagecode]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetDocType_DocCatByLangCode_invalid_languagecode -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByLangCode@8e0379d]" test-instance-name="Kernel_GetDocType_DocCatByLangCode_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:13Z" finished-at="2019-06-29T14:22:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetDocTypeDocCatByLangCode.getDocType_DocCatByLangCode(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2ae032c4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByLangCode@8e0379d]" test-instance-name="Kernel_GetDocType_DocCatByLangCode_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:13Z" finished-at="2019-06-29T14:22:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetDocType_DocCatByLangCode_invalid_languagecode status=SUCCESS method=GetDocTypeDocCatByLangCode.getDocType_DocCatByLangCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByLangCode@8e0379d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getDocType_DocCatByLangCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByLangCode@8e0379d]" test-instance-name="Kernel_GetDocType_DocCatByLangCode_smoke" name="Kernel_GetDocType_DocCatByLangCode_lang_code_ara" duration-ms="276" started-at="2019-06-29T14:22:13Z" data-provider="GetDocType_DocCatByLangCode" finished-at="2019-06-29T14:22:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetDocType_DocCatByLangCode_lang_code_ara]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetDocType_DocCatByLangCode_lang_code_ara -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByLangCode@8e0379d]" test-instance-name="Kernel_GetDocType_DocCatByLangCode_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:13Z" finished-at="2019-06-29T14:22:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetDocType_DocCatByLangCode_lang_code_ara status=SUCCESS method=GetDocTypeDocCatByLangCode.getDocType_DocCatByLangCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByLangCode@8e0379d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getDocType_DocCatByLangCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByLangCode@8e0379d]" test-instance-name="Kernel_GetDocType_DocCatByLangCode_smoke" name="Kernel_GetDocType_DocCatByLangCode_lang_code_fra" duration-ms="320" started-at="2019-06-29T14:22:13Z" data-provider="GetDocType_DocCatByLangCode" finished-at="2019-06-29T14:22:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetDocType_DocCatByLangCode_lang_code_fra]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetDocType_DocCatByLangCode_lang_code_fra -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByLangCode@8e0379d]" test-instance-name="Kernel_GetDocType_DocCatByLangCode_smoke" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:13Z" finished-at="2019-06-29T14:22:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetDocTypeDocCatByLangCode.getDocType_DocCatByLangCode(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5a6d931c]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByLangCode@8e0379d]" test-instance-name="Kernel_GetDocType_DocCatByLangCode_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:14Z" finished-at="2019-06-29T14:22:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetDocType_DocCatByLangCode_lang_code_fra status=SUCCESS method=GetDocTypeDocCatByLangCode.getDocType_DocCatByLangCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByLangCode@8e0379d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByLangCode@8e0379d]" test-instance-name="Kernel_GetDocType_DocCatByLangCode_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:14Z" finished-at="2019-06-29T14:22:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetDocTypeDocCatByLangCode.getDocType_DocCatByLangCode(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@3b606079]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getDocType_DocCatByLangCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByLangCode@8e0379d]" test-instance-name="Kernel_GetDocType_DocCatByLangCode_smoke" name="Kernel_GetDocType_DocCatByLangCode_smoke" duration-ms="302" started-at="2019-06-29T14:22:14Z" data-provider="GetDocType_DocCatByLangCode" finished-at="2019-06-29T14:22:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetDocType_DocCatByLangCode_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetDocType_DocCatByLangCode_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByLangCode@8e0379d]" test-instance-name="Kernel_GetDocType_DocCatByLangCode_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:14Z" finished-at="2019-06-29T14:22:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetDocType_DocCatByLangCode_smoke status=SUCCESS method=GetDocTypeDocCatByLangCode.getDocType_DocCatByLangCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByLangCode@8e0379d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.GetDocTypeDocCatByLangCode -->
      <class name="io.mosip.kernel.tests.FetchRegCentHolidays">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHolidays@29f69090]" test-instance-name="kernel_FetchRegCentHolidays_invalid_year_unexisting" name="getTestCaseName" is-config="true" duration-ms="11114" started-at="2019-06-29T14:19:40Z" finished-at="2019-06-29T14:19:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCentHolidays.fetchRegCentHolidays(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@21b9adc1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegCentHolidays(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHolidays@29f69090]" test-instance-name="kernel_FetchRegCentHolidays_invalid_year_unexisting" name="kernel_FetchRegCentHolidays_allValid_smoke" duration-ms="14292" started-at="2019-06-29T14:19:51Z" data-provider="fetchData" finished-at="2019-06-29T14:20:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCentHolidays_allValid_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHolidays@29f69090]" test-instance-name="kernel_FetchRegCentHolidays_invalid_year_unexisting" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:20:05Z" finished-at="2019-06-29T14:20:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCentHolidays_allValid_smoke status=SUCCESS method=FetchRegCentHolidays.fetchRegCentHolidays(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHolidays@29f69090] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHolidays@29f69090]" test-instance-name="kernel_FetchRegCentHolidays_invalid_year_unexisting" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:20:05Z" finished-at="2019-06-29T14:20:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCentHolidays.fetchRegCentHolidays(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@70f0bd97]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegCentHolidays(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHolidays@29f69090]" test-instance-name="kernel_FetchRegCentHolidays_invalid_year_unexisting" name="kernel_FetchRegCentHolidays_invalid_langcode_unexisting" duration-ms="284" started-at="2019-06-29T14:20:05Z" data-provider="fetchData" finished-at="2019-06-29T14:20:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode_unexisting]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCentHolidays_invalid_langcode_unexisting -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHolidays@29f69090]" test-instance-name="kernel_FetchRegCentHolidays_invalid_year_unexisting" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:20:05Z" finished-at="2019-06-29T14:20:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCentHolidays_invalid_langcode_unexisting status=SUCCESS method=FetchRegCentHolidays.fetchRegCentHolidays(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHolidays@29f69090] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHolidays@29f69090]" test-instance-name="kernel_FetchRegCentHolidays_invalid_year_unexisting" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:20:05Z" finished-at="2019-06-29T14:20:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCentHolidays.fetchRegCentHolidays(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7f814c6e]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegCentHolidays(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHolidays@29f69090]" test-instance-name="kernel_FetchRegCentHolidays_invalid_year_unexisting" name="kernel_FetchRegCentHolidays_invalid_registrationcenterid_unexisting" duration-ms="290" started-at="2019-06-29T14:20:05Z" data-provider="fetchData" finished-at="2019-06-29T14:20:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_registrationcenterid_unexisting]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCentHolidays_invalid_registrationcenterid_unexisting -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHolidays@29f69090]" test-instance-name="kernel_FetchRegCentHolidays_invalid_year_unexisting" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:20:06Z" finished-at="2019-06-29T14:20:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCentHolidays.fetchRegCentHolidays(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@43fbd29]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHolidays@29f69090]" test-instance-name="kernel_FetchRegCentHolidays_invalid_year_unexisting" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:20:06Z" finished-at="2019-06-29T14:20:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCentHolidays_invalid_registrationcenterid_unexisting status=SUCCESS method=FetchRegCentHolidays.fetchRegCentHolidays(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHolidays@29f69090] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="fetchRegCentHolidays(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHolidays@29f69090]" test-instance-name="kernel_FetchRegCentHolidays_invalid_year_unexisting" name="kernel_FetchRegCentHolidays_invalid_year_unexisting" duration-ms="288" started-at="2019-06-29T14:20:06Z" data-provider="fetchData" finished-at="2019-06-29T14:20:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_year_unexisting]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCentHolidays_invalid_year_unexisting -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHolidays@29f69090]" test-instance-name="kernel_FetchRegCentHolidays_invalid_year_unexisting" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:20:06Z" finished-at="2019-06-29T14:20:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCentHolidays_invalid_year_unexisting status=SUCCESS method=FetchRegCentHolidays.fetchRegCentHolidays(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHolidays@29f69090] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.FetchRegCentHolidays -->
      <class name="io.mosip.kernel.tests.FetchDocumentCategories">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentCategories@275710fc]" test-instance-name="kernel_fetchDocumentCategories_valid_smoke_langcodeandCode" name="getTestCaseName" is-config="true" duration-ms="255" started-at="2019-06-29T14:16:12Z" finished-at="2019-06-29T14:16:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchDocumentCategories.fetchDocumentCategories(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7a3a8ee0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchDocumentCategories(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentCategories@275710fc]" test-instance-name="kernel_fetchDocumentCategories_valid_smoke_langcodeandCode" name="kernel_fetchDocumentCategories_invalid_code_notpresent" duration-ms="296" started-at="2019-06-29T14:16:12Z" data-provider="fetchData" finished-at="2019-06-29T14:16:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_code_notpresent]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchDocumentCategories_invalid_code_notpresent -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentCategories@275710fc]" test-instance-name="kernel_fetchDocumentCategories_valid_smoke_langcodeandCode" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:16:12Z" finished-at="2019-06-29T14:16:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchDocumentCategories_invalid_code_notpresent status=SUCCESS method=FetchDocumentCategories.fetchDocumentCategories(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentCategories@275710fc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentCategories@275710fc]" test-instance-name="kernel_fetchDocumentCategories_valid_smoke_langcodeandCode" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:16:12Z" finished-at="2019-06-29T14:16:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchDocumentCategories.fetchDocumentCategories(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@86e170e]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchDocumentCategories(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentCategories@275710fc]" test-instance-name="kernel_fetchDocumentCategories_valid_smoke_langcodeandCode" name="kernel_fetchDocumentCategories_invalid_langcode" duration-ms="275" started-at="2019-06-29T14:16:12Z" data-provider="fetchData" finished-at="2019-06-29T14:16:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchDocumentCategories_invalid_langcode -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentCategories@275710fc]" test-instance-name="kernel_fetchDocumentCategories_valid_smoke_langcodeandCode" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:16:12Z" finished-at="2019-06-29T14:16:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchDocumentCategories_invalid_langcode status=SUCCESS method=FetchDocumentCategories.fetchDocumentCategories(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentCategories@275710fc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentCategories@275710fc]" test-instance-name="kernel_fetchDocumentCategories_valid_smoke_langcodeandCode" name="getTestCaseName" is-config="true" duration-ms="4" started-at="2019-06-29T14:16:12Z" finished-at="2019-06-29T14:16:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchDocumentCategories.fetchDocumentCategories(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@4c9e86a4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchDocumentCategories(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentCategories@275710fc]" test-instance-name="kernel_fetchDocumentCategories_valid_smoke_langcodeandCode" name="kernel_fetchDocumentCategories_valid_smoke_langcode" duration-ms="15377" started-at="2019-06-29T14:16:12Z" data-provider="fetchData" finished-at="2019-06-29T14:16:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[valid_smoke_langcode]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchDocumentCategories_valid_smoke_langcode -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentCategories@275710fc]" test-instance-name="kernel_fetchDocumentCategories_valid_smoke_langcodeandCode" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:16:28Z" finished-at="2019-06-29T14:16:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchDocumentCategories_valid_smoke_langcode status=SUCCESS method=FetchDocumentCategories.fetchDocumentCategories(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentCategories@275710fc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="fetchDocumentCategories(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentCategories@275710fc]" test-instance-name="kernel_fetchDocumentCategories_valid_smoke_langcodeandCode" name="kernel_fetchDocumentCategories_valid_smoke_langcodeandCode" duration-ms="13834" started-at="2019-06-29T14:16:28Z" data-provider="fetchData" finished-at="2019-06-29T14:16:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[valid_smoke_langcodeandCode]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchDocumentCategories_valid_smoke_langcodeandCode -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentCategories@275710fc]" test-instance-name="kernel_fetchDocumentCategories_valid_smoke_langcodeandCode" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:16:28Z" finished-at="2019-06-29T14:16:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchDocumentCategories.fetchDocumentCategories(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1fb81254]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentCategories@275710fc]" test-instance-name="kernel_fetchDocumentCategories_valid_smoke_langcodeandCode" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:16:42Z" finished-at="2019-06-29T14:16:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchDocumentCategories_valid_smoke_langcodeandCode status=SUCCESS method=FetchDocumentCategories.fetchDocumentCategories(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDocumentCategories@275710fc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.FetchDocumentCategories -->
      <class name="io.mosip.kernel.tests.FetchBiometricAuthType">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAuthType@6ee12bac]" test-instance-name="kernel_fetchBiometricAuthType_valid_smoke" name="getTestCaseName" is-config="true" duration-ms="263" started-at="2019-06-29T14:14:55Z" finished-at="2019-06-29T14:14:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchBiometricAuthType.fetchBiometricAuthType(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@189faf12]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchBiometricAuthType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAuthType@6ee12bac]" test-instance-name="kernel_fetchBiometricAuthType_valid_smoke" name="kernel_fetchBiometricAuthType_invalid_langcode" duration-ms="318" started-at="2019-06-29T14:14:55Z" data-provider="fetchData" finished-at="2019-06-29T14:14:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchBiometricAuthType_invalid_langcode -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAuthType@6ee12bac]" test-instance-name="kernel_fetchBiometricAuthType_valid_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:55Z" finished-at="2019-06-29T14:14:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchBiometricAuthType_invalid_langcode status=SUCCESS method=FetchBiometricAuthType.fetchBiometricAuthType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAuthType@6ee12bac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAuthType@6ee12bac]" test-instance-name="kernel_fetchBiometricAuthType_valid_smoke" name="getTestCaseName" is-config="true" duration-ms="5" started-at="2019-06-29T14:14:55Z" finished-at="2019-06-29T14:14:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchBiometricAuthType.fetchBiometricAuthType(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7f06ef67]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchBiometricAuthType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAuthType@6ee12bac]" test-instance-name="kernel_fetchBiometricAuthType_valid_smoke" name="kernel_fetchBiometricAuthType_invalid_langcode_empty" duration-ms="292" started-at="2019-06-29T14:14:55Z" data-provider="fetchData" finished-at="2019-06-29T14:14:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode_empty]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchBiometricAuthType_invalid_langcode_empty -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAuthType@6ee12bac]" test-instance-name="kernel_fetchBiometricAuthType_valid_smoke" name="getTestCaseName" is-config="true" duration-ms="4" started-at="2019-06-29T14:14:55Z" finished-at="2019-06-29T14:14:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchBiometricAuthType.fetchBiometricAuthType(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@599f0fab]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAuthType@6ee12bac]" test-instance-name="kernel_fetchBiometricAuthType_valid_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:55Z" finished-at="2019-06-29T14:14:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchBiometricAuthType_invalid_langcode_empty status=SUCCESS method=FetchBiometricAuthType.fetchBiometricAuthType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAuthType@6ee12bac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="fetchBiometricAuthType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAuthType@6ee12bac]" test-instance-name="kernel_fetchBiometricAuthType_valid_smoke" name="kernel_fetchBiometricAuthType_valid_smoke" duration-ms="14327" started-at="2019-06-29T14:14:55Z" data-provider="fetchData" finished-at="2019-06-29T14:15:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[valid_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchBiometricAuthType_valid_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAuthType@6ee12bac]" test-instance-name="kernel_fetchBiometricAuthType_valid_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:15:10Z" finished-at="2019-06-29T14:15:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchBiometricAuthType_valid_smoke status=SUCCESS method=FetchBiometricAuthType.fetchBiometricAuthType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAuthType@6ee12bac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.FetchBiometricAuthType -->
      <class name="io.mosip.kernel.tests.UINStatusCheck">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.UINStatusCheck@55ca8de8]" test-instance-name="Kernel_UINStatusCheck_smoke" name="getTestCaseName" is-config="true" duration-ms="244" started-at="2019-06-29T14:27:02Z" finished-at="2019-06-29T14:27:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.UINStatusCheck.checkUINStatusCheck(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@172194b9]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="checkUINStatusCheck(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UINStatusCheck@55ca8de8]" test-instance-name="Kernel_UINStatusCheck_smoke" name="Kernel_UINStatusCheck_smoke" duration-ms="28583" started-at="2019-06-29T14:27:02Z" data-provider="UINStatusCheck" finished-at="2019-06-29T14:27:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_UINStatusCheck_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_UINStatusCheck_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.UINStatusCheck@55ca8de8]" test-instance-name="Kernel_UINStatusCheck_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:27:31Z" finished-at="2019-06-29T14:27:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_UINStatusCheck_smoke status=SUCCESS method=UINStatusCheck.checkUINStatusCheck(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UINStatusCheck@55ca8de8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.UINStatusCheck -->
      <class name="io.mosip.kernel.tests.FetchIDlist">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchIDlist@4de5031f]" test-instance-name="kernel_fetchIDlist_valid_smoke" name="getTestCaseName" is-config="true" duration-ms="252" started-at="2019-06-29T14:17:59Z" finished-at="2019-06-29T14:17:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchIDlist.fetchIDlist(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@4973aba1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchIDlist(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchIDlist@4de5031f]" test-instance-name="kernel_fetchIDlist_valid_smoke" name="kernel_fetchIDlist_invalid_langcode" duration-ms="300" started-at="2019-06-29T14:17:59Z" data-provider="fetchData" finished-at="2019-06-29T14:17:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchIDlist_invalid_langcode -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchIDlist@4de5031f]" test-instance-name="kernel_fetchIDlist_valid_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:17:59Z" finished-at="2019-06-29T14:17:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchIDlist.fetchIDlist(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@425ee3ab]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchIDlist@4de5031f]" test-instance-name="kernel_fetchIDlist_valid_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:17:59Z" finished-at="2019-06-29T14:17:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchIDlist_invalid_langcode status=SUCCESS method=FetchIDlist.fetchIDlist(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchIDlist@4de5031f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="fetchIDlist(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchIDlist@4de5031f]" test-instance-name="kernel_fetchIDlist_valid_smoke" name="kernel_fetchIDlist_valid_smoke" duration-ms="291" started-at="2019-06-29T14:17:59Z" data-provider="fetchData" finished-at="2019-06-29T14:18:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[valid_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchIDlist_valid_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchIDlist@4de5031f]" test-instance-name="kernel_fetchIDlist_valid_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:18:00Z" finished-at="2019-06-29T14:18:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchIDlist_valid_smoke status=SUCCESS method=FetchIDlist.fetchIDlist(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchIDlist@4de5031f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.FetchIDlist -->
      <class name="io.mosip.kernel.tests.TokenIdGenerator">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.TokenIdGenerator@20d3d15a]" test-instance-name="kernel_TokenIdGenerator_invalid_uin_blank" name="getTestCaseName" is-config="true" duration-ms="259" started-at="2019-06-29T14:27:00Z" finished-at="2019-06-29T14:27:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.TokenIdGenerator.tokenIdGenerator(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@717b5af1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="tokenIdGenerator(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.TokenIdGenerator@20d3d15a]" test-instance-name="kernel_TokenIdGenerator_invalid_uin_blank" name="kernel_TokenIdGenerator_allValid_smoke_validate tokenId length is 36" duration-ms="284" started-at="2019-06-29T14:27:00Z" data-provider="fetchData" finished-at="2019-06-29T14:27:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke_validate tokenId length is 36]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_TokenIdGenerator_allValid_smoke_validate tokenId length is 36 -->
        <test-method status="PASS" signature="tokenIdGenerator(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.TokenIdGenerator@20d3d15a]" test-instance-name="kernel_TokenIdGenerator_invalid_uin_blank" name="kernel_TokenIdGenerator_allValid_smoke_with_UIN and PartnerId" duration-ms="290" started-at="2019-06-29T14:27:00Z" data-provider="fetchData" finished-at="2019-06-29T14:27:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke_with_UIN and PartnerId]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_TokenIdGenerator_allValid_smoke_with_UIN and PartnerId -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.TokenIdGenerator@20d3d15a]" test-instance-name="kernel_TokenIdGenerator_invalid_uin_blank" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:27:00Z" finished-at="2019-06-29T14:27:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_TokenIdGenerator_allValid_smoke_validate tokenId length is 36 status=SUCCESS method=TokenIdGenerator.tokenIdGenerator(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.TokenIdGenerator@20d3d15a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.TokenIdGenerator@20d3d15a]" test-instance-name="kernel_TokenIdGenerator_invalid_uin_blank" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:27:00Z" finished-at="2019-06-29T14:27:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.TokenIdGenerator.tokenIdGenerator(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6e6b3dbf]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.TokenIdGenerator@20d3d15a]" test-instance-name="kernel_TokenIdGenerator_invalid_uin_blank" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:27:00Z" finished-at="2019-06-29T14:27:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_TokenIdGenerator_allValid_smoke_with_UIN and PartnerId status=SUCCESS method=TokenIdGenerator.tokenIdGenerator(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.TokenIdGenerator@20d3d15a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="tokenIdGenerator(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.TokenIdGenerator@20d3d15a]" test-instance-name="kernel_TokenIdGenerator_invalid_uin_blank" name="kernel_TokenIdGenerator_invalid_partnercode_blank" duration-ms="293" started-at="2019-06-29T14:27:00Z" data-provider="fetchData" finished-at="2019-06-29T14:27:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_partnercode_blank]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_TokenIdGenerator_invalid_partnercode_blank -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.TokenIdGenerator@20d3d15a]" test-instance-name="kernel_TokenIdGenerator_invalid_uin_blank" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:27:00Z" finished-at="2019-06-29T14:27:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.TokenIdGenerator.tokenIdGenerator(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@4ecbd1da]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.TokenIdGenerator@20d3d15a]" test-instance-name="kernel_TokenIdGenerator_invalid_uin_blank" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:27:01Z" finished-at="2019-06-29T14:27:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_TokenIdGenerator_invalid_partnercode_blank status=SUCCESS method=TokenIdGenerator.tokenIdGenerator(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.TokenIdGenerator@20d3d15a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.TokenIdGenerator@20d3d15a]" test-instance-name="kernel_TokenIdGenerator_invalid_uin_blank" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:27:01Z" finished-at="2019-06-29T14:27:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.TokenIdGenerator.tokenIdGenerator(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@b97bc80]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="tokenIdGenerator(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.TokenIdGenerator@20d3d15a]" test-instance-name="kernel_TokenIdGenerator_invalid_uin_blank" name="kernel_TokenIdGenerator_invalid_uin_blank" duration-ms="274" started-at="2019-06-29T14:27:01Z" data-provider="fetchData" finished-at="2019-06-29T14:27:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_uin_blank]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_TokenIdGenerator_invalid_uin_blank -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.TokenIdGenerator@20d3d15a]" test-instance-name="kernel_TokenIdGenerator_invalid_uin_blank" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:27:01Z" finished-at="2019-06-29T14:27:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_TokenIdGenerator_invalid_uin_blank status=SUCCESS method=TokenIdGenerator.tokenIdGenerator(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.TokenIdGenerator@20d3d15a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.TokenIdGenerator -->
      <class name="io.mosip.kernel.tests.FetchMachine">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchMachine@5d47c63f]" test-instance-name="kernel_FetchMachine_invalid_langcode_unexisting_with_id" name="getTestCaseName" is-config="true" duration-ms="239" started-at="2019-06-29T14:18:02Z" finished-at="2019-06-29T14:18:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchMachine.fetchMachine(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@4a61f876]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchMachine(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchMachine@5d47c63f]" test-instance-name="kernel_FetchMachine_invalid_langcode_unexisting_with_id" name="kernel_FetchMachine_allValid_smoke_get" duration-ms="15522" started-at="2019-06-29T14:18:02Z" data-provider="fetchData" finished-at="2019-06-29T14:18:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke_get]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchMachine_allValid_smoke_get -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchMachine@5d47c63f]" test-instance-name="kernel_FetchMachine_invalid_langcode_unexisting_with_id" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:18:18Z" finished-at="2019-06-29T14:18:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchMachine_allValid_smoke_get status=SUCCESS method=FetchMachine.fetchMachine(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchMachine@5d47c63f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchMachine@5d47c63f]" test-instance-name="kernel_FetchMachine_invalid_langcode_unexisting_with_id" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:18:18Z" finished-at="2019-06-29T14:18:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchMachine.fetchMachine(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@3a3a93b3]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchMachine(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchMachine@5d47c63f]" test-instance-name="kernel_FetchMachine_invalid_langcode_unexisting_with_id" name="kernel_FetchMachine_allValid_smoke_with_lang" duration-ms="15350" started-at="2019-06-29T14:18:18Z" data-provider="fetchData" finished-at="2019-06-29T14:18:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke_with_lang]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchMachine_allValid_smoke_with_lang -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchMachine@5d47c63f]" test-instance-name="kernel_FetchMachine_invalid_langcode_unexisting_with_id" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:18:33Z" finished-at="2019-06-29T14:18:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchMachine_allValid_smoke_with_lang status=SUCCESS method=FetchMachine.fetchMachine(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchMachine@5d47c63f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchMachine@5d47c63f]" test-instance-name="kernel_FetchMachine_invalid_langcode_unexisting_with_id" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:18:33Z" finished-at="2019-06-29T14:18:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchMachine.fetchMachine(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2b4f99e5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchMachine(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchMachine@5d47c63f]" test-instance-name="kernel_FetchMachine_invalid_langcode_unexisting_with_id" name="kernel_FetchMachine_allValid_smoke_with_lang and id" duration-ms="15311" started-at="2019-06-29T14:18:33Z" data-provider="fetchData" finished-at="2019-06-29T14:18:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke_with_lang and id]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchMachine_allValid_smoke_with_lang and id -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchMachine@5d47c63f]" test-instance-name="kernel_FetchMachine_invalid_langcode_unexisting_with_id" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:18:48Z" finished-at="2019-06-29T14:18:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchMachine.fetchMachine(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1e594828]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchMachine@5d47c63f]" test-instance-name="kernel_FetchMachine_invalid_langcode_unexisting_with_id" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:18:48Z" finished-at="2019-06-29T14:18:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchMachine_allValid_smoke_with_lang and id status=SUCCESS method=FetchMachine.fetchMachine(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchMachine@5d47c63f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="fetchMachine(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchMachine@5d47c63f]" test-instance-name="kernel_FetchMachine_invalid_langcode_unexisting_with_id" name="kernel_FetchMachine_invalid_id_unexisting" duration-ms="295" started-at="2019-06-29T14:18:48Z" data-provider="fetchData" finished-at="2019-06-29T14:18:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_id_unexisting]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchMachine_invalid_id_unexisting -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchMachine@5d47c63f]" test-instance-name="kernel_FetchMachine_invalid_langcode_unexisting_with_id" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:18:49Z" finished-at="2019-06-29T14:18:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchMachine_invalid_id_unexisting status=SUCCESS method=FetchMachine.fetchMachine(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchMachine@5d47c63f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchMachine@5d47c63f]" test-instance-name="kernel_FetchMachine_invalid_langcode_unexisting_with_id" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:18:49Z" finished-at="2019-06-29T14:18:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchMachine.fetchMachine(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5b3eb1dd]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchMachine(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchMachine@5d47c63f]" test-instance-name="kernel_FetchMachine_invalid_langcode_unexisting_with_id" name="kernel_FetchMachine_invalid_langcode_unexisting" duration-ms="301" started-at="2019-06-29T14:18:49Z" data-provider="fetchData" finished-at="2019-06-29T14:18:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode_unexisting]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchMachine_invalid_langcode_unexisting -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchMachine@5d47c63f]" test-instance-name="kernel_FetchMachine_invalid_langcode_unexisting_with_id" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:18:49Z" finished-at="2019-06-29T14:18:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchMachine.fetchMachine(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@35771602]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchMachine@5d47c63f]" test-instance-name="kernel_FetchMachine_invalid_langcode_unexisting_with_id" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:18:49Z" finished-at="2019-06-29T14:18:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchMachine_invalid_langcode_unexisting status=SUCCESS method=FetchMachine.fetchMachine(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchMachine@5d47c63f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="fetchMachine(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchMachine@5d47c63f]" test-instance-name="kernel_FetchMachine_invalid_langcode_unexisting_with_id" name="kernel_FetchMachine_invalid_langcode_unexisting_with_id" duration-ms="299" started-at="2019-06-29T14:18:49Z" data-provider="fetchData" finished-at="2019-06-29T14:18:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode_unexisting_with_id]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchMachine_invalid_langcode_unexisting_with_id -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchMachine@5d47c63f]" test-instance-name="kernel_FetchMachine_invalid_langcode_unexisting_with_id" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:18:49Z" finished-at="2019-06-29T14:18:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchMachine_invalid_langcode_unexisting_with_id status=SUCCESS method=FetchMachine.fetchMachine(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchMachine@5d47c63f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.FetchMachine -->
      <class name="io.mosip.kernel.tests.ValidateGenderByName">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.ValidateGenderByName@12d3a4e9]" test-instance-name="Kernel_ValidateGenderByName_smoke_Male" name="getTestCaseName" is-config="true" duration-ms="237" started-at="2019-06-29T14:28:11Z" finished-at="2019-06-29T14:28:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.ValidateGenderByName.validateGenderByName(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@710f4a91]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="validateGenderByName(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.ValidateGenderByName@12d3a4e9]" test-instance-name="Kernel_ValidateGenderByName_smoke_Male" name="Kernel_ValidateGenderByName_invalid_gendername" duration-ms="276" started-at="2019-06-29T14:28:12Z" data-provider="ValidateGenderByName" finished-at="2019-06-29T14:28:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_ValidateGenderByName_invalid_gendername]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_ValidateGenderByName_invalid_gendername -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.ValidateGenderByName@12d3a4e9]" test-instance-name="Kernel_ValidateGenderByName_smoke_Male" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:28:12Z" finished-at="2019-06-29T14:28:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_ValidateGenderByName_invalid_gendername status=SUCCESS method=ValidateGenderByName.validateGenderByName(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.ValidateGenderByName@12d3a4e9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.ValidateGenderByName@12d3a4e9]" test-instance-name="Kernel_ValidateGenderByName_smoke_Male" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:28:12Z" finished-at="2019-06-29T14:28:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.ValidateGenderByName.validateGenderByName(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@60e17c7d]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="validateGenderByName(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.ValidateGenderByName@12d3a4e9]" test-instance-name="Kernel_ValidateGenderByName_smoke_Male" name="Kernel_ValidateGenderByName_Name_Female" duration-ms="304" started-at="2019-06-29T14:28:12Z" data-provider="ValidateGenderByName" finished-at="2019-06-29T14:28:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_ValidateGenderByName_Name_Female]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_ValidateGenderByName_Name_Female -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.ValidateGenderByName@12d3a4e9]" test-instance-name="Kernel_ValidateGenderByName_smoke_Male" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:12Z" finished-at="2019-06-29T14:28:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_ValidateGenderByName_Name_Female status=SUCCESS method=ValidateGenderByName.validateGenderByName(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.ValidateGenderByName@12d3a4e9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.ValidateGenderByName@12d3a4e9]" test-instance-name="Kernel_ValidateGenderByName_smoke_Male" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:28:12Z" finished-at="2019-06-29T14:28:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.ValidateGenderByName.validateGenderByName(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5bdd5b86]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="validateGenderByName(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.ValidateGenderByName@12d3a4e9]" test-instance-name="Kernel_ValidateGenderByName_smoke_Male" name="Kernel_ValidateGenderByName_response_time" duration-ms="280" started-at="2019-06-29T14:28:12Z" data-provider="ValidateGenderByName" finished-at="2019-06-29T14:28:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_ValidateGenderByName_response_time]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_ValidateGenderByName_response_time -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.ValidateGenderByName@12d3a4e9]" test-instance-name="Kernel_ValidateGenderByName_smoke_Male" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:12Z" finished-at="2019-06-29T14:28:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_ValidateGenderByName_response_time status=SUCCESS method=ValidateGenderByName.validateGenderByName(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.ValidateGenderByName@12d3a4e9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.ValidateGenderByName@12d3a4e9]" test-instance-name="Kernel_ValidateGenderByName_smoke_Male" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:28:12Z" finished-at="2019-06-29T14:28:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.ValidateGenderByName.validateGenderByName(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2603ad0a]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="validateGenderByName(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.ValidateGenderByName@12d3a4e9]" test-instance-name="Kernel_ValidateGenderByName_smoke_Male" name="Kernel_ValidateGenderByName_smoke_Male" duration-ms="293" started-at="2019-06-29T14:28:12Z" data-provider="ValidateGenderByName" finished-at="2019-06-29T14:28:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_ValidateGenderByName_smoke_Male]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_ValidateGenderByName_smoke_Male -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.ValidateGenderByName@12d3a4e9]" test-instance-name="Kernel_ValidateGenderByName_smoke_Male" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:28:13Z" finished-at="2019-06-29T14:28:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_ValidateGenderByName_smoke_Male status=SUCCESS method=ValidateGenderByName.validateGenderByName(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.ValidateGenderByName@12d3a4e9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.ValidateGenderByName -->
      <class name="io.mosip.kernel.tests.GetDeviceHistory">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af]" test-instance-name="Kernel_GetDeviceHistory_smoke_1" name="getTestCaseName" is-config="true" duration-ms="300" started-at="2019-06-29T14:21:42Z" finished-at="2019-06-29T14:21:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetDeviceHistory.getDeviceHistory(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@4738db0f]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af]" test-instance-name="Kernel_GetDeviceHistory_smoke_1" name="Kernel_GetDeviceHistory_invalid_effdatetimes" duration-ms="320" started-at="2019-06-29T14:21:42Z" data-provider="GetDeviceHistory" finished-at="2019-06-29T14:21:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetDeviceHistory_invalid_effdatetimes]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetDeviceHistory_invalid_effdatetimes -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af]" test-instance-name="Kernel_GetDeviceHistory_smoke_1" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:43Z" finished-at="2019-06-29T14:21:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetDeviceHistory_invalid_effdatetimes status=SUCCESS method=GetDeviceHistory.getDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af]" test-instance-name="Kernel_GetDeviceHistory_smoke_1" name="getTestCaseName" is-config="true" duration-ms="4" started-at="2019-06-29T14:21:43Z" finished-at="2019-06-29T14:21:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetDeviceHistory.getDeviceHistory(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7e4b55e4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af]" test-instance-name="Kernel_GetDeviceHistory_smoke_1" name="Kernel_GetDeviceHistory_invalid_effdatetimes_format_2" duration-ms="298" started-at="2019-06-29T14:21:43Z" data-provider="GetDeviceHistory" finished-at="2019-06-29T14:21:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetDeviceHistory_invalid_effdatetimes_format_2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetDeviceHistory_invalid_effdatetimes_format_2 -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af]" test-instance-name="Kernel_GetDeviceHistory_smoke_1" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:43Z" finished-at="2019-06-29T14:21:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetDeviceHistory_invalid_effdatetimes_format_2 status=SUCCESS method=GetDeviceHistory.getDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af]" test-instance-name="Kernel_GetDeviceHistory_smoke_1" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:43Z" finished-at="2019-06-29T14:21:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetDeviceHistory.getDeviceHistory(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@324cc34d]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af]" test-instance-name="Kernel_GetDeviceHistory_smoke_1" name="Kernel_GetDeviceHistory_invalid_effdatetimes_format_3" duration-ms="374" started-at="2019-06-29T14:21:43Z" data-provider="GetDeviceHistory" finished-at="2019-06-29T14:21:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetDeviceHistory_invalid_effdatetimes_format_3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetDeviceHistory_invalid_effdatetimes_format_3 -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af]" test-instance-name="Kernel_GetDeviceHistory_smoke_1" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:21:43Z" finished-at="2019-06-29T14:21:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetDeviceHistory.getDeviceHistory(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@40ac1dcb]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af]" test-instance-name="Kernel_GetDeviceHistory_smoke_1" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:21:43Z" finished-at="2019-06-29T14:21:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetDeviceHistory_invalid_effdatetimes_format_3 status=SUCCESS method=GetDeviceHistory.getDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af]" test-instance-name="Kernel_GetDeviceHistory_smoke_1" name="Kernel_GetDeviceHistory_invalid_id" duration-ms="294" started-at="2019-06-29T14:21:43Z" data-provider="GetDeviceHistory" finished-at="2019-06-29T14:21:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetDeviceHistory_invalid_id]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetDeviceHistory_invalid_id -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af]" test-instance-name="Kernel_GetDeviceHistory_smoke_1" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:44Z" finished-at="2019-06-29T14:21:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetDeviceHistory_invalid_id status=SUCCESS method=GetDeviceHistory.getDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af]" test-instance-name="Kernel_GetDeviceHistory_smoke_1" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:21:44Z" finished-at="2019-06-29T14:21:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetDeviceHistory.getDeviceHistory(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@41cd4672]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af]" test-instance-name="Kernel_GetDeviceHistory_smoke_1" name="Kernel_GetDeviceHistory_invalid_langcode" duration-ms="281" started-at="2019-06-29T14:21:44Z" data-provider="GetDeviceHistory" finished-at="2019-06-29T14:21:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetDeviceHistory_invalid_langcode]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetDeviceHistory_invalid_langcode -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af]" test-instance-name="Kernel_GetDeviceHistory_smoke_1" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:21:44Z" finished-at="2019-06-29T14:21:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetDeviceHistory_invalid_langcode status=SUCCESS method=GetDeviceHistory.getDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af]" test-instance-name="Kernel_GetDeviceHistory_smoke_1" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:21:44Z" finished-at="2019-06-29T14:21:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetDeviceHistory.getDeviceHistory(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@650ddfda]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af]" test-instance-name="Kernel_GetDeviceHistory_smoke_1" name="Kernel_GetDeviceHistory_response_time" duration-ms="328" started-at="2019-06-29T14:21:44Z" data-provider="GetDeviceHistory" finished-at="2019-06-29T14:21:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetDeviceHistory_response_time]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetDeviceHistory_response_time -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af]" test-instance-name="Kernel_GetDeviceHistory_smoke_1" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:21:44Z" finished-at="2019-06-29T14:21:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetDeviceHistory_response_time status=SUCCESS method=GetDeviceHistory.getDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af]" test-instance-name="Kernel_GetDeviceHistory_smoke_1" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:44Z" finished-at="2019-06-29T14:21:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetDeviceHistory.getDeviceHistory(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@318f2e9d]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af]" test-instance-name="Kernel_GetDeviceHistory_smoke_1" name="Kernel_GetDeviceHistory_smoke_1" duration-ms="13917" started-at="2019-06-29T14:21:44Z" data-provider="GetDeviceHistory" finished-at="2019-06-29T14:21:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetDeviceHistory_smoke_1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetDeviceHistory_smoke_1 -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af]" test-instance-name="Kernel_GetDeviceHistory_smoke_1" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:21:58Z" finished-at="2019-06-29T14:21:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetDeviceHistory_smoke_1 status=SUCCESS method=GetDeviceHistory.getDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDeviceHistory@52e677af] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.GetDeviceHistory -->
      <class name="io.mosip.kernel.tests.GetApplicantType">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="getTestCaseName" is-config="true" duration-ms="12057" started-at="2019-06-29T14:21:20Z" finished-at="2019-06-29T14:21:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetApplicantType.getApplicantType(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6d6e2ad5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="Kernel_GetApplicantType_kernel_GetApplicantType_DOB_lessThanAYear" duration-ms="370" started-at="2019-06-29T14:21:32Z" data-provider="GetApplicantType" finished-at="2019-06-29T14:21:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetApplicantType_kernel_GetApplicantType_DOB_lessThanAYear]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetApplicantType_kernel_GetApplicantType_DOB_lessThanAYear -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:32Z" finished-at="2019-06-29T14:21:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetApplicantType_kernel_GetApplicantType_DOB_lessThanAYear status=SUCCESS method=GetApplicantType.getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:21:32Z" finished-at="2019-06-29T14:21:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetApplicantType.getApplicantType(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@304175d6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="Kernel_GetApplicantType_kernel_GetApplicantType_FLE_FR_ADL_False" duration-ms="317" started-at="2019-06-29T14:21:32Z" data-provider="GetApplicantType" finished-at="2019-06-29T14:21:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetApplicantType_kernel_GetApplicantType_FLE_FR_ADL_False]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetApplicantType_kernel_GetApplicantType_FLE_FR_ADL_False -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:21:33Z" finished-at="2019-06-29T14:21:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetApplicantType_kernel_GetApplicantType_FLE_FR_ADL_False status=SUCCESS method=GetApplicantType.getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:33Z" finished-at="2019-06-29T14:21:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetApplicantType.getApplicantType(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@628c2341]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="Kernel_GetApplicantType_kernel_GetApplicantType_FLE_FR_ADL_true" duration-ms="295" started-at="2019-06-29T14:21:33Z" data-provider="GetApplicantType" finished-at="2019-06-29T14:21:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetApplicantType_kernel_GetApplicantType_FLE_FR_ADL_true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetApplicantType_kernel_GetApplicantType_FLE_FR_ADL_true -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:33Z" finished-at="2019-06-29T14:21:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetApplicantType_kernel_GetApplicantType_FLE_FR_ADL_true status=SUCCESS method=GetApplicantType.getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="getTestCaseName" is-config="true" duration-ms="9" started-at="2019-06-29T14:21:33Z" finished-at="2019-06-29T14:21:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetApplicantType.getApplicantType(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@75a46b]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="Kernel_GetApplicantType_kernel_GetApplicantType_FLE_FR_CHL_False" duration-ms="3302" started-at="2019-06-29T14:21:33Z" data-provider="GetApplicantType" finished-at="2019-06-29T14:21:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetApplicantType_kernel_GetApplicantType_FLE_FR_CHL_False]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetApplicantType_kernel_GetApplicantType_FLE_FR_CHL_False -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:21:36Z" finished-at="2019-06-29T14:21:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetApplicantType_kernel_GetApplicantType_FLE_FR_CHL_False status=SUCCESS method=GetApplicantType.getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:21:36Z" finished-at="2019-06-29T14:21:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetApplicantType.getApplicantType(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1c511e32]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="Kernel_GetApplicantType_kernel_GetApplicantType_FLE_FR_CHL_True" duration-ms="301" started-at="2019-06-29T14:21:36Z" data-provider="GetApplicantType" finished-at="2019-06-29T14:21:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetApplicantType_kernel_GetApplicantType_FLE_FR_CHL_True]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetApplicantType_kernel_GetApplicantType_FLE_FR_CHL_True -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="getTestCaseName" is-config="true" duration-ms="4" started-at="2019-06-29T14:21:37Z" finished-at="2019-06-29T14:21:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetApplicantType.getApplicantType(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@278537ab]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:21:37Z" finished-at="2019-06-29T14:21:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetApplicantType_kernel_GetApplicantType_FLE_FR_CHL_True status=SUCCESS method=GetApplicantType.getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="Kernel_GetApplicantType_kernel_GetApplicantType_FLE_NFR_ADL_False" duration-ms="301" started-at="2019-06-29T14:21:37Z" data-provider="GetApplicantType" finished-at="2019-06-29T14:21:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetApplicantType_kernel_GetApplicantType_FLE_NFR_ADL_False]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetApplicantType_kernel_GetApplicantType_FLE_NFR_ADL_False -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:21:37Z" finished-at="2019-06-29T14:21:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetApplicantType_kernel_GetApplicantType_FLE_NFR_ADL_False status=SUCCESS method=GetApplicantType.getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="getTestCaseName" is-config="true" duration-ms="4" started-at="2019-06-29T14:21:37Z" finished-at="2019-06-29T14:21:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetApplicantType.getApplicantType(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@24908e31]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="Kernel_GetApplicantType_kernel_GetApplicantType_FLE_NFR_ADL_true" duration-ms="296" started-at="2019-06-29T14:21:37Z" data-provider="GetApplicantType" finished-at="2019-06-29T14:21:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetApplicantType_kernel_GetApplicantType_FLE_NFR_ADL_true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetApplicantType_kernel_GetApplicantType_FLE_NFR_ADL_true -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:37Z" finished-at="2019-06-29T14:21:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetApplicantType_kernel_GetApplicantType_FLE_NFR_ADL_true status=SUCCESS method=GetApplicantType.getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:37Z" finished-at="2019-06-29T14:21:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetApplicantType.getApplicantType(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@96b3034]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="Kernel_GetApplicantType_kernel_GetApplicantType_FLE_NFR_CHL_False" duration-ms="297" started-at="2019-06-29T14:21:37Z" data-provider="GetApplicantType" finished-at="2019-06-29T14:21:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetApplicantType_kernel_GetApplicantType_FLE_NFR_CHL_False]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetApplicantType_kernel_GetApplicantType_FLE_NFR_CHL_False -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:37Z" finished-at="2019-06-29T14:21:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetApplicantType_kernel_GetApplicantType_FLE_NFR_CHL_False status=SUCCESS method=GetApplicantType.getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:21:37Z" finished-at="2019-06-29T14:21:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetApplicantType.getApplicantType(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1d5f1fa5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="Kernel_GetApplicantType_kernel_GetApplicantType_FLE_NFR_CHL_true" duration-ms="317" started-at="2019-06-29T14:21:37Z" data-provider="GetApplicantType" finished-at="2019-06-29T14:21:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetApplicantType_kernel_GetApplicantType_FLE_NFR_CHL_true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetApplicantType_kernel_GetApplicantType_FLE_NFR_CHL_true -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:21:38Z" finished-at="2019-06-29T14:21:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetApplicantType.getApplicantType(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@13695bca]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:21:38Z" finished-at="2019-06-29T14:21:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetApplicantType_kernel_GetApplicantType_FLE_NFR_CHL_true status=SUCCESS method=GetApplicantType.getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="Kernel_GetApplicantType_kernel_GetApplicantType_Future_date_as_DOB" duration-ms="287" started-at="2019-06-29T14:21:38Z" data-provider="GetApplicantType" finished-at="2019-06-29T14:21:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetApplicantType_kernel_GetApplicantType_Future_date_as_DOB]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetApplicantType_kernel_GetApplicantType_Future_date_as_DOB -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:21:38Z" finished-at="2019-06-29T14:21:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetApplicantType_kernel_GetApplicantType_Future_date_as_DOB status=SUCCESS method=GetApplicantType.getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:38Z" finished-at="2019-06-29T14:21:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetApplicantType.getApplicantType(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@33a8ae90]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="Kernel_GetApplicantType_kernel_GetApplicantType_invalid_biometricAvailable" duration-ms="293" started-at="2019-06-29T14:21:38Z" data-provider="GetApplicantType" finished-at="2019-06-29T14:21:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetApplicantType_kernel_GetApplicantType_invalid_biometricAvailable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetApplicantType_kernel_GetApplicantType_invalid_biometricAvailable -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:21:38Z" finished-at="2019-06-29T14:21:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetApplicantType_kernel_GetApplicantType_invalid_biometricAvailable status=SUCCESS method=GetApplicantType.getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="getTestCaseName" is-config="true" duration-ms="4" started-at="2019-06-29T14:21:38Z" finished-at="2019-06-29T14:21:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetApplicantType.getApplicantType(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6312c241]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="Kernel_GetApplicantType_kernel_GetApplicantType_invalid_dateofbirth" duration-ms="307" started-at="2019-06-29T14:21:38Z" data-provider="GetApplicantType" finished-at="2019-06-29T14:21:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetApplicantType_kernel_GetApplicantType_invalid_dateofbirth]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetApplicantType_kernel_GetApplicantType_invalid_dateofbirth -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:39Z" finished-at="2019-06-29T14:21:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetApplicantType_kernel_GetApplicantType_invalid_dateofbirth status=SUCCESS method=GetApplicantType.getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:21:39Z" finished-at="2019-06-29T14:21:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetApplicantType.getApplicantType(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6d54bb1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="Kernel_GetApplicantType_kernel_GetApplicantType_invalid_genderCode" duration-ms="306" started-at="2019-06-29T14:21:39Z" data-provider="GetApplicantType" finished-at="2019-06-29T14:21:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetApplicantType_kernel_GetApplicantType_invalid_genderCode]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetApplicantType_kernel_GetApplicantType_invalid_genderCode -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:39Z" finished-at="2019-06-29T14:21:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetApplicantType_kernel_GetApplicantType_invalid_genderCode status=SUCCESS method=GetApplicantType.getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:21:39Z" finished-at="2019-06-29T14:21:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetApplicantType.getApplicantType(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5fbbe7aa]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="Kernel_GetApplicantType_kernel_GetApplicantType_invalid_individualTypeCode" duration-ms="307" started-at="2019-06-29T14:21:39Z" data-provider="GetApplicantType" finished-at="2019-06-29T14:21:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetApplicantType_kernel_GetApplicantType_invalid_individualTypeCode]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetApplicantType_kernel_GetApplicantType_invalid_individualTypeCode -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:39Z" finished-at="2019-06-29T14:21:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetApplicantType.getApplicantType(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@29911ee3]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:21:39Z" finished-at="2019-06-29T14:21:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetApplicantType_kernel_GetApplicantType_invalid_individualTypeCode status=SUCCESS method=GetApplicantType.getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="Kernel_GetApplicantType_kernel_GetApplicantType_MLE_FR_ADL_False" duration-ms="304" started-at="2019-06-29T14:21:39Z" data-provider="GetApplicantType" finished-at="2019-06-29T14:21:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetApplicantType_kernel_GetApplicantType_MLE_FR_ADL_False]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetApplicantType_kernel_GetApplicantType_MLE_FR_ADL_False -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:40Z" finished-at="2019-06-29T14:21:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetApplicantType.getApplicantType(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5ce4c15a]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:21:40Z" finished-at="2019-06-29T14:21:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetApplicantType_kernel_GetApplicantType_MLE_FR_ADL_False status=SUCCESS method=GetApplicantType.getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="Kernel_GetApplicantType_kernel_GetApplicantType_MLE_FR_ADL_True" duration-ms="305" started-at="2019-06-29T14:21:40Z" data-provider="GetApplicantType" finished-at="2019-06-29T14:21:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetApplicantType_kernel_GetApplicantType_MLE_FR_ADL_True]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetApplicantType_kernel_GetApplicantType_MLE_FR_ADL_True -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:40Z" finished-at="2019-06-29T14:21:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetApplicantType_kernel_GetApplicantType_MLE_FR_ADL_True status=SUCCESS method=GetApplicantType.getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:40Z" finished-at="2019-06-29T14:21:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetApplicantType.getApplicantType(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@704091b4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="Kernel_GetApplicantType_kernel_GetApplicantType_MLE_FR_CHL_False" duration-ms="277" started-at="2019-06-29T14:21:40Z" data-provider="GetApplicantType" finished-at="2019-06-29T14:21:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetApplicantType_kernel_GetApplicantType_MLE_FR_CHL_False]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetApplicantType_kernel_GetApplicantType_MLE_FR_CHL_False -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:21:40Z" finished-at="2019-06-29T14:21:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetApplicantType_kernel_GetApplicantType_MLE_FR_CHL_False status=SUCCESS method=GetApplicantType.getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:21:40Z" finished-at="2019-06-29T14:21:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetApplicantType.getApplicantType(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7046bea1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="Kernel_GetApplicantType_kernel_GetApplicantType_MLE_NFR_ADL_False" duration-ms="330" started-at="2019-06-29T14:21:40Z" data-provider="GetApplicantType" finished-at="2019-06-29T14:21:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetApplicantType_kernel_GetApplicantType_MLE_NFR_ADL_False]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetApplicantType_kernel_GetApplicantType_MLE_NFR_ADL_False -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:41Z" finished-at="2019-06-29T14:21:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetApplicantType.getApplicantType(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5101d04c]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:21:41Z" finished-at="2019-06-29T14:21:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetApplicantType_kernel_GetApplicantType_MLE_NFR_ADL_False status=SUCCESS method=GetApplicantType.getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="Kernel_GetApplicantType_kernel_GetApplicantType_MLE_NFR_ADL_True" duration-ms="285" started-at="2019-06-29T14:21:41Z" data-provider="GetApplicantType" finished-at="2019-06-29T14:21:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetApplicantType_kernel_GetApplicantType_MLE_NFR_ADL_True]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetApplicantType_kernel_GetApplicantType_MLE_NFR_ADL_True -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:21:41Z" finished-at="2019-06-29T14:21:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetApplicantType_kernel_GetApplicantType_MLE_NFR_ADL_True status=SUCCESS method=GetApplicantType.getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:21:41Z" finished-at="2019-06-29T14:21:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetApplicantType.getApplicantType(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2b152527]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="Kernel_GetApplicantType_kernel_GetApplicantType_MLE_NFR_CHL_False" duration-ms="311" started-at="2019-06-29T14:21:41Z" data-provider="GetApplicantType" finished-at="2019-06-29T14:21:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetApplicantType_kernel_GetApplicantType_MLE_NFR_CHL_False]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetApplicantType_kernel_GetApplicantType_MLE_NFR_CHL_False -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:21:41Z" finished-at="2019-06-29T14:21:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetApplicantType_kernel_GetApplicantType_MLE_NFR_CHL_False status=SUCCESS method=GetApplicantType.getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:41Z" finished-at="2019-06-29T14:21:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetApplicantType.getApplicantType(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5f2cccc0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="Kernel_GetApplicantType_kernel_GetApplicantType_MLE_NFR_CHL_True" duration-ms="295" started-at="2019-06-29T14:21:41Z" data-provider="GetApplicantType" finished-at="2019-06-29T14:21:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetApplicantType_kernel_GetApplicantType_MLE_NFR_CHL_True]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetApplicantType_kernel_GetApplicantType_MLE_NFR_CHL_True -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:41Z" finished-at="2019-06-29T14:21:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetApplicantType_kernel_GetApplicantType_MLE_NFR_CHL_True status=SUCCESS method=GetApplicantType.getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="getTestCaseName" is-config="true" duration-ms="5" started-at="2019-06-29T14:21:41Z" finished-at="2019-06-29T14:21:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetApplicantType.getApplicantType(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1adac232]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="Kernel_GetApplicantType_kernel_GetApplicantType_response_time" duration-ms="294" started-at="2019-06-29T14:21:41Z" data-provider="GetApplicantType" finished-at="2019-06-29T14:21:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetApplicantType_kernel_GetApplicantType_response_time]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetApplicantType_kernel_GetApplicantType_response_time -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:42Z" finished-at="2019-06-29T14:21:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetApplicantType.getApplicantType(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@4506f295]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:21:42Z" finished-at="2019-06-29T14:21:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetApplicantType_kernel_GetApplicantType_response_time status=SUCCESS method=GetApplicantType.getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" duration-ms="287" started-at="2019-06-29T14:21:42Z" data-provider="GetApplicantType" finished-at="2019-06-29T14:21:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetApplicantType_kernel_GetApplicantType_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetApplicantType_kernel_GetApplicantType_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152]" test-instance-name="Kernel_GetApplicantType_kernel_GetApplicantType_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:42Z" finished-at="2019-06-29T14:21:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetApplicantType_kernel_GetApplicantType_smoke status=SUCCESS method=GetApplicantType.getApplicantType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetApplicantType@534df152] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.GetApplicantType -->
      <class name="io.mosip.kernel.tests.GetListOfRoles">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetListOfRoles@2145433b]" test-instance-name="Kernel_GetListOfRoles_smoke" name="getTestCaseName" is-config="true" duration-ms="271" started-at="2019-06-29T14:22:43Z" finished-at="2019-06-29T14:22:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetListOfRoles.getListOfRoles(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7157b2d4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getListOfRoles(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetListOfRoles@2145433b]" test-instance-name="Kernel_GetListOfRoles_smoke" name="Kernel_GetListOfRoles_smoke" duration-ms="494" started-at="2019-06-29T14:22:44Z" data-provider="GetListOfRoles" finished-at="2019-06-29T14:22:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetListOfRoles_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetListOfRoles_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetListOfRoles@2145433b]" test-instance-name="Kernel_GetListOfRoles_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:44Z" finished-at="2019-06-29T14:22:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetListOfRoles_smoke status=SUCCESS method=GetListOfRoles.getListOfRoles(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetListOfRoles@2145433b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.GetListOfRoles -->
      <class name="io.mosip.kernel.tests.UploadPublickey">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba]" test-instance-name="kernel_UploadPublickey_invalid_publicKey_diff from previous" name="getTestCaseName" is-config="true" duration-ms="248" started-at="2019-06-29T14:26:34Z" finished-at="2019-06-29T14:26:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.UploadPublickey.uploadPublickey(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@711d66e0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="FAIL" signature="uploadPublickey(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba]" test-instance-name="kernel_UploadPublickey_invalid_publicKey_diff from previous" name="kernel_UploadPublickey_allValid_smoke" duration-ms="301" started-at="2019-06-29T14:26:35Z" data-provider="fetchData" finished-at="2019-06-29T14:26:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Response Data Mismatch Failure expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Response Data Mismatch Failure expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.service.AssertKernel.jsonComparison1(AssertKernel.java:178)
	at io.mosip.kernel.service.AssertKernel.assertKernel(AssertKernel.java:53)
	at io.mosip.kernel.tests.UploadPublickey.uploadPublickey(UploadPublickey.java:119)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_UploadPublickey_allValid_smoke -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba]" test-instance-name="kernel_UploadPublickey_invalid_publicKey_diff from previous" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:35Z" finished-at="2019-06-29T14:26:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.UploadPublickey.uploadPublickey(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6cf37a31]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba]" test-instance-name="kernel_UploadPublickey_invalid_publicKey_diff from previous" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:35Z" finished-at="2019-06-29T14:26:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_UploadPublickey_allValid_smoke status=FAILURE method=UploadPublickey.uploadPublickey(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="FAIL" signature="uploadPublickey(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba]" test-instance-name="kernel_UploadPublickey_invalid_publicKey_diff from previous" name="kernel_UploadPublickey_allValid_smoke_duplicate publicKey" duration-ms="287" started-at="2019-06-29T14:26:35Z" data-provider="fetchData" finished-at="2019-06-29T14:26:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke_duplicate publicKey]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Response Data Mismatch Failure expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Response Data Mismatch Failure expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.service.AssertKernel.jsonComparison1(AssertKernel.java:178)
	at io.mosip.kernel.service.AssertKernel.assertKernel(AssertKernel.java:53)
	at io.mosip.kernel.tests.UploadPublickey.uploadPublickey(UploadPublickey.java:119)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_UploadPublickey_allValid_smoke_duplicate publicKey -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba]" test-instance-name="kernel_UploadPublickey_invalid_publicKey_diff from previous" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:35Z" finished-at="2019-06-29T14:26:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_UploadPublickey_allValid_smoke_duplicate publicKey status=FAILURE method=UploadPublickey.uploadPublickey(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba]" test-instance-name="kernel_UploadPublickey_invalid_publicKey_diff from previous" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:26:35Z" finished-at="2019-06-29T14:26:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.UploadPublickey.uploadPublickey(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@41ef53a9]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="uploadPublickey(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba]" test-instance-name="kernel_UploadPublickey_invalid_publicKey_diff from previous" name="kernel_UploadPublickey_invalid_name blank" duration-ms="302" started-at="2019-06-29T14:26:35Z" data-provider="fetchData" finished-at="2019-06-29T14:26:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_name blank]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_UploadPublickey_invalid_name blank -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba]" test-instance-name="kernel_UploadPublickey_invalid_publicKey_diff from previous" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:35Z" finished-at="2019-06-29T14:26:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.UploadPublickey.uploadPublickey(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1c4493c6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba]" test-instance-name="kernel_UploadPublickey_invalid_publicKey_diff from previous" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:35Z" finished-at="2019-06-29T14:26:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_UploadPublickey_invalid_name blank status=SUCCESS method=UploadPublickey.uploadPublickey(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="uploadPublickey(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba]" test-instance-name="kernel_UploadPublickey_invalid_publicKey_diff from previous" name="kernel_UploadPublickey_invalid_name nonexisting in DB" duration-ms="296" started-at="2019-06-29T14:26:35Z" data-provider="fetchData" finished-at="2019-06-29T14:26:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_name nonexisting in DB]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_UploadPublickey_invalid_name nonexisting in DB -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba]" test-instance-name="kernel_UploadPublickey_invalid_publicKey_diff from previous" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:36Z" finished-at="2019-06-29T14:26:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_UploadPublickey_invalid_name nonexisting in DB status=SUCCESS method=UploadPublickey.uploadPublickey(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba]" test-instance-name="kernel_UploadPublickey_invalid_publicKey_diff from previous" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:26:36Z" finished-at="2019-06-29T14:26:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.UploadPublickey.uploadPublickey(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6f4ccc8]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="uploadPublickey(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba]" test-instance-name="kernel_UploadPublickey_invalid_publicKey_diff from previous" name="kernel_UploadPublickey_invalid_name null" duration-ms="303" started-at="2019-06-29T14:26:36Z" data-provider="fetchData" finished-at="2019-06-29T14:26:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_name null]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_UploadPublickey_invalid_name null -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba]" test-instance-name="kernel_UploadPublickey_invalid_publicKey_diff from previous" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:36Z" finished-at="2019-06-29T14:26:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_UploadPublickey_invalid_name null status=SUCCESS method=UploadPublickey.uploadPublickey(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba]" test-instance-name="kernel_UploadPublickey_invalid_publicKey_diff from previous" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:26:36Z" finished-at="2019-06-29T14:26:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.UploadPublickey.uploadPublickey(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@71211cd5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="uploadPublickey(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba]" test-instance-name="kernel_UploadPublickey_invalid_publicKey_diff from previous" name="kernel_UploadPublickey_invalid_publicKey blank" duration-ms="281" started-at="2019-06-29T14:26:36Z" data-provider="fetchData" finished-at="2019-06-29T14:26:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_publicKey blank]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_UploadPublickey_invalid_publicKey blank -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba]" test-instance-name="kernel_UploadPublickey_invalid_publicKey_diff from previous" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:36Z" finished-at="2019-06-29T14:26:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_UploadPublickey_invalid_publicKey blank status=SUCCESS method=UploadPublickey.uploadPublickey(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba]" test-instance-name="kernel_UploadPublickey_invalid_publicKey_diff from previous" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:26:36Z" finished-at="2019-06-29T14:26:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.UploadPublickey.uploadPublickey(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@4a686b43]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="uploadPublickey(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba]" test-instance-name="kernel_UploadPublickey_invalid_publicKey_diff from previous" name="kernel_UploadPublickey_invalid_publicKey null" duration-ms="279" started-at="2019-06-29T14:26:36Z" data-provider="fetchData" finished-at="2019-06-29T14:26:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_publicKey null]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_UploadPublickey_invalid_publicKey null -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba]" test-instance-name="kernel_UploadPublickey_invalid_publicKey_diff from previous" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:37Z" finished-at="2019-06-29T14:26:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_UploadPublickey_invalid_publicKey null status=SUCCESS method=UploadPublickey.uploadPublickey(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba]" test-instance-name="kernel_UploadPublickey_invalid_publicKey_diff from previous" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:26:37Z" finished-at="2019-06-29T14:26:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.UploadPublickey.uploadPublickey(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@720a0b6b]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="FAIL" signature="uploadPublickey(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba]" test-instance-name="kernel_UploadPublickey_invalid_publicKey_diff from previous" name="kernel_UploadPublickey_invalid_publicKey_diff from previous" duration-ms="472" started-at="2019-06-29T14:26:37Z" data-provider="fetchData" finished-at="2019-06-29T14:26:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_publicKey_diff from previous]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Response Data Mismatch Failure expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Response Data Mismatch Failure expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.service.AssertKernel.jsonComparison1(AssertKernel.java:178)
	at io.mosip.kernel.service.AssertKernel.assertKernel(AssertKernel.java:53)
	at io.mosip.kernel.tests.UploadPublickey.uploadPublickey(UploadPublickey.java:119)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_UploadPublickey_invalid_publicKey_diff from previous -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba]" test-instance-name="kernel_UploadPublickey_invalid_publicKey_diff from previous" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:37Z" finished-at="2019-06-29T14:26:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_UploadPublickey_invalid_publicKey_diff from previous status=FAILURE method=UploadPublickey.uploadPublickey(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UploadPublickey@25b485ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.UploadPublickey -->
      <class name="io.mosip.kernel.tests.FetchRegCent">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="getTestCaseName" is-config="true" duration-ms="12191" started-at="2019-06-29T14:19:06Z" finished-at="2019-06-29T14:19:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCent.fetchRegCent(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@21238ffe]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="kernel_FetchRegCent_allValid_smoke_get" duration-ms="315" started-at="2019-06-29T14:19:18Z" data-provider="fetchData" finished-at="2019-06-29T14:19:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke_get]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCent_allValid_smoke_get -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:19:18Z" finished-at="2019-06-29T14:19:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCent_allValid_smoke_get status=SUCCESS method=FetchRegCent.fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:19:18Z" finished-at="2019-06-29T14:19:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCent.fetchRegCent(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2f499565]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="kernel_FetchRegCent_allValid_smoke_with hierarchy and name" duration-ms="299" started-at="2019-06-29T14:19:18Z" data-provider="fetchData" finished-at="2019-06-29T14:19:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke_with hierarchy and name]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCent_allValid_smoke_with hierarchy and name -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:19:19Z" finished-at="2019-06-29T14:19:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCent_allValid_smoke_with hierarchy and name status=SUCCESS method=FetchRegCent.fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:19:19Z" finished-at="2019-06-29T14:19:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCent.fetchRegCent(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7a2256bb]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="kernel_FetchRegCent_allValid_smoke_with loc and lang" duration-ms="268" started-at="2019-06-29T14:19:19Z" data-provider="fetchData" finished-at="2019-06-29T14:19:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke_with loc and lang]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCent_allValid_smoke_with loc and lang -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:19:19Z" finished-at="2019-06-29T14:19:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCent_allValid_smoke_with loc and lang status=SUCCESS method=FetchRegCent.fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:19:19Z" finished-at="2019-06-29T14:19:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCent.fetchRegCent(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2ee18aca]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="kernel_FetchRegCent_allValid_smoke_with name list" duration-ms="315" started-at="2019-06-29T14:19:19Z" data-provider="fetchData" finished-at="2019-06-29T14:19:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke_with name list]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCent_allValid_smoke_with name list -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:19:19Z" finished-at="2019-06-29T14:19:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCent_allValid_smoke_with name list status=SUCCESS method=FetchRegCent.fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:19:19Z" finished-at="2019-06-29T14:19:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCent.fetchRegCent(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1300bc97]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="kernel_FetchRegCent_allValid_smoke_with proximity distance" duration-ms="323" started-at="2019-06-29T14:19:19Z" data-provider="fetchData" finished-at="2019-06-29T14:19:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke_with proximity distance]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCent_allValid_smoke_with proximity distance -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:19:20Z" finished-at="2019-06-29T14:19:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCent_allValid_smoke_with proximity distance status=SUCCESS method=FetchRegCent.fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="getTestCaseName" is-config="true" duration-ms="5" started-at="2019-06-29T14:19:20Z" finished-at="2019-06-29T14:19:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCent.fetchRegCent(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7001e12f]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="kernel_FetchRegCent_allValid_smoke_with_lang and id" duration-ms="309" started-at="2019-06-29T14:19:20Z" data-provider="fetchData" finished-at="2019-06-29T14:19:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke_with_lang and id]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCent_allValid_smoke_with_lang and id -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:19:20Z" finished-at="2019-06-29T14:19:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCent_allValid_smoke_with_lang and id status=SUCCESS method=FetchRegCent.fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:19:20Z" finished-at="2019-06-29T14:19:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCent.fetchRegCent(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@187ee61a]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="kernel_FetchRegCent_invalid_hierarchylevel_unexisting with nameList" duration-ms="298" started-at="2019-06-29T14:19:20Z" data-provider="fetchData" finished-at="2019-06-29T14:19:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_hierarchylevel_unexisting with nameList]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCent_invalid_hierarchylevel_unexisting with nameList -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:19:20Z" finished-at="2019-06-29T14:19:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCent_invalid_hierarchylevel_unexisting with nameList status=SUCCESS method=FetchRegCent.fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:19:20Z" finished-at="2019-06-29T14:19:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCent.fetchRegCent(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@3a6b8805]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="kernel_FetchRegCent_invalid_hierarchylevel_unexisting_with name" duration-ms="315" started-at="2019-06-29T14:19:20Z" data-provider="fetchData" finished-at="2019-06-29T14:19:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_hierarchylevel_unexisting_with name]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCent_invalid_hierarchylevel_unexisting_with name -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:19:21Z" finished-at="2019-06-29T14:19:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCent.fetchRegCent(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2c997fdb]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:19:21Z" finished-at="2019-06-29T14:19:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCent_invalid_hierarchylevel_unexisting_with name status=SUCCESS method=FetchRegCent.fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="kernel_FetchRegCent_invalid_id_unexisting" duration-ms="279" started-at="2019-06-29T14:19:21Z" data-provider="fetchData" finished-at="2019-06-29T14:19:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_id_unexisting]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCent_invalid_id_unexisting -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:19:21Z" finished-at="2019-06-29T14:19:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCent_invalid_id_unexisting status=SUCCESS method=FetchRegCent.fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:19:21Z" finished-at="2019-06-29T14:19:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCent.fetchRegCent(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@536efbfe]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="kernel_FetchRegCent_invalid_langcode_unexisting with name List" duration-ms="303" started-at="2019-06-29T14:19:21Z" data-provider="fetchData" finished-at="2019-06-29T14:19:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode_unexisting with name List]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCent_invalid_langcode_unexisting with name List -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:19:21Z" finished-at="2019-06-29T14:19:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCent.fetchRegCent(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@3ccf89bf]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:19:21Z" finished-at="2019-06-29T14:19:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCent_invalid_langcode_unexisting with name List status=SUCCESS method=FetchRegCent.fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="kernel_FetchRegCent_invalid_langcode_unexisting with proxDist" duration-ms="280" started-at="2019-06-29T14:19:21Z" data-provider="fetchData" finished-at="2019-06-29T14:19:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode_unexisting with proxDist]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCent_invalid_langcode_unexisting with proxDist -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:19:21Z" finished-at="2019-06-29T14:19:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCent_invalid_langcode_unexisting with proxDist status=SUCCESS method=FetchRegCent.fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:19:21Z" finished-at="2019-06-29T14:19:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCent.fetchRegCent(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5a021583]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="kernel_FetchRegCent_invalid_langcode_unexisting_with_id" duration-ms="293" started-at="2019-06-29T14:19:21Z" data-provider="fetchData" finished-at="2019-06-29T14:19:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode_unexisting_with_id]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCent_invalid_langcode_unexisting_with_id -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:19:22Z" finished-at="2019-06-29T14:19:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCent_invalid_langcode_unexisting_with_id status=SUCCESS method=FetchRegCent.fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:19:22Z" finished-at="2019-06-29T14:19:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCent.fetchRegCent(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@3d02debf]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="kernel_FetchRegCent_invalid_langcode_unexisting_with_locationCode" duration-ms="275" started-at="2019-06-29T14:19:22Z" data-provider="fetchData" finished-at="2019-06-29T14:19:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode_unexisting_with_locationCode]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCent_invalid_langcode_unexisting_with_locationCode -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:19:22Z" finished-at="2019-06-29T14:19:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCent_invalid_langcode_unexisting_with_locationCode status=SUCCESS method=FetchRegCent.fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:19:22Z" finished-at="2019-06-29T14:19:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCent.fetchRegCent(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@199763ea]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="kernel_FetchRegCent_invalid_langcode_with hierarchy and name" duration-ms="300" started-at="2019-06-29T14:19:22Z" data-provider="fetchData" finished-at="2019-06-29T14:19:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode_with hierarchy and name]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCent_invalid_langcode_with hierarchy and name -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:19:22Z" finished-at="2019-06-29T14:19:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCent.fetchRegCent(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@59d59316]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:19:22Z" finished-at="2019-06-29T14:19:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCent_invalid_langcode_with hierarchy and name status=SUCCESS method=FetchRegCent.fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="kernel_FetchRegCent_invalid_latitude_unexisting" duration-ms="291" started-at="2019-06-29T14:19:22Z" data-provider="fetchData" finished-at="2019-06-29T14:19:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_latitude_unexisting]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCent_invalid_latitude_unexisting -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:19:23Z" finished-at="2019-06-29T14:19:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCent_invalid_latitude_unexisting status=SUCCESS method=FetchRegCent.fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="getTestCaseName" is-config="true" duration-ms="4" started-at="2019-06-29T14:19:23Z" finished-at="2019-06-29T14:19:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCent.fetchRegCent(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@13312ba2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="kernel_FetchRegCent_invalid_locationcode_unexisting" duration-ms="284" started-at="2019-06-29T14:19:23Z" data-provider="fetchData" finished-at="2019-06-29T14:19:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_locationcode_unexisting]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCent_invalid_locationcode_unexisting -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:19:23Z" finished-at="2019-06-29T14:19:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCent_invalid_locationcode_unexisting status=SUCCESS method=FetchRegCent.fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:19:23Z" finished-at="2019-06-29T14:19:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCent.fetchRegCent(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@38ede85d]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="kernel_FetchRegCent_invalid_longitude_unexisting" duration-ms="298" started-at="2019-06-29T14:19:23Z" data-provider="fetchData" finished-at="2019-06-29T14:19:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_longitude_unexisting]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCent_invalid_longitude_unexisting -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:19:23Z" finished-at="2019-06-29T14:19:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCent_invalid_longitude_unexisting status=SUCCESS method=FetchRegCent.fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:19:23Z" finished-at="2019-06-29T14:19:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCent.fetchRegCent(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1ac74499]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="kernel_FetchRegCent_invalid_name_unexisting in location(location name)" duration-ms="286" started-at="2019-06-29T14:19:23Z" data-provider="fetchData" finished-at="2019-06-29T14:19:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_name_unexisting in location(location name)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCent_invalid_name_unexisting in location(location name) -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:19:23Z" finished-at="2019-06-29T14:19:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCent_invalid_name_unexisting in location(location name) status=SUCCESS method=FetchRegCent.fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:19:23Z" finished-at="2019-06-29T14:19:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCent.fetchRegCent(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6fff29f4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="kernel_FetchRegCent_invalid_name_with name List" duration-ms="285" started-at="2019-06-29T14:19:23Z" data-provider="fetchData" finished-at="2019-06-29T14:19:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_name_with name List]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCent_invalid_name_with name List -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:19:24Z" finished-at="2019-06-29T14:19:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCent_invalid_name_with name List status=SUCCESS method=FetchRegCent.fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:19:24Z" finished-at="2019-06-29T14:19:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCent.fetchRegCent(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@75897392]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="kernel_FetchRegCent_invalid_name_with name List 1 valid 1 invalid" duration-ms="291" started-at="2019-06-29T14:19:24Z" data-provider="fetchData" finished-at="2019-06-29T14:19:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_name_with name List 1 valid 1 invalid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCent_invalid_name_with name List 1 valid 1 invalid -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:19:24Z" finished-at="2019-06-29T14:19:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCent_invalid_name_with name List 1 valid 1 invalid status=SUCCESS method=FetchRegCent.fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:19:24Z" finished-at="2019-06-29T14:19:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCent.fetchRegCent(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@22f1d27e]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="kernel_FetchRegCent_invalid_proximitydistance_negative" duration-ms="300" started-at="2019-06-29T14:19:24Z" data-provider="fetchData" finished-at="2019-06-29T14:19:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_proximitydistance_negative]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCent_invalid_proximitydistance_negative -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8]" test-instance-name="kernel_FetchRegCent_invalid_proximitydistance_negative" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:19:24Z" finished-at="2019-06-29T14:19:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCent_invalid_proximitydistance_negative status=SUCCESS method=FetchRegCent.fetchRegCent(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCent@3bbc39f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.FetchRegCent -->
      <class name="io.mosip.kernel.tests.FetchRejectionReason">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRejectionReason@ca263c2]" test-instance-name="kernel_fetchRejectionReason_valid_smoke" name="getTestCaseName" is-config="true" duration-ms="256" started-at="2019-06-29T14:20:21Z" finished-at="2019-06-29T14:20:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRejectionReason.fetchRejectionReason(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2ca57834]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRejectionReason(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRejectionReason@ca263c2]" test-instance-name="kernel_fetchRejectionReason_valid_smoke" name="kernel_fetchRejectionReason_invalid_langcode" duration-ms="333" started-at="2019-06-29T14:20:21Z" data-provider="fetchData" finished-at="2019-06-29T14:20:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchRejectionReason_invalid_langcode -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRejectionReason@ca263c2]" test-instance-name="kernel_fetchRejectionReason_valid_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:20:22Z" finished-at="2019-06-29T14:20:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchRejectionReason_invalid_langcode status=SUCCESS method=FetchRejectionReason.fetchRejectionReason(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRejectionReason@ca263c2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRejectionReason@ca263c2]" test-instance-name="kernel_fetchRejectionReason_valid_smoke" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:20:22Z" finished-at="2019-06-29T14:20:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRejectionReason.fetchRejectionReason(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@14d21cb9]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRejectionReason(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRejectionReason@ca263c2]" test-instance-name="kernel_fetchRejectionReason_valid_smoke" name="kernel_fetchRejectionReason_invalid_langcode_empty" duration-ms="399" started-at="2019-06-29T14:20:22Z" data-provider="fetchData" finished-at="2019-06-29T14:20:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode_empty]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchRejectionReason_invalid_langcode_empty -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRejectionReason@ca263c2]" test-instance-name="kernel_fetchRejectionReason_valid_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:20:22Z" finished-at="2019-06-29T14:20:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchRejectionReason_invalid_langcode_empty status=SUCCESS method=FetchRejectionReason.fetchRejectionReason(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRejectionReason@ca263c2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRejectionReason@ca263c2]" test-instance-name="kernel_fetchRejectionReason_valid_smoke" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:20:22Z" finished-at="2019-06-29T14:20:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRejectionReason.fetchRejectionReason(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2c7c805f]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRejectionReason(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRejectionReason@ca263c2]" test-instance-name="kernel_fetchRejectionReason_valid_smoke" name="kernel_fetchRejectionReason_invalid_reasoncategorycode" duration-ms="285" started-at="2019-06-29T14:20:22Z" data-provider="fetchData" finished-at="2019-06-29T14:20:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_reasoncategorycode]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchRejectionReason_invalid_reasoncategorycode -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRejectionReason@ca263c2]" test-instance-name="kernel_fetchRejectionReason_valid_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:20:22Z" finished-at="2019-06-29T14:20:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchRejectionReason_invalid_reasoncategorycode status=SUCCESS method=FetchRejectionReason.fetchRejectionReason(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRejectionReason@ca263c2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRejectionReason@ca263c2]" test-instance-name="kernel_fetchRejectionReason_valid_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:20:22Z" finished-at="2019-06-29T14:20:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRejectionReason.fetchRejectionReason(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@79309b5c]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRejectionReason(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRejectionReason@ca263c2]" test-instance-name="kernel_fetchRejectionReason_valid_smoke" name="kernel_fetchRejectionReason_invalid_reasoncategorycode_empty" duration-ms="333" started-at="2019-06-29T14:20:22Z" data-provider="fetchData" finished-at="2019-06-29T14:20:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_reasoncategorycode_empty]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchRejectionReason_invalid_reasoncategorycode_empty -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRejectionReason@ca263c2]" test-instance-name="kernel_fetchRejectionReason_valid_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:20:23Z" finished-at="2019-06-29T14:20:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchRejectionReason_invalid_reasoncategorycode_empty status=SUCCESS method=FetchRejectionReason.fetchRejectionReason(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRejectionReason@ca263c2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRejectionReason@ca263c2]" test-instance-name="kernel_fetchRejectionReason_valid_smoke" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:20:23Z" finished-at="2019-06-29T14:20:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRejectionReason.fetchRejectionReason(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7e532896]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRejectionReason(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRejectionReason@ca263c2]" test-instance-name="kernel_fetchRejectionReason_valid_smoke" name="kernel_fetchRejectionReason_valid_smoke" duration-ms="306" started-at="2019-06-29T14:20:23Z" data-provider="fetchData" finished-at="2019-06-29T14:20:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[valid_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchRejectionReason_valid_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRejectionReason@ca263c2]" test-instance-name="kernel_fetchRejectionReason_valid_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:20:23Z" finished-at="2019-06-29T14:20:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchRejectionReason_valid_smoke status=SUCCESS method=FetchRejectionReason.fetchRejectionReason(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRejectionReason@ca263c2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.FetchRejectionReason -->
      <class name="io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="247" started-at="2019-06-29T14:26:41Z" finished-at="2019-06-29T14:26:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5722c149]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="FAIL" signature="syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndexRegCentId_allvalid_smoke_with_regcenterId and keyIndex" duration-ms="609" started-at="2019-06-29T14:26:41Z" data-provider="fetchData" finished-at="2019-06-29T14:26:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allvalid_smoke_with_regcenterId and keyIndex]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Response Data Mismatch Failure expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Response Data Mismatch Failure expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.service.AssertKernel.jsonComparison1(AssertKernel.java:178)
	at io.mosip.kernel.service.AssertKernel.assertKernel(AssertKernel.java:53)
	at io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(SyncMDataWithKeyIndexRegCentId.java:129)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndexRegCentId_allvalid_smoke_with_regcenterId and keyIndex -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:42Z" finished-at="2019-06-29T14:26:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndexRegCentId_allvalid_smoke_with_regcenterId and keyIndex status=FAILURE method=SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:42Z" finished-at="2019-06-29T14:26:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@58cb1f78]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="FAIL" signature="syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_keyIndex blank" duration-ms="275" started-at="2019-06-29T14:26:42Z" data-provider="fetchData" finished-at="2019-06-29T14:26:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_keyIndex blank]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.util.CommonLibrary.responseAuthValidation(CommonLibrary.java:160)
	at io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(SyncMDataWithKeyIndexRegCentId.java:116)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndexRegCentId_invalid_keyIndex blank -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:42Z" finished-at="2019-06-29T14:26:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@44e49229]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:42Z" finished-at="2019-06-29T14:26:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndexRegCentId_invalid_keyIndex blank status=FAILURE method=SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="FAIL" signature="syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_keyIndex nonexisting in DB" duration-ms="254" started-at="2019-06-29T14:26:42Z" data-provider="fetchData" finished-at="2019-06-29T14:26:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_keyIndex nonexisting in DB]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.util.CommonLibrary.responseAuthValidation(CommonLibrary.java:160)
	at io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(SyncMDataWithKeyIndexRegCentId.java:116)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndexRegCentId_invalid_keyIndex nonexisting in DB -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:42Z" finished-at="2019-06-29T14:26:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndexRegCentId_invalid_keyIndex nonexisting in DB status=FAILURE method=SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:42Z" finished-at="2019-06-29T14:26:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@3ad9012f]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="FAIL" signature="syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_keyIndex of diff machine" duration-ms="264" started-at="2019-06-29T14:26:42Z" data-provider="fetchData" finished-at="2019-06-29T14:26:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_keyIndex of diff machine]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.util.CommonLibrary.responseAuthValidation(CommonLibrary.java:160)
	at io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(SyncMDataWithKeyIndexRegCentId.java:116)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndexRegCentId_invalid_keyIndex of diff machine -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:43Z" finished-at="2019-06-29T14:26:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7bb0b7b4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:43Z" finished-at="2019-06-29T14:26:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndexRegCentId_invalid_keyIndex of diff machine status=FAILURE method=SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="FAIL" signature="syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_lastupdated_blank" duration-ms="261" started-at="2019-06-29T14:26:43Z" data-provider="fetchData" finished-at="2019-06-29T14:26:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_lastupdated_blank]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.util.CommonLibrary.responseAuthValidation(CommonLibrary.java:160)
	at io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(SyncMDataWithKeyIndexRegCentId.java:116)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndexRegCentId_invalid_lastupdated_blank -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:43Z" finished-at="2019-06-29T14:26:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndexRegCentId_invalid_lastupdated_blank status=FAILURE method=SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:43Z" finished-at="2019-06-29T14:26:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7b004765]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="FAIL" signature="syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_lastupdated_diff format" duration-ms="260" started-at="2019-06-29T14:26:43Z" data-provider="fetchData" finished-at="2019-06-29T14:26:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_lastupdated_diff format]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.util.CommonLibrary.responseAuthValidation(CommonLibrary.java:160)
	at io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(SyncMDataWithKeyIndexRegCentId.java:116)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndexRegCentId_invalid_lastupdated_diff format -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:43Z" finished-at="2019-06-29T14:26:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndexRegCentId_invalid_lastupdated_diff format status=FAILURE method=SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:43Z" finished-at="2019-06-29T14:26:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1b15e7f6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="FAIL" signature="syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_lastupdated_future date" duration-ms="256" started-at="2019-06-29T14:26:43Z" data-provider="fetchData" finished-at="2019-06-29T14:26:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_lastupdated_future date]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.util.CommonLibrary.responseAuthValidation(CommonLibrary.java:160)
	at io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(SyncMDataWithKeyIndexRegCentId.java:116)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndexRegCentId_invalid_lastupdated_future date -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:43Z" finished-at="2019-06-29T14:26:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndexRegCentId_invalid_lastupdated_future date status=FAILURE method=SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:26:43Z" finished-at="2019-06-29T14:26:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@69b74dc2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="FAIL" signature="syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_macaddress blank" duration-ms="3253" started-at="2019-06-29T14:26:43Z" data-provider="fetchData" finished-at="2019-06-29T14:26:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_macaddress blank]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.util.CommonLibrary.responseAuthValidation(CommonLibrary.java:160)
	at io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(SyncMDataWithKeyIndexRegCentId.java:116)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndexRegCentId_invalid_macaddress blank -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:47Z" finished-at="2019-06-29T14:26:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@17c45a57]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:47Z" finished-at="2019-06-29T14:26:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndexRegCentId_invalid_macaddress blank status=FAILURE method=SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="FAIL" signature="syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_macaddress nonexisting in DB" duration-ms="253" started-at="2019-06-29T14:26:47Z" data-provider="fetchData" finished-at="2019-06-29T14:26:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_macaddress nonexisting in DB]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.util.CommonLibrary.responseAuthValidation(CommonLibrary.java:160)
	at io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(SyncMDataWithKeyIndexRegCentId.java:116)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndexRegCentId_invalid_macaddress nonexisting in DB -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:47Z" finished-at="2019-06-29T14:26:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndexRegCentId_invalid_macaddress nonexisting in DB status=FAILURE method=SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:47Z" finished-at="2019-06-29T14:26:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6e860ca5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="FAIL" signature="syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_macaddress of diff machine" duration-ms="271" started-at="2019-06-29T14:26:47Z" data-provider="fetchData" finished-at="2019-06-29T14:26:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_macaddress of diff machine]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.util.CommonLibrary.responseAuthValidation(CommonLibrary.java:160)
	at io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(SyncMDataWithKeyIndexRegCentId.java:116)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndexRegCentId_invalid_macaddress of diff machine -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:47Z" finished-at="2019-06-29T14:26:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndexRegCentId_invalid_macaddress of diff machine status=FAILURE method=SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="FAIL" signature="syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_regcenterId mapped to diff machine" duration-ms="246" started-at="2019-06-29T14:26:47Z" data-provider="fetchData" finished-at="2019-06-29T14:26:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_regcenterId mapped to diff machine]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.util.CommonLibrary.responseAuthValidation(CommonLibrary.java:160)
	at io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(SyncMDataWithKeyIndexRegCentId.java:116)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndexRegCentId_invalid_regcenterId mapped to diff machine -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:47Z" finished-at="2019-06-29T14:26:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5a187cd4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:47Z" finished-at="2019-06-29T14:26:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndexRegCentId_invalid_regcenterId mapped to diff machine status=FAILURE method=SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:47Z" finished-at="2019-06-29T14:26:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@912e308]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="FAIL" signature="syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_regcenterId nonexisting in DB" duration-ms="262" started-at="2019-06-29T14:26:47Z" data-provider="fetchData" finished-at="2019-06-29T14:26:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_regcenterId nonexisting in DB]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.util.CommonLibrary.responseAuthValidation(CommonLibrary.java:160)
	at io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(SyncMDataWithKeyIndexRegCentId.java:116)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndexRegCentId_invalid_regcenterId nonexisting in DB -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:48Z" finished-at="2019-06-29T14:26:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndexRegCentId_invalid_regcenterId nonexisting in DB status=FAILURE method=SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:48Z" finished-at="2019-06-29T14:26:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@3c31169f]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="FAIL" signature="syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber blank" duration-ms="253" started-at="2019-06-29T14:26:48Z" data-provider="fetchData" finished-at="2019-06-29T14:26:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_serialnumber blank]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.util.CommonLibrary.responseAuthValidation(CommonLibrary.java:160)
	at io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(SyncMDataWithKeyIndexRegCentId.java:116)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber blank -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:48Z" finished-at="2019-06-29T14:26:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@628cd698]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:48Z" finished-at="2019-06-29T14:26:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber blank status=FAILURE method=SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="FAIL" signature="syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber nonexisting in DB" duration-ms="256" started-at="2019-06-29T14:26:48Z" data-provider="fetchData" finished-at="2019-06-29T14:26:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_serialnumber nonexisting in DB]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.util.CommonLibrary.responseAuthValidation(CommonLibrary.java:160)
	at io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(SyncMDataWithKeyIndexRegCentId.java:116)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber nonexisting in DB -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:48Z" finished-at="2019-06-29T14:26:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber nonexisting in DB status=FAILURE method=SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:48Z" finished-at="2019-06-29T14:26:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7b6bf8c1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="FAIL" signature="syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" duration-ms="248" started-at="2019-06-29T14:26:48Z" data-provider="fetchData" finished-at="2019-06-29T14:26:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_serialnumber of diff machine]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.util.CommonLibrary.responseAuthValidation(CommonLibrary.java:160)
	at io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(SyncMDataWithKeyIndexRegCentId.java:116)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f]" test-instance-name="kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:48Z" finished-at="2019-06-29T14:26:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndexRegCentId_invalid_serialnumber of diff machine status=FAILURE method=SyncMDataWithKeyIndexRegCentId.syncMDataWithKeyIndexRegCentId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId@5d740a0f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.SyncMDataWithKeyIndexRegCentId -->
      <class name="io.mosip.kernel.tests.OtpGenerate">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="getTestCaseName" is-config="true" duration-ms="255" started-at="2019-06-29T14:23:04Z" finished-at="2019-06-29T14:23:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.OtpGenerate.otpGenerate(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@51f779b2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="otpGenerate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="Kernel_otpGenerate_invalid_otp_length" duration-ms="317" started-at="2019-06-29T14:23:04Z" data-provider="otpGenerate" finished-at="2019-06-29T14:23:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_otpGenerate_invalid_otp_length]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_otpGenerate_invalid_otp_length -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:23:04Z" finished-at="2019-06-29T14:23:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_otpGenerate_invalid_otp_length status=SUCCESS method=OtpGenerate.otpGenerate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:23:04Z" finished-at="2019-06-29T14:23:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.OtpGenerate.otpGenerate(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@797cfaa1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="otpGenerate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="Kernel_otpGenerate_key_empty" duration-ms="310" started-at="2019-06-29T14:23:04Z" data-provider="otpGenerate" finished-at="2019-06-29T14:23:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_otpGenerate_key_empty]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_otpGenerate_key_empty -->
        <test-method status="PASS" signature="otpGenerate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="Kernel_otpGenerate_key_frozen" duration-ms="3860" started-at="2019-06-29T14:23:04Z" data-provider="otpGenerate" finished-at="2019-06-29T14:23:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_otpGenerate_key_frozen]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_otpGenerate_key_frozen -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:04Z" finished-at="2019-06-29T14:23:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.OtpGenerate.otpGenerate(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@e6f7638]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:04Z" finished-at="2019-06-29T14:23:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_otpGenerate_key_empty status=SUCCESS method=OtpGenerate.otpGenerate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:23:08Z" finished-at="2019-06-29T14:23:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_otpGenerate_key_frozen status=SUCCESS method=OtpGenerate.otpGenerate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="otpGenerate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="Kernel_otpGenerate_key_length_2" duration-ms="317" started-at="2019-06-29T14:23:08Z" data-provider="otpGenerate" finished-at="2019-06-29T14:23:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_otpGenerate_key_length_2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_otpGenerate_key_length_2 -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:08Z" finished-at="2019-06-29T14:23:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.OtpGenerate.otpGenerate(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@38e26e29]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:23:09Z" finished-at="2019-06-29T14:23:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_otpGenerate_key_length_2 status=SUCCESS method=OtpGenerate.otpGenerate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:23:09Z" finished-at="2019-06-29T14:23:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.OtpGenerate.otpGenerate(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@52b2aa6e]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="otpGenerate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="Kernel_otpGenerate_key_length_3" duration-ms="323" started-at="2019-06-29T14:23:09Z" data-provider="otpGenerate" finished-at="2019-06-29T14:23:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_otpGenerate_key_length_3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_otpGenerate_key_length_3 -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:23:09Z" finished-at="2019-06-29T14:23:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.OtpGenerate.otpGenerate(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@4c85eb6b]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:09Z" finished-at="2019-06-29T14:23:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_otpGenerate_key_length_3 status=SUCCESS method=OtpGenerate.otpGenerate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="otpGenerate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="Kernel_otpGenerate_key_length_64" duration-ms="291" started-at="2019-06-29T14:23:09Z" data-provider="otpGenerate" finished-at="2019-06-29T14:23:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_otpGenerate_key_length_64]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_otpGenerate_key_length_64 -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:23:09Z" finished-at="2019-06-29T14:23:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.OtpGenerate.otpGenerate(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@39ae8a75]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:09Z" finished-at="2019-06-29T14:23:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_otpGenerate_key_length_64 status=SUCCESS method=OtpGenerate.otpGenerate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="otpGenerate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="Kernel_otpGenerate_key_length_65" duration-ms="311" started-at="2019-06-29T14:23:09Z" data-provider="otpGenerate" finished-at="2019-06-29T14:23:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_otpGenerate_key_length_65]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_otpGenerate_key_length_65 -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:23:10Z" finished-at="2019-06-29T14:23:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_otpGenerate_key_length_65 status=SUCCESS method=OtpGenerate.otpGenerate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:23:10Z" finished-at="2019-06-29T14:23:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.OtpGenerate.otpGenerate(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1296284f]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="otpGenerate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="Kernel_otpGenerate_key_regenrate_otp" duration-ms="309" started-at="2019-06-29T14:23:10Z" data-provider="otpGenerate" finished-at="2019-06-29T14:23:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_otpGenerate_key_regenrate_otp]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_otpGenerate_key_regenrate_otp -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:10Z" finished-at="2019-06-29T14:23:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_otpGenerate_key_regenrate_otp status=SUCCESS method=OtpGenerate.otpGenerate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:23:10Z" finished-at="2019-06-29T14:23:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.OtpGenerate.otpGenerate(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@553011a9]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="otpGenerate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="Kernel_otpGenerate_response_time" duration-ms="283" started-at="2019-06-29T14:23:10Z" data-provider="otpGenerate" finished-at="2019-06-29T14:23:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_otpGenerate_response_time]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_otpGenerate_response_time -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:10Z" finished-at="2019-06-29T14:23:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.OtpGenerate.otpGenerate(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@368d76d7]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:10Z" finished-at="2019-06-29T14:23:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_otpGenerate_response_time status=SUCCESS method=OtpGenerate.otpGenerate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="otpGenerate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="Kernel_otpGenerate_smoke" duration-ms="295" started-at="2019-06-29T14:23:10Z" data-provider="otpGenerate" finished-at="2019-06-29T14:23:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_otpGenerate_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_otpGenerate_smoke -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:23:10Z" finished-at="2019-06-29T14:23:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.OtpGenerate.otpGenerate(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7bbdaf51]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:10Z" finished-at="2019-06-29T14:23:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_otpGenerate_smoke status=SUCCESS method=OtpGenerate.otpGenerate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="otpGenerate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="Kernel_otpGenerate_used_otp" duration-ms="302" started-at="2019-06-29T14:23:10Z" data-provider="otpGenerate" finished-at="2019-06-29T14:23:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_otpGenerate_used_otp]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_otpGenerate_used_otp -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134]" test-instance-name="Kernel_otpGenerate_used_otp" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:11Z" finished-at="2019-06-29T14:23:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_otpGenerate_used_otp status=SUCCESS method=OtpGenerate.otpGenerate(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OtpGenerate@123f1134] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.OtpGenerate -->
      <class name="io.mosip.kernel.tests.FetchRegcentMachUserMaping">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegcentMachUserMaping@568bf312]" test-instance-name="kernel_FetchRegcentMachUserMaping_invalid_userid_existing" name="getTestCaseName" is-config="true" duration-ms="258" started-at="2019-06-29T14:20:06Z" finished-at="2019-06-29T14:20:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegcentMachUserMaping.fetchRegcentMachUserMaping(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6884cfca]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegcentMachUserMaping(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegcentMachUserMaping@568bf312]" test-instance-name="kernel_FetchRegcentMachUserMaping_invalid_userid_existing" name="kernel_FetchRegcentMachUserMaping_allValid_smoke" duration-ms="13735" started-at="2019-06-29T14:20:06Z" data-provider="fetchData" finished-at="2019-06-29T14:20:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegcentMachUserMaping_allValid_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegcentMachUserMaping@568bf312]" test-instance-name="kernel_FetchRegcentMachUserMaping_invalid_userid_existing" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:20:20Z" finished-at="2019-06-29T14:20:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegcentMachUserMaping_allValid_smoke status=SUCCESS method=FetchRegcentMachUserMaping.fetchRegcentMachUserMaping(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegcentMachUserMaping@568bf312] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegcentMachUserMaping@568bf312]" test-instance-name="kernel_FetchRegcentMachUserMaping_invalid_userid_existing" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:20:20Z" finished-at="2019-06-29T14:20:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegcentMachUserMaping.fetchRegcentMachUserMaping(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1d6ddb48]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegcentMachUserMaping(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegcentMachUserMaping@568bf312]" test-instance-name="kernel_FetchRegcentMachUserMaping_invalid_userid_existing" name="kernel_FetchRegcentMachUserMaping_invalid_effdtimes_before existing time" duration-ms="281" started-at="2019-06-29T14:20:20Z" data-provider="fetchData" finished-at="2019-06-29T14:20:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_effdtimes_before existing time]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegcentMachUserMaping_invalid_effdtimes_before existing time -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegcentMachUserMaping@568bf312]" test-instance-name="kernel_FetchRegcentMachUserMaping_invalid_userid_existing" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:20:20Z" finished-at="2019-06-29T14:20:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegcentMachUserMaping_invalid_effdtimes_before existing time status=SUCCESS method=FetchRegcentMachUserMaping.fetchRegcentMachUserMaping(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegcentMachUserMaping@568bf312] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegcentMachUserMaping@568bf312]" test-instance-name="kernel_FetchRegcentMachUserMaping_invalid_userid_existing" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:20:20Z" finished-at="2019-06-29T14:20:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegcentMachUserMaping.fetchRegcentMachUserMaping(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@687a16b7]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegcentMachUserMaping(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegcentMachUserMaping@568bf312]" test-instance-name="kernel_FetchRegcentMachUserMaping_invalid_userid_existing" name="kernel_FetchRegcentMachUserMaping_invalid_machineid_unexisting" duration-ms="282" started-at="2019-06-29T14:20:20Z" data-provider="fetchData" finished-at="2019-06-29T14:20:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_machineid_unexisting]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegcentMachUserMaping_invalid_machineid_unexisting -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegcentMachUserMaping@568bf312]" test-instance-name="kernel_FetchRegcentMachUserMaping_invalid_userid_existing" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:20:20Z" finished-at="2019-06-29T14:20:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegcentMachUserMaping.fetchRegcentMachUserMaping(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@11553864]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegcentMachUserMaping@568bf312]" test-instance-name="kernel_FetchRegcentMachUserMaping_invalid_userid_existing" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:20:20Z" finished-at="2019-06-29T14:20:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegcentMachUserMaping_invalid_machineid_unexisting status=SUCCESS method=FetchRegcentMachUserMaping.fetchRegcentMachUserMaping(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegcentMachUserMaping@568bf312] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="fetchRegcentMachUserMaping(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegcentMachUserMaping@568bf312]" test-instance-name="kernel_FetchRegcentMachUserMaping_invalid_userid_existing" name="kernel_FetchRegcentMachUserMaping_invalid_registrationcenterid_unexisting" duration-ms="359" started-at="2019-06-29T14:20:20Z" data-provider="fetchData" finished-at="2019-06-29T14:20:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_registrationcenterid_unexisting]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegcentMachUserMaping_invalid_registrationcenterid_unexisting -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegcentMachUserMaping@568bf312]" test-instance-name="kernel_FetchRegcentMachUserMaping_invalid_userid_existing" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:20:21Z" finished-at="2019-06-29T14:20:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegcentMachUserMaping_invalid_registrationcenterid_unexisting status=SUCCESS method=FetchRegcentMachUserMaping.fetchRegcentMachUserMaping(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegcentMachUserMaping@568bf312] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegcentMachUserMaping@568bf312]" test-instance-name="kernel_FetchRegcentMachUserMaping_invalid_userid_existing" name="getTestCaseName" is-config="true" duration-ms="5" started-at="2019-06-29T14:20:21Z" finished-at="2019-06-29T14:20:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegcentMachUserMaping.fetchRegcentMachUserMaping(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5fe14f1b]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegcentMachUserMaping(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegcentMachUserMaping@568bf312]" test-instance-name="kernel_FetchRegcentMachUserMaping_invalid_userid_existing" name="kernel_FetchRegcentMachUserMaping_invalid_userid_existing" duration-ms="330" started-at="2019-06-29T14:20:21Z" data-provider="fetchData" finished-at="2019-06-29T14:20:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_userid_existing]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegcentMachUserMaping_invalid_userid_existing -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegcentMachUserMaping@568bf312]" test-instance-name="kernel_FetchRegcentMachUserMaping_invalid_userid_existing" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:20:21Z" finished-at="2019-06-29T14:20:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegcentMachUserMaping_invalid_userid_existing status=SUCCESS method=FetchRegcentMachUserMaping.fetchRegcentMachUserMaping(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegcentMachUserMaping@568bf312] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.FetchRegcentMachUserMaping -->
      <class name="io.mosip.kernel.tests.EmailNotification">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.EmailNotification@667a738]" test-instance-name="kernel_EmailNotification_valid_smoke_withoutmailCc" name="getTestCaseName" is-config="true" duration-ms="257" started-at="2019-06-29T14:14:27Z" finished-at="2019-06-29T14:14:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.EmailNotification.eamilNotification(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@9a7c39d]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="eamilNotification(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EmailNotification@667a738]" test-instance-name="kernel_EmailNotification_valid_smoke_withoutmailCc" name="kernel_EmailNotification_invalid_mailContent_empty" duration-ms="697" started-at="2019-06-29T14:14:27Z" data-provider="fetchData" finished-at="2019-06-29T14:14:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_mailContent_empty]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_EmailNotification_invalid_mailContent_empty -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.EmailNotification@667a738]" test-instance-name="kernel_EmailNotification_valid_smoke_withoutmailCc" name="setResultTestName" is-config="true" duration-ms="2" started-at="2019-06-29T14:14:28Z" finished-at="2019-06-29T14:14:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_EmailNotification_invalid_mailContent_empty status=SUCCESS method=EmailNotification.eamilNotification(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EmailNotification@667a738] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.EmailNotification@667a738]" test-instance-name="kernel_EmailNotification_valid_smoke_withoutmailCc" name="getTestCaseName" is-config="true" duration-ms="12" started-at="2019-06-29T14:14:28Z" finished-at="2019-06-29T14:14:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.EmailNotification.eamilNotification(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6cf737db]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="eamilNotification(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EmailNotification@667a738]" test-instance-name="kernel_EmailNotification_valid_smoke_withoutmailCc" name="kernel_EmailNotification_invalid_mailSubject_empty" duration-ms="563" started-at="2019-06-29T14:14:28Z" data-provider="fetchData" finished-at="2019-06-29T14:14:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_mailSubject_empty]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_EmailNotification_invalid_mailSubject_empty -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.EmailNotification@667a738]" test-instance-name="kernel_EmailNotification_valid_smoke_withoutmailCc" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:29Z" finished-at="2019-06-29T14:14:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_EmailNotification_invalid_mailSubject_empty status=SUCCESS method=EmailNotification.eamilNotification(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EmailNotification@667a738] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.EmailNotification@667a738]" test-instance-name="kernel_EmailNotification_valid_smoke_withoutmailCc" name="getTestCaseName" is-config="true" duration-ms="5" started-at="2019-06-29T14:14:29Z" finished-at="2019-06-29T14:14:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.EmailNotification.eamilNotification(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6a00b08c]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="eamilNotification(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EmailNotification@667a738]" test-instance-name="kernel_EmailNotification_valid_smoke_withoutmailCc" name="kernel_EmailNotification_invalid_mailTo_empty" duration-ms="564" started-at="2019-06-29T14:14:29Z" data-provider="fetchData" finished-at="2019-06-29T14:14:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_mailTo_empty]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_EmailNotification_invalid_mailTo_empty -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.EmailNotification@667a738]" test-instance-name="kernel_EmailNotification_valid_smoke_withoutmailCc" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:29Z" finished-at="2019-06-29T14:14:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_EmailNotification_invalid_mailTo_empty status=SUCCESS method=EmailNotification.eamilNotification(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EmailNotification@667a738] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.EmailNotification@667a738]" test-instance-name="kernel_EmailNotification_valid_smoke_withoutmailCc" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:14:29Z" finished-at="2019-06-29T14:14:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.EmailNotification.eamilNotification(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5c98b98]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="eamilNotification(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EmailNotification@667a738]" test-instance-name="kernel_EmailNotification_valid_smoke_withoutmailCc" name="kernel_EmailNotification_valid_smoke" duration-ms="568" started-at="2019-06-29T14:14:29Z" data-provider="fetchData" finished-at="2019-06-29T14:14:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[valid_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_EmailNotification_valid_smoke -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.EmailNotification@667a738]" test-instance-name="kernel_EmailNotification_valid_smoke_withoutmailCc" name="getTestCaseName" is-config="true" duration-ms="5" started-at="2019-06-29T14:14:30Z" finished-at="2019-06-29T14:14:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.EmailNotification.eamilNotification(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@32c50b97]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.EmailNotification@667a738]" test-instance-name="kernel_EmailNotification_valid_smoke_withoutmailCc" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:30Z" finished-at="2019-06-29T14:14:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_EmailNotification_valid_smoke status=SUCCESS method=EmailNotification.eamilNotification(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EmailNotification@667a738] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="eamilNotification(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EmailNotification@667a738]" test-instance-name="kernel_EmailNotification_valid_smoke_withoutmailCc" name="kernel_EmailNotification_valid_smoke_withoutAttachment" duration-ms="291" started-at="2019-06-29T14:14:30Z" data-provider="fetchData" finished-at="2019-06-29T14:14:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[valid_smoke_withoutAttachment]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_EmailNotification_valid_smoke_withoutAttachment -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.EmailNotification@667a738]" test-instance-name="kernel_EmailNotification_valid_smoke_withoutmailCc" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:30Z" finished-at="2019-06-29T14:14:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_EmailNotification_valid_smoke_withoutAttachment status=SUCCESS method=EmailNotification.eamilNotification(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EmailNotification@667a738] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.EmailNotification@667a738]" test-instance-name="kernel_EmailNotification_valid_smoke_withoutmailCc" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:14:30Z" finished-at="2019-06-29T14:14:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.EmailNotification.eamilNotification(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@67d9abfb]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="eamilNotification(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EmailNotification@667a738]" test-instance-name="kernel_EmailNotification_valid_smoke_withoutmailCc" name="kernel_EmailNotification_valid_smoke_withoutmailCc" duration-ms="562" started-at="2019-06-29T14:14:30Z" data-provider="fetchData" finished-at="2019-06-29T14:14:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[valid_smoke_withoutmailCc]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_EmailNotification_valid_smoke_withoutmailCc -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.EmailNotification@667a738]" test-instance-name="kernel_EmailNotification_valid_smoke_withoutmailCc" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:31Z" finished-at="2019-06-29T14:14:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_EmailNotification_valid_smoke_withoutmailCc status=SUCCESS method=EmailNotification.eamilNotification(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EmailNotification@667a738] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.EmailNotification -->
      <class name="io.mosip.kernel.tests.GetRIDByUserId">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetRIDByUserId@1b083826]" test-instance-name="kernel_GetRIDByUserIDAndAppID_userid_invalid" name="getTestCaseName" is-config="true" duration-ms="268" started-at="2019-06-29T14:22:56Z" finished-at="2019-06-29T14:22:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetRIDByUserId.getRIDByUserId(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@de1b4dd]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getRIDByUserId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRIDByUserId@1b083826]" test-instance-name="kernel_GetRIDByUserIDAndAppID_userid_invalid" name="kernel_GetRIDByUserIDAndAppID_appid_invalid" duration-ms="271" started-at="2019-06-29T14:22:57Z" data-provider="GetRIDByUserId" finished-at="2019-06-29T14:22:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[appid_invalid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_GetRIDByUserIDAndAppID_appid_invalid -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetRIDByUserId@1b083826]" test-instance-name="kernel_GetRIDByUserIDAndAppID_userid_invalid" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:57Z" finished-at="2019-06-29T14:22:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_GetRIDByUserIDAndAppID_appid_invalid status=SUCCESS method=GetRIDByUserId.getRIDByUserId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRIDByUserId@1b083826] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetRIDByUserId@1b083826]" test-instance-name="kernel_GetRIDByUserIDAndAppID_userid_invalid" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:57Z" finished-at="2019-06-29T14:22:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetRIDByUserId.getRIDByUserId(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7fa41484]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getRIDByUserId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRIDByUserId@1b083826]" test-instance-name="kernel_GetRIDByUserIDAndAppID_userid_invalid" name="kernel_GetRIDByUserIDAndAppID_smoke" duration-ms="216" started-at="2019-06-29T14:22:57Z" data-provider="GetRIDByUserId" finished-at="2019-06-29T14:22:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_GetRIDByUserIDAndAppID_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetRIDByUserId@1b083826]" test-instance-name="kernel_GetRIDByUserIDAndAppID_userid_invalid" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:57Z" finished-at="2019-06-29T14:22:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_GetRIDByUserIDAndAppID_smoke status=SUCCESS method=GetRIDByUserId.getRIDByUserId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRIDByUserId@1b083826] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetRIDByUserId@1b083826]" test-instance-name="kernel_GetRIDByUserIDAndAppID_userid_invalid" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:57Z" finished-at="2019-06-29T14:22:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetRIDByUserId.getRIDByUserId(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1e92420f]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getRIDByUserId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRIDByUserId@1b083826]" test-instance-name="kernel_GetRIDByUserIDAndAppID_userid_invalid" name="kernel_GetRIDByUserIDAndAppID_userid_invalid" duration-ms="231" started-at="2019-06-29T14:22:57Z" data-provider="GetRIDByUserId" finished-at="2019-06-29T14:22:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[userid_invalid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_GetRIDByUserIDAndAppID_userid_invalid -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetRIDByUserId@1b083826]" test-instance-name="kernel_GetRIDByUserIDAndAppID_userid_invalid" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:57Z" finished-at="2019-06-29T14:22:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_GetRIDByUserIDAndAppID_userid_invalid status=SUCCESS method=GetRIDByUserId.getRIDByUserId(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRIDByUserId@1b083826] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.GetRIDByUserId -->
      <class name="io.mosip.kernel.tests.SmsNotification">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SmsNotification@75c072cb]" test-instance-name="kernel_SmsNotification_valid_smoke" name="getTestCaseName" is-config="true" duration-ms="232" started-at="2019-06-29T14:26:29Z" finished-at="2019-06-29T14:26:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SmsNotification.validatingTestCases(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@3b812d71]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="validatingTestCases(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SmsNotification@75c072cb]" test-instance-name="kernel_SmsNotification_valid_smoke" name="kernel_SmsNotification_invalid_message_empty" duration-ms="286" started-at="2019-06-29T14:26:29Z" data-provider="FetchData" finished-at="2019-06-29T14:26:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_message_empty]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SmsNotification_invalid_message_empty -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SmsNotification@75c072cb]" test-instance-name="kernel_SmsNotification_valid_smoke" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:26:30Z" finished-at="2019-06-29T14:26:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SmsNotification.validatingTestCases(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6ed99ce0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SmsNotification@75c072cb]" test-instance-name="kernel_SmsNotification_valid_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:30Z" finished-at="2019-06-29T14:26:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SmsNotification_invalid_message_empty status=SUCCESS method=SmsNotification.validatingTestCases(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SmsNotification@75c072cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="validatingTestCases(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SmsNotification@75c072cb]" test-instance-name="kernel_SmsNotification_valid_smoke" name="kernel_SmsNotification_invalid_number" duration-ms="282" started-at="2019-06-29T14:26:30Z" data-provider="FetchData" finished-at="2019-06-29T14:26:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_number]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SmsNotification_invalid_number -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SmsNotification@75c072cb]" test-instance-name="kernel_SmsNotification_valid_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:30Z" finished-at="2019-06-29T14:26:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SmsNotification_invalid_number status=SUCCESS method=SmsNotification.validatingTestCases(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SmsNotification@75c072cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SmsNotification@75c072cb]" test-instance-name="kernel_SmsNotification_valid_smoke" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:26:30Z" finished-at="2019-06-29T14:26:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SmsNotification.validatingTestCases(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@463b7913]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="validatingTestCases(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SmsNotification@75c072cb]" test-instance-name="kernel_SmsNotification_valid_smoke" name="kernel_SmsNotification_valid_number_empty" duration-ms="289" started-at="2019-06-29T14:26:30Z" data-provider="FetchData" finished-at="2019-06-29T14:26:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[valid_number_empty]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SmsNotification_valid_number_empty -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SmsNotification@75c072cb]" test-instance-name="kernel_SmsNotification_valid_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:30Z" finished-at="2019-06-29T14:26:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SmsNotification_valid_number_empty status=SUCCESS method=SmsNotification.validatingTestCases(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SmsNotification@75c072cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SmsNotification@75c072cb]" test-instance-name="kernel_SmsNotification_valid_smoke" name="getTestCaseName" is-config="true" duration-ms="4" started-at="2019-06-29T14:26:30Z" finished-at="2019-06-29T14:26:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SmsNotification.validatingTestCases(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException,com.fasterxml.jackson.databind.JsonMappingException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@61598d13]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="validatingTestCases(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SmsNotification@75c072cb]" test-instance-name="kernel_SmsNotification_valid_smoke" name="kernel_SmsNotification_valid_smoke" duration-ms="449" started-at="2019-06-29T14:26:30Z" data-provider="FetchData" finished-at="2019-06-29T14:26:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[valid_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SmsNotification_valid_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SmsNotification@75c072cb]" test-instance-name="kernel_SmsNotification_valid_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:31Z" finished-at="2019-06-29T14:26:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SmsNotification_valid_smoke status=SUCCESS method=SmsNotification.validatingTestCases(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SmsNotification@75c072cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.SmsNotification -->
      <class name="io.mosip.kernel.tests.UINGeneration">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.UINGeneration@2893de87]" test-instance-name="Kernel_UINGeneration_smoke" name="getTestCaseName" is-config="true" duration-ms="231" started-at="2019-06-29T14:27:01Z" finished-at="2019-06-29T14:27:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.UINGeneration.getUIN(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2090d3d1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getUIN(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UINGeneration@2893de87]" test-instance-name="Kernel_UINGeneration_smoke" name="Kernel_UINGeneration_smoke" duration-ms="513" started-at="2019-06-29T14:27:01Z" data-provider="UINValidator" finished-at="2019-06-29T14:27:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_UINGeneration_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_UINGeneration_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.UINGeneration@2893de87]" test-instance-name="Kernel_UINGeneration_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:27:02Z" finished-at="2019-06-29T14:27:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_UINGeneration_smoke status=SUCCESS method=UINGeneration.getUIN(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.UINGeneration@2893de87] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.UINGeneration -->
      <class name="io.mosip.kernel.tests.FetchLocationHierarchy">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983]" test-instance-name="kernel_fetchLocationHierarchy_valid_smoke_withonlylangcode" name="getTestCaseName" is-config="true" duration-ms="263" started-at="2019-06-29T14:18:00Z" finished-at="2019-06-29T14:18:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchLocationHierarchy.fetchLocationHierarchy(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2622efb0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchLocationHierarchy(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983]" test-instance-name="kernel_fetchLocationHierarchy_valid_smoke_withonlylangcode" name="kernel_fetchLocationHierarchy_invalid_langcode_empty" duration-ms="292" started-at="2019-06-29T14:18:00Z" data-provider="fetchData" finished-at="2019-06-29T14:18:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode_empty]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchLocationHierarchy_invalid_langcode_empty -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983]" test-instance-name="kernel_fetchLocationHierarchy_valid_smoke_withonlylangcode" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:18:00Z" finished-at="2019-06-29T14:18:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchLocationHierarchy_invalid_langcode_empty status=SUCCESS method=FetchLocationHierarchy.fetchLocationHierarchy(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983]" test-instance-name="kernel_fetchLocationHierarchy_valid_smoke_withonlylangcode" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:18:00Z" finished-at="2019-06-29T14:18:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchLocationHierarchy.fetchLocationHierarchy(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2a830f73]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchLocationHierarchy(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983]" test-instance-name="kernel_fetchLocationHierarchy_valid_smoke_withonlylangcode" name="kernel_fetchLocationHierarchy_invalid_langcode_notpresent" duration-ms="289" started-at="2019-06-29T14:18:00Z" data-provider="fetchData" finished-at="2019-06-29T14:18:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode_notpresent]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchLocationHierarchy_invalid_langcode_notpresent -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983]" test-instance-name="kernel_fetchLocationHierarchy_valid_smoke_withonlylangcode" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:18:00Z" finished-at="2019-06-29T14:18:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchLocationHierarchy_invalid_langcode_notpresent status=SUCCESS method=FetchLocationHierarchy.fetchLocationHierarchy(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983]" test-instance-name="kernel_fetchLocationHierarchy_valid_smoke_withonlylangcode" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:18:00Z" finished-at="2019-06-29T14:18:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchLocationHierarchy.fetchLocationHierarchy(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7e798721]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchLocationHierarchy(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983]" test-instance-name="kernel_fetchLocationHierarchy_valid_smoke_withonlylangcode" name="kernel_fetchLocationHierarchy_invalid_langcode_withlangcodeOnly_notpresent" duration-ms="283" started-at="2019-06-29T14:18:00Z" data-provider="fetchData" finished-at="2019-06-29T14:18:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode_withlangcodeOnly_notpresent]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchLocationHierarchy_invalid_langcode_withlangcodeOnly_notpresent -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983]" test-instance-name="kernel_fetchLocationHierarchy_valid_smoke_withonlylangcode" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:18:01Z" finished-at="2019-06-29T14:18:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchLocationHierarchy_invalid_langcode_withlangcodeOnly_notpresent status=SUCCESS method=FetchLocationHierarchy.fetchLocationHierarchy(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983]" test-instance-name="kernel_fetchLocationHierarchy_valid_smoke_withonlylangcode" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:18:01Z" finished-at="2019-06-29T14:18:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchLocationHierarchy.fetchLocationHierarchy(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@4b8f60fe]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchLocationHierarchy(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983]" test-instance-name="kernel_fetchLocationHierarchy_valid_smoke_withonlylangcode" name="kernel_fetchLocationHierarchy_invalid_locationcode_notpresent" duration-ms="319" started-at="2019-06-29T14:18:01Z" data-provider="fetchData" finished-at="2019-06-29T14:18:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_locationcode_notpresent]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchLocationHierarchy_invalid_locationcode_notpresent -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983]" test-instance-name="kernel_fetchLocationHierarchy_valid_smoke_withonlylangcode" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:18:01Z" finished-at="2019-06-29T14:18:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchLocationHierarchy_invalid_locationcode_notpresent status=SUCCESS method=FetchLocationHierarchy.fetchLocationHierarchy(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983]" test-instance-name="kernel_fetchLocationHierarchy_valid_smoke_withonlylangcode" name="getTestCaseName" is-config="true" duration-ms="6" started-at="2019-06-29T14:18:01Z" finished-at="2019-06-29T14:18:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchLocationHierarchy.fetchLocationHierarchy(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7a615950]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchLocationHierarchy(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983]" test-instance-name="kernel_fetchLocationHierarchy_valid_smoke_withonlylangcode" name="kernel_fetchLocationHierarchy_valid_smoke" duration-ms="300" started-at="2019-06-29T14:18:01Z" data-provider="fetchData" finished-at="2019-06-29T14:18:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[valid_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchLocationHierarchy_valid_smoke -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983]" test-instance-name="kernel_fetchLocationHierarchy_valid_smoke_withonlylangcode" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:18:01Z" finished-at="2019-06-29T14:18:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchLocationHierarchy.fetchLocationHierarchy(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@48ab29f8]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983]" test-instance-name="kernel_fetchLocationHierarchy_valid_smoke_withonlylangcode" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:18:01Z" finished-at="2019-06-29T14:18:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchLocationHierarchy_valid_smoke status=SUCCESS method=FetchLocationHierarchy.fetchLocationHierarchy(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="fetchLocationHierarchy(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983]" test-instance-name="kernel_fetchLocationHierarchy_valid_smoke_withonlylangcode" name="kernel_fetchLocationHierarchy_valid_smoke_locationHierarchy" duration-ms="298" started-at="2019-06-29T14:18:01Z" data-provider="fetchData" finished-at="2019-06-29T14:18:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[valid_smoke_locationHierarchy]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchLocationHierarchy_valid_smoke_locationHierarchy -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983]" test-instance-name="kernel_fetchLocationHierarchy_valid_smoke_withonlylangcode" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:18:02Z" finished-at="2019-06-29T14:18:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchLocationHierarchy.fetchLocationHierarchy(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7ad9ff43]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983]" test-instance-name="kernel_fetchLocationHierarchy_valid_smoke_withonlylangcode" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:18:02Z" finished-at="2019-06-29T14:18:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchLocationHierarchy_valid_smoke_locationHierarchy status=SUCCESS method=FetchLocationHierarchy.fetchLocationHierarchy(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="fetchLocationHierarchy(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983]" test-instance-name="kernel_fetchLocationHierarchy_valid_smoke_withonlylangcode" name="kernel_fetchLocationHierarchy_valid_smoke_withonlylangcode" duration-ms="302" started-at="2019-06-29T14:18:02Z" data-provider="fetchData" finished-at="2019-06-29T14:18:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[valid_smoke_withonlylangcode]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchLocationHierarchy_valid_smoke_withonlylangcode -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983]" test-instance-name="kernel_fetchLocationHierarchy_valid_smoke_withonlylangcode" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:18:02Z" finished-at="2019-06-29T14:18:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchLocationHierarchy_valid_smoke_withonlylangcode status=SUCCESS method=FetchLocationHierarchy.fetchLocationHierarchy(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchLocationHierarchy@67e2d983] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.FetchLocationHierarchy -->
      <class name="io.mosip.kernel.tests.CentetMachineUserMappingToMasterData">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="getTestCaseName" is-config="true" duration-ms="243" started-at="2019-06-29T14:14:22Z" finished-at="2019-06-29T14:14:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@147c3a88]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="kernel_CentetMachineUserMappingToMasterData_centerId_length_11" duration-ms="305" started-at="2019-06-29T14:14:22Z" data-provider="CentetMachineUserMappingToMasterData" finished-at="2019-06-29T14:14:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[kernel_CentetMachineUserMappingToMasterData_centerId_length_11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_CentetMachineUserMappingToMasterData_centerId_length_11 -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:23Z" finished-at="2019-06-29T14:14:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_CentetMachineUserMappingToMasterData_centerId_length_11 status=SUCCESS method=CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="getTestCaseName" is-config="true" duration-ms="5" started-at="2019-06-29T14:14:23Z" finished-at="2019-06-29T14:14:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@47c8ced]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="kernel_CentetMachineUserMappingToMasterData_empty_IsActive" duration-ms="298" started-at="2019-06-29T14:14:23Z" data-provider="CentetMachineUserMappingToMasterData" finished-at="2019-06-29T14:14:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[kernel_CentetMachineUserMappingToMasterData_empty_IsActive]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_CentetMachineUserMappingToMasterData_empty_IsActive -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:23Z" finished-at="2019-06-29T14:14:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_CentetMachineUserMappingToMasterData_empty_IsActive status=SUCCESS method=CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="getTestCaseName" is-config="true" duration-ms="5" started-at="2019-06-29T14:14:23Z" finished-at="2019-06-29T14:14:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@38a64fbd]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="kernel_CentetMachineUserMappingToMasterData_empty_MachineId" duration-ms="315" started-at="2019-06-29T14:14:23Z" data-provider="CentetMachineUserMappingToMasterData" finished-at="2019-06-29T14:14:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[kernel_CentetMachineUserMappingToMasterData_empty_MachineId]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_CentetMachineUserMappingToMasterData_empty_MachineId -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:23Z" finished-at="2019-06-29T14:14:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_CentetMachineUserMappingToMasterData_empty_MachineId status=SUCCESS method=CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:14:23Z" finished-at="2019-06-29T14:14:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@304435f6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="kernel_CentetMachineUserMappingToMasterData_empty_RegCenterId" duration-ms="281" started-at="2019-06-29T14:14:23Z" data-provider="CentetMachineUserMappingToMasterData" finished-at="2019-06-29T14:14:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[kernel_CentetMachineUserMappingToMasterData_empty_RegCenterId]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_CentetMachineUserMappingToMasterData_empty_RegCenterId -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:24Z" finished-at="2019-06-29T14:14:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_CentetMachineUserMappingToMasterData_empty_RegCenterId status=SUCCESS method=CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:14:24Z" finished-at="2019-06-29T14:14:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@4599f10c]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="kernel_CentetMachineUserMappingToMasterData_empty_UserId" duration-ms="298" started-at="2019-06-29T14:14:24Z" data-provider="CentetMachineUserMappingToMasterData" finished-at="2019-06-29T14:14:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[kernel_CentetMachineUserMappingToMasterData_empty_UserId]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_CentetMachineUserMappingToMasterData_empty_UserId -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:24Z" finished-at="2019-06-29T14:14:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_CentetMachineUserMappingToMasterData_empty_UserId status=SUCCESS method=CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:14:24Z" finished-at="2019-06-29T14:14:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@256216b6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="kernel_CentetMachineUserMappingToMasterData_invalid_cntrId" duration-ms="295" started-at="2019-06-29T14:14:24Z" data-provider="CentetMachineUserMappingToMasterData" finished-at="2019-06-29T14:14:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[kernel_CentetMachineUserMappingToMasterData_invalid_cntrId]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_CentetMachineUserMappingToMasterData_invalid_cntrId -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:24Z" finished-at="2019-06-29T14:14:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_CentetMachineUserMappingToMasterData_invalid_cntrId status=SUCCESS method=CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:14:24Z" finished-at="2019-06-29T14:14:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2f336e00]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="kernel_CentetMachineUserMappingToMasterData_invalid_isActive" duration-ms="291" started-at="2019-06-29T14:14:24Z" data-provider="CentetMachineUserMappingToMasterData" finished-at="2019-06-29T14:14:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[kernel_CentetMachineUserMappingToMasterData_invalid_isActive]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_CentetMachineUserMappingToMasterData_invalid_isActive -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:25Z" finished-at="2019-06-29T14:14:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_CentetMachineUserMappingToMasterData_invalid_isActive status=SUCCESS method=CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:14:25Z" finished-at="2019-06-29T14:14:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@3e491595]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="kernel_CentetMachineUserMappingToMasterData_invalid_langCode" duration-ms="291" started-at="2019-06-29T14:14:25Z" data-provider="CentetMachineUserMappingToMasterData" finished-at="2019-06-29T14:14:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[kernel_CentetMachineUserMappingToMasterData_invalid_langCode]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_CentetMachineUserMappingToMasterData_invalid_langCode -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:25Z" finished-at="2019-06-29T14:14:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_CentetMachineUserMappingToMasterData_invalid_langCode status=SUCCESS method=CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:14:25Z" finished-at="2019-06-29T14:14:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@345292c1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="kernel_CentetMachineUserMappingToMasterData_invalid_machineId" duration-ms="340" started-at="2019-06-29T14:14:25Z" data-provider="CentetMachineUserMappingToMasterData" finished-at="2019-06-29T14:14:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[kernel_CentetMachineUserMappingToMasterData_invalid_machineId]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_CentetMachineUserMappingToMasterData_invalid_machineId -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:14:25Z" finished-at="2019-06-29T14:14:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1b0e55b]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:25Z" finished-at="2019-06-29T14:14:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_CentetMachineUserMappingToMasterData_invalid_machineId status=SUCCESS method=CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="kernel_CentetMachineUserMappingToMasterData_invalid_usrId" duration-ms="292" started-at="2019-06-29T14:14:25Z" data-provider="CentetMachineUserMappingToMasterData" finished-at="2019-06-29T14:14:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[kernel_CentetMachineUserMappingToMasterData_invalid_usrId]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_CentetMachineUserMappingToMasterData_invalid_usrId -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:26Z" finished-at="2019-06-29T14:14:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_CentetMachineUserMappingToMasterData_invalid_usrId status=SUCCESS method=CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="getTestCaseName" is-config="true" duration-ms="6" started-at="2019-06-29T14:14:26Z" finished-at="2019-06-29T14:14:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@35c7c803]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="kernel_CentetMachineUserMappingToMasterData_MachineId_length_11" duration-ms="286" started-at="2019-06-29T14:14:26Z" data-provider="CentetMachineUserMappingToMasterData" finished-at="2019-06-29T14:14:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[kernel_CentetMachineUserMappingToMasterData_MachineId_length_11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_CentetMachineUserMappingToMasterData_MachineId_length_11 -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:26Z" finished-at="2019-06-29T14:14:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_CentetMachineUserMappingToMasterData_MachineId_length_11 status=SUCCESS method=CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:14:26Z" finished-at="2019-06-29T14:14:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@43549693]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="kernel_CentetMachineUserMappingToMasterData_response_time" duration-ms="310" started-at="2019-06-29T14:14:26Z" data-provider="CentetMachineUserMappingToMasterData" finished-at="2019-06-29T14:14:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[kernel_CentetMachineUserMappingToMasterData_response_time]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_CentetMachineUserMappingToMasterData_response_time -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:26Z" finished-at="2019-06-29T14:14:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_CentetMachineUserMappingToMasterData_response_time status=SUCCESS method=CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:14:26Z" finished-at="2019-06-29T14:14:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6330c0a2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="kernel_CentetMachineUserMappingToMasterData_smoke" duration-ms="316" started-at="2019-06-29T14:14:26Z" data-provider="CentetMachineUserMappingToMasterData" finished-at="2019-06-29T14:14:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[kernel_CentetMachineUserMappingToMasterData_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_CentetMachineUserMappingToMasterData_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:26Z" finished-at="2019-06-29T14:14:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_CentetMachineUserMappingToMasterData_smoke status=SUCCESS method=CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:26Z" finished-at="2019-06-29T14:14:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@652c7ba2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="kernel_CentetMachineUserMappingToMasterData_updateExisting" duration-ms="320" started-at="2019-06-29T14:14:26Z" data-provider="CentetMachineUserMappingToMasterData" finished-at="2019-06-29T14:14:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[kernel_CentetMachineUserMappingToMasterData_updateExisting]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_CentetMachineUserMappingToMasterData_updateExisting -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:27Z" finished-at="2019-06-29T14:14:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_CentetMachineUserMappingToMasterData_updateExisting status=SUCCESS method=CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:14:27Z" finished-at="2019-06-29T14:14:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6ea020d4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" duration-ms="309" started-at="2019-06-29T14:14:27Z" data-provider="CentetMachineUserMappingToMasterData" finished-at="2019-06-29T14:14:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[kernel_CentetMachineUserMappingToMasterData_UserId_length_37]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_CentetMachineUserMappingToMasterData_UserId_length_37 -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c]" test-instance-name="kernel_CentetMachineUserMappingToMasterData_UserId_length_37" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:27Z" finished-at="2019-06-29T14:14:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_CentetMachineUserMappingToMasterData_UserId_length_37 status=SUCCESS method=CentetMachineUserMappingToMasterData.centetMachineUserMappingToMasterData(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.CentetMachineUserMappingToMasterData@57d5872c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.CentetMachineUserMappingToMasterData -->
      <class name="io.mosip.kernel.tests.AuditLog">
        <test-method status="PASS" signature="suiteSetup()[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="suiteSetup" is-config="true" duration-ms="25631" started-at="2019-06-29T14:13:43Z" finished-at="2019-06-29T14:14:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- suiteSetup -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="548" started-at="2019-06-29T14:14:09Z" finished-at="2019-06-29T14:14:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7f0bd5ed]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_allValid_smoke" duration-ms="372" started-at="2019-06-29T14:14:09Z" data-provider="fetchData" finished-at="2019-06-29T14:14:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_allValid_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:09Z" finished-at="2019-06-29T14:14:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_allValid_smoke status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="104" started-at="2019-06-29T14:14:09Z" finished-at="2019-06-29T14:14:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@66257bec]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_allValid_smoke_removing_optional_fields" duration-ms="327" started-at="2019-06-29T14:14:10Z" data-provider="fetchData" finished-at="2019-06-29T14:14:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke_removing_optional_fields]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_allValid_smoke_removing_optional_fields -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:10Z" finished-at="2019-06-29T14:14:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_allValid_smoke_removing_optional_fields status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="12" started-at="2019-06-29T14:14:10Z" finished-at="2019-06-29T14:14:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5281b134]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_invalid_actionTimeStamp_diff_format" duration-ms="342" started-at="2019-06-29T14:14:10Z" data-provider="fetchData" finished-at="2019-06-29T14:14:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_actionTimeStamp_diff_format]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_invalid_actionTimeStamp_diff_format -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:10Z" finished-at="2019-06-29T14:14:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_invalid_actionTimeStamp_diff_format status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="6" started-at="2019-06-29T14:14:10Z" finished-at="2019-06-29T14:14:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7384b234]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_invalid_applicationId_above64" duration-ms="368" started-at="2019-06-29T14:14:10Z" data-provider="fetchData" finished-at="2019-06-29T14:14:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_applicationId_above64]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_invalid_applicationId_above64 -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:14:11Z" finished-at="2019-06-29T14:14:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6e526c5c]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:11Z" finished-at="2019-06-29T14:14:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_invalid_applicationId_above64 status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_invalid_applicationId_blank" duration-ms="339" started-at="2019-06-29T14:14:11Z" data-provider="fetchData" finished-at="2019-06-29T14:14:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_applicationId_blank]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_invalid_applicationId_blank -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:11Z" finished-at="2019-06-29T14:14:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_invalid_applicationId_blank status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="4" started-at="2019-06-29T14:14:11Z" finished-at="2019-06-29T14:14:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@23e58061]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_invalid_applicationName_above128" duration-ms="326" started-at="2019-06-29T14:14:11Z" data-provider="fetchData" finished-at="2019-06-29T14:14:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_applicationName_above128]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_invalid_applicationName_above128 -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:11Z" finished-at="2019-06-29T14:14:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_invalid_applicationName_above128 status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="9" started-at="2019-06-29T14:14:11Z" finished-at="2019-06-29T14:14:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7c329d38]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_invalid_applicationName_blank" duration-ms="325" started-at="2019-06-29T14:14:11Z" data-provider="fetchData" finished-at="2019-06-29T14:14:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_applicationName_blank]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_invalid_applicationName_blank -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:12Z" finished-at="2019-06-29T14:14:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_invalid_applicationName_blank status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="10" started-at="2019-06-29T14:14:12Z" finished-at="2019-06-29T14:14:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2a718598]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_invalid_createdBy_above256" duration-ms="310" started-at="2019-06-29T14:14:12Z" data-provider="fetchData" finished-at="2019-06-29T14:14:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_createdBy_above256]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_invalid_createdBy_above256 -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:12Z" finished-at="2019-06-29T14:14:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_invalid_createdBy_above256 status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="4" started-at="2019-06-29T14:14:12Z" finished-at="2019-06-29T14:14:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@57bc2c06]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_invalid_createdBy_blank" duration-ms="1098" started-at="2019-06-29T14:14:12Z" data-provider="fetchData" finished-at="2019-06-29T14:14:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_createdBy_blank]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_invalid_createdBy_blank -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:13Z" finished-at="2019-06-29T14:14:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_invalid_createdBy_blank status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:14:13Z" finished-at="2019-06-29T14:14:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@58554818]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_invalid_createdBy_Removing required Data" duration-ms="310" started-at="2019-06-29T14:14:13Z" data-provider="fetchData" finished-at="2019-06-29T14:14:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_createdBy_Removing required Data]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_invalid_createdBy_Removing required Data -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:13Z" finished-at="2019-06-29T14:14:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_invalid_createdBy_Removing required Data status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:14:13Z" finished-at="2019-06-29T14:14:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@30e6c577]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_invalid_eventId_above64" duration-ms="296" started-at="2019-06-29T14:14:13Z" data-provider="fetchData" finished-at="2019-06-29T14:14:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_eventId_above64]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_invalid_eventId_above64 -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:14Z" finished-at="2019-06-29T14:14:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_invalid_eventId_above64 status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="4" started-at="2019-06-29T14:14:14Z" finished-at="2019-06-29T14:14:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@169ddbb6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_invalid_eventId_blank" duration-ms="308" started-at="2019-06-29T14:14:14Z" data-provider="fetchData" finished-at="2019-06-29T14:14:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_eventId_blank]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_invalid_eventId_blank -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:14Z" finished-at="2019-06-29T14:14:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_invalid_eventId_blank status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:14:14Z" finished-at="2019-06-29T14:14:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@20f7197f]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_invalid_eventName_above128" duration-ms="332" started-at="2019-06-29T14:14:14Z" data-provider="fetchData" finished-at="2019-06-29T14:14:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_eventName_above128]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_invalid_eventName_above128 -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:14Z" finished-at="2019-06-29T14:14:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_invalid_eventName_above128 status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="5" started-at="2019-06-29T14:14:14Z" finished-at="2019-06-29T14:14:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@521090f1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_invalid_eventName_blank" duration-ms="296" started-at="2019-06-29T14:14:14Z" data-provider="fetchData" finished-at="2019-06-29T14:14:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_eventName_blank]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_invalid_eventName_blank -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:15Z" finished-at="2019-06-29T14:14:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_invalid_eventName_blank status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:14:15Z" finished-at="2019-06-29T14:14:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@54db2ab9]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_invalid_eventType_above64" duration-ms="305" started-at="2019-06-29T14:14:15Z" data-provider="fetchData" finished-at="2019-06-29T14:14:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_eventType_above64]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_invalid_eventType_above64 -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:14:15Z" finished-at="2019-06-29T14:14:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2c630bff]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:15Z" finished-at="2019-06-29T14:14:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_invalid_eventType_above64 status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_invalid_eventType_blank" duration-ms="329" started-at="2019-06-29T14:14:15Z" data-provider="fetchData" finished-at="2019-06-29T14:14:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_eventType_blank]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_invalid_eventType_blank -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:15Z" finished-at="2019-06-29T14:14:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_invalid_eventType_blank status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:14:15Z" finished-at="2019-06-29T14:14:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@3447c3ed]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_invalid_hostIp_above16" duration-ms="287" started-at="2019-06-29T14:14:15Z" data-provider="fetchData" finished-at="2019-06-29T14:14:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_hostIp_above16]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_invalid_hostIp_above16 -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:16Z" finished-at="2019-06-29T14:14:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_invalid_hostIp_above16 status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="6" started-at="2019-06-29T14:14:16Z" finished-at="2019-06-29T14:14:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@62065a8c]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_invalid_hostIp_blank" duration-ms="327" started-at="2019-06-29T14:14:16Z" data-provider="fetchData" finished-at="2019-06-29T14:14:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_hostIp_blank]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_invalid_hostIp_blank -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:16Z" finished-at="2019-06-29T14:14:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_invalid_hostIp_blank status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="7" started-at="2019-06-29T14:14:16Z" finished-at="2019-06-29T14:14:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6f053a97]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_invalid_hostName_above128" duration-ms="289" started-at="2019-06-29T14:14:16Z" data-provider="fetchData" finished-at="2019-06-29T14:14:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_hostName_above128]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_invalid_hostName_above128 -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:14:16Z" finished-at="2019-06-29T14:14:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5b8de87b]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:16Z" finished-at="2019-06-29T14:14:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_invalid_hostName_above128 status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_invalid_hostName_blank" duration-ms="312" started-at="2019-06-29T14:14:16Z" data-provider="fetchData" finished-at="2019-06-29T14:14:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_hostName_blank]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_invalid_hostName_blank -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="4" started-at="2019-06-29T14:14:17Z" finished-at="2019-06-29T14:14:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@515f104c]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:17Z" finished-at="2019-06-29T14:14:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_invalid_hostName_blank status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_invalid_idType_above64" duration-ms="316" started-at="2019-06-29T14:14:17Z" data-provider="fetchData" finished-at="2019-06-29T14:14:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_idType_above64]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_invalid_idType_above64 -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:17Z" finished-at="2019-06-29T14:14:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_invalid_idType_above64 status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:14:17Z" finished-at="2019-06-29T14:14:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1dde2d1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_invalid_idType_blank" duration-ms="287" started-at="2019-06-29T14:14:17Z" data-provider="fetchData" finished-at="2019-06-29T14:14:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_idType_blank]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_invalid_idType_blank -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:17Z" finished-at="2019-06-29T14:14:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_invalid_idType_blank status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:17Z" finished-at="2019-06-29T14:14:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@47caa1ff]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_invalid_id_above64" duration-ms="321" started-at="2019-06-29T14:14:17Z" data-provider="fetchData" finished-at="2019-06-29T14:14:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_id_above64]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_invalid_id_above64 -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:17Z" finished-at="2019-06-29T14:14:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_invalid_id_above64 status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="7" started-at="2019-06-29T14:14:17Z" finished-at="2019-06-29T14:14:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7330574d]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_invalid_id_blank" duration-ms="302" started-at="2019-06-29T14:14:17Z" data-provider="fetchData" finished-at="2019-06-29T14:14:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_id_blank]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_invalid_id_blank -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:18Z" finished-at="2019-06-29T14:14:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_invalid_id_blank status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="7" started-at="2019-06-29T14:14:18Z" finished-at="2019-06-29T14:14:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5ac4f417]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_invalid_requestBody_format" duration-ms="288" started-at="2019-06-29T14:14:18Z" data-provider="fetchData" finished-at="2019-06-29T14:14:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_requestBody_format]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_invalid_requestBody_format -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:18Z" finished-at="2019-06-29T14:14:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_invalid_requestBody_format status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:14:18Z" finished-at="2019-06-29T14:14:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@34615ef4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_invalid_sessionUserId_above256" duration-ms="277" started-at="2019-06-29T14:14:18Z" data-provider="fetchData" finished-at="2019-06-29T14:14:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_sessionUserId_above256]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_invalid_sessionUserId_above256 -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:18Z" finished-at="2019-06-29T14:14:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_invalid_sessionUserId_above256 status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:14:18Z" finished-at="2019-06-29T14:14:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@26b6c4de]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_invalid_sessionUserId_blank" duration-ms="3296" started-at="2019-06-29T14:14:18Z" data-provider="fetchData" finished-at="2019-06-29T14:14:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_sessionUserId_blank]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_invalid_sessionUserId_blank -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:14:22Z" finished-at="2019-06-29T14:14:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@57cd757a]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:22Z" finished-at="2019-06-29T14:14:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_invalid_sessionUserId_blank status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_invalid_sessionUserName_above128" duration-ms="291" started-at="2019-06-29T14:14:22Z" data-provider="fetchData" finished-at="2019-06-29T14:14:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_sessionUserName_above128]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_invalid_sessionUserName_above128 -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:22Z" finished-at="2019-06-29T14:14:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_invalid_sessionUserName_above128 status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:14:22Z" finished-at="2019-06-29T14:14:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.AuditLog.auditLog(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2ad447d8]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="kernel_AuditLog_invalid_sessionUserName_blank" duration-ms="302" started-at="2019-06-29T14:14:22Z" data-provider="fetchData" finished-at="2019-06-29T14:14:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_sessionUserName_blank]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_AuditLog_invalid_sessionUserName_blank -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:22Z" finished-at="2019-06-29T14:14:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_AuditLog_invalid_sessionUserName_blank status=SUCCESS method=AuditLog.auditLog(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="testTearDown(org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.AuditLog@1e67a849]" test-instance-name="kernel_AuditLog_invalid_sessionUserName_blank" name="testTearDown" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:21Z" finished-at="2019-06-29T14:28:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTearDown -->
      </class> <!-- io.mosip.kernel.tests.AuditLog -->
      <class name="io.mosip.kernel.tests.GetRegCenterByIDTimestamp">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="getTestCaseName" is-config="true" duration-ms="3281" started-at="2019-06-29T14:22:44Z" finished-at="2019-06-29T14:22:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetRegCenterByIDTimestamp.getRegCenterByIDTimestamp(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@679c93a0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getRegCenterByIDTimestamp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="Kernel_GetRegCenterByID_timestamp_closingTime" duration-ms="297" started-at="2019-06-29T14:22:47Z" data-provider="GetRegCenterByIDTimestamp" finished-at="2019-06-29T14:22:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetRegCenterByID_timestamp_closingTime]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetRegCenterByID_timestamp_closingTime -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:48Z" finished-at="2019-06-29T14:22:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetRegCenterByID_timestamp_closingTime status=SUCCESS method=GetRegCenterByIDTimestamp.getRegCenterByIDTimestamp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:48Z" finished-at="2019-06-29T14:22:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetRegCenterByIDTimestamp.getRegCenterByIDTimestamp(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@4999462c]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getRegCenterByIDTimestamp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="Kernel_GetRegCenterByID_timestamp_format_2" duration-ms="3285" started-at="2019-06-29T14:22:48Z" data-provider="GetRegCenterByIDTimestamp" finished-at="2019-06-29T14:22:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetRegCenterByID_timestamp_format_2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetRegCenterByID_timestamp_format_2 -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:51Z" finished-at="2019-06-29T14:22:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetRegCenterByID_timestamp_format_2 status=SUCCESS method=GetRegCenterByIDTimestamp.getRegCenterByIDTimestamp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:51Z" finished-at="2019-06-29T14:22:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetRegCenterByIDTimestamp.getRegCenterByIDTimestamp(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@30f8e8b2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getRegCenterByIDTimestamp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="Kernel_GetRegCenterByID_timestamp_format_3" duration-ms="288" started-at="2019-06-29T14:22:51Z" data-provider="GetRegCenterByIDTimestamp" finished-at="2019-06-29T14:22:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetRegCenterByID_timestamp_format_3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetRegCenterByID_timestamp_format_3 -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:51Z" finished-at="2019-06-29T14:22:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetRegCenterByID_timestamp_format_3 status=SUCCESS method=GetRegCenterByIDTimestamp.getRegCenterByIDTimestamp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:22:51Z" finished-at="2019-06-29T14:22:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetRegCenterByIDTimestamp.getRegCenterByIDTimestamp(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7c752d6b]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getRegCenterByIDTimestamp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="Kernel_GetRegCenterByID_timestamp_invalid_id" duration-ms="282" started-at="2019-06-29T14:22:51Z" data-provider="GetRegCenterByIDTimestamp" finished-at="2019-06-29T14:22:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetRegCenterByID_timestamp_invalid_id]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetRegCenterByID_timestamp_invalid_id -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:52Z" finished-at="2019-06-29T14:22:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetRegCenterByID_timestamp_invalid_id status=SUCCESS method=GetRegCenterByIDTimestamp.getRegCenterByIDTimestamp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:22:52Z" finished-at="2019-06-29T14:22:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetRegCenterByIDTimestamp.getRegCenterByIDTimestamp(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7f77a0d6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getRegCenterByIDTimestamp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="Kernel_GetRegCenterByID_timestamp_invalid_langCode" duration-ms="289" started-at="2019-06-29T14:22:52Z" data-provider="GetRegCenterByIDTimestamp" finished-at="2019-06-29T14:22:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetRegCenterByID_timestamp_invalid_langCode]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetRegCenterByID_timestamp_invalid_langCode -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:52Z" finished-at="2019-06-29T14:22:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetRegCenterByID_timestamp_invalid_langCode status=SUCCESS method=GetRegCenterByIDTimestamp.getRegCenterByIDTimestamp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:52Z" finished-at="2019-06-29T14:22:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetRegCenterByIDTimestamp.getRegCenterByIDTimestamp(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7c5c3132]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getRegCenterByIDTimestamp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="Kernel_GetRegCenterByID_timestamp_invalid_timestamp" duration-ms="287" started-at="2019-06-29T14:22:52Z" data-provider="GetRegCenterByIDTimestamp" finished-at="2019-06-29T14:22:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetRegCenterByID_timestamp_invalid_timestamp]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetRegCenterByID_timestamp_invalid_timestamp -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:52Z" finished-at="2019-06-29T14:22:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetRegCenterByIDTimestamp.getRegCenterByIDTimestamp(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@b96fb73]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:52Z" finished-at="2019-06-29T14:22:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetRegCenterByID_timestamp_invalid_timestamp status=SUCCESS method=GetRegCenterByIDTimestamp.getRegCenterByIDTimestamp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getRegCenterByIDTimestamp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="Kernel_GetRegCenterByID_timestamp_lessThan_openeningTime" duration-ms="281" started-at="2019-06-29T14:22:52Z" data-provider="GetRegCenterByIDTimestamp" finished-at="2019-06-29T14:22:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetRegCenterByID_timestamp_lessThan_openeningTime]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetRegCenterByID_timestamp_lessThan_openeningTime -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:52Z" finished-at="2019-06-29T14:22:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetRegCenterByID_timestamp_lessThan_openeningTime status=SUCCESS method=GetRegCenterByIDTimestamp.getRegCenterByIDTimestamp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:52Z" finished-at="2019-06-29T14:22:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetRegCenterByIDTimestamp.getRegCenterByIDTimestamp(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5edd911f]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getRegCenterByIDTimestamp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="Kernel_GetRegCenterByID_TimeStamp_morethan_closingTime" duration-ms="268" started-at="2019-06-29T14:22:52Z" data-provider="GetRegCenterByIDTimestamp" finished-at="2019-06-29T14:22:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetRegCenterByID_TimeStamp_morethan_closingTime]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetRegCenterByID_TimeStamp_morethan_closingTime -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:53Z" finished-at="2019-06-29T14:22:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetRegCenterByIDTimestamp.getRegCenterByIDTimestamp(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1ceefb02]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:53Z" finished-at="2019-06-29T14:22:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetRegCenterByID_TimeStamp_morethan_closingTime status=SUCCESS method=GetRegCenterByIDTimestamp.getRegCenterByIDTimestamp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getRegCenterByIDTimestamp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="Kernel_GetRegCenterByID_TimeStamp_onHoliday" duration-ms="278" started-at="2019-06-29T14:22:53Z" data-provider="GetRegCenterByIDTimestamp" finished-at="2019-06-29T14:22:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetRegCenterByID_TimeStamp_onHoliday]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetRegCenterByID_TimeStamp_onHoliday -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:53Z" finished-at="2019-06-29T14:22:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetRegCenterByID_TimeStamp_onHoliday status=SUCCESS method=GetRegCenterByIDTimestamp.getRegCenterByIDTimestamp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:53Z" finished-at="2019-06-29T14:22:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetRegCenterByIDTimestamp.getRegCenterByIDTimestamp(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1a68c0c]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getRegCenterByIDTimestamp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="Kernel_GetRegCenterByID_timestamp_openeningTime" duration-ms="284" started-at="2019-06-29T14:22:53Z" data-provider="GetRegCenterByIDTimestamp" finished-at="2019-06-29T14:22:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetRegCenterByID_timestamp_openeningTime]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetRegCenterByID_timestamp_openeningTime -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:53Z" finished-at="2019-06-29T14:22:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetRegCenterByID_timestamp_openeningTime status=SUCCESS method=GetRegCenterByIDTimestamp.getRegCenterByIDTimestamp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:53Z" finished-at="2019-06-29T14:22:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetRegCenterByIDTimestamp.getRegCenterByIDTimestamp(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@3d57b228]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getRegCenterByIDTimestamp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="Kernel_GetRegCenterByID_timestamp_response_time" duration-ms="281" started-at="2019-06-29T14:22:53Z" data-provider="GetRegCenterByIDTimestamp" finished-at="2019-06-29T14:22:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetRegCenterByID_timestamp_response_time]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetRegCenterByID_timestamp_response_time -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:53Z" finished-at="2019-06-29T14:22:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetRegCenterByID_timestamp_response_time status=SUCCESS method=GetRegCenterByIDTimestamp.getRegCenterByIDTimestamp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:53Z" finished-at="2019-06-29T14:22:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetRegCenterByIDTimestamp.getRegCenterByIDTimestamp(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@fb089f4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getRegCenterByIDTimestamp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="Kernel_GetRegCenterByID_timestamp_smoke" duration-ms="326" started-at="2019-06-29T14:22:53Z" data-provider="GetRegCenterByIDTimestamp" finished-at="2019-06-29T14:22:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetRegCenterByID_timestamp_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetRegCenterByID_timestamp_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451]" test-instance-name="Kernel_GetRegCenterByID_timestamp_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:54Z" finished-at="2019-06-29T14:22:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetRegCenterByID_timestamp_smoke status=SUCCESS method=GetRegCenterByIDTimestamp.getRegCenterByIDTimestamp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegCenterByIDTimestamp@2890c451] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.GetRegCenterByIDTimestamp -->
      <class name="io.mosip.kernel.tests.ValidateLocationByName">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2]" test-instance-name="Kernel_ValidateLocationByName_smoke_country" name="getTestCaseName" is-config="true" duration-ms="235" started-at="2019-06-29T14:28:13Z" finished-at="2019-06-29T14:28:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.ValidateLocationByName.validateLocationByName(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2d532099]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="validateLocationByName(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2]" test-instance-name="Kernel_ValidateLocationByName_smoke_country" name="Kernel_ValidateLocationByName_city" duration-ms="300" started-at="2019-06-29T14:28:13Z" data-provider="ValidateLocationByName" finished-at="2019-06-29T14:28:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_ValidateLocationByName_city]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_ValidateLocationByName_city -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2]" test-instance-name="Kernel_ValidateLocationByName_smoke_country" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:13Z" finished-at="2019-06-29T14:28:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_ValidateLocationByName_city status=SUCCESS method=ValidateLocationByName.validateLocationByName(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2]" test-instance-name="Kernel_ValidateLocationByName_smoke_country" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:28:13Z" finished-at="2019-06-29T14:28:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.ValidateLocationByName.validateLocationByName(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@463aa3da]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="validateLocationByName(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2]" test-instance-name="Kernel_ValidateLocationByName_smoke_country" name="Kernel_ValidateLocationByName_invalid_locationname" duration-ms="290" started-at="2019-06-29T14:28:13Z" data-provider="ValidateLocationByName" finished-at="2019-06-29T14:28:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_ValidateLocationByName_invalid_locationname]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_ValidateLocationByName_invalid_locationname -->
        <test-method status="PASS" signature="validateLocationByName(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2]" test-instance-name="Kernel_ValidateLocationByName_smoke_country" name="Kernel_ValidateLocationByName_localAuthority" duration-ms="303" started-at="2019-06-29T14:28:14Z" data-provider="ValidateLocationByName" finished-at="2019-06-29T14:28:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_ValidateLocationByName_localAuthority]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_ValidateLocationByName_localAuthority -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2]" test-instance-name="Kernel_ValidateLocationByName_smoke_country" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:14Z" finished-at="2019-06-29T14:28:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.ValidateLocationByName.validateLocationByName(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@770ad1f0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2]" test-instance-name="Kernel_ValidateLocationByName_smoke_country" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:14Z" finished-at="2019-06-29T14:28:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_ValidateLocationByName_invalid_locationname status=SUCCESS method=ValidateLocationByName.validateLocationByName(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2]" test-instance-name="Kernel_ValidateLocationByName_smoke_country" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:14Z" finished-at="2019-06-29T14:28:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_ValidateLocationByName_localAuthority status=SUCCESS method=ValidateLocationByName.validateLocationByName(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2]" test-instance-name="Kernel_ValidateLocationByName_smoke_country" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:28:14Z" finished-at="2019-06-29T14:28:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.ValidateLocationByName.validateLocationByName(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@4cda59e6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="validateLocationByName(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2]" test-instance-name="Kernel_ValidateLocationByName_smoke_country" name="Kernel_ValidateLocationByName_province" duration-ms="286" started-at="2019-06-29T14:28:14Z" data-provider="ValidateLocationByName" finished-at="2019-06-29T14:28:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_ValidateLocationByName_province]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_ValidateLocationByName_province -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2]" test-instance-name="Kernel_ValidateLocationByName_smoke_country" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:14Z" finished-at="2019-06-29T14:28:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.ValidateLocationByName.validateLocationByName(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@78b9ef0c]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="validateLocationByName(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2]" test-instance-name="Kernel_ValidateLocationByName_smoke_country" name="Kernel_ValidateLocationByName_Region" duration-ms="278" started-at="2019-06-29T14:28:14Z" data-provider="ValidateLocationByName" finished-at="2019-06-29T14:28:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_ValidateLocationByName_Region]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_ValidateLocationByName_Region -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2]" test-instance-name="Kernel_ValidateLocationByName_smoke_country" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:14Z" finished-at="2019-06-29T14:28:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_ValidateLocationByName_province status=SUCCESS method=ValidateLocationByName.validateLocationByName(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2]" test-instance-name="Kernel_ValidateLocationByName_smoke_country" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:14Z" finished-at="2019-06-29T14:28:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_ValidateLocationByName_Region status=SUCCESS method=ValidateLocationByName.validateLocationByName(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2]" test-instance-name="Kernel_ValidateLocationByName_smoke_country" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:28:14Z" finished-at="2019-06-29T14:28:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.ValidateLocationByName.validateLocationByName(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6b8eb7b2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="validateLocationByName(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2]" test-instance-name="Kernel_ValidateLocationByName_smoke_country" name="Kernel_ValidateLocationByName_response_time" duration-ms="295" started-at="2019-06-29T14:28:14Z" data-provider="ValidateLocationByName" finished-at="2019-06-29T14:28:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_ValidateLocationByName_response_time]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_ValidateLocationByName_response_time -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2]" test-instance-name="Kernel_ValidateLocationByName_smoke_country" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:15Z" finished-at="2019-06-29T14:28:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.ValidateLocationByName.validateLocationByName(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@4aaa6e62]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="validateLocationByName(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2]" test-instance-name="Kernel_ValidateLocationByName_smoke_country" name="Kernel_ValidateLocationByName_smoke_country" duration-ms="3315" started-at="2019-06-29T14:28:15Z" data-provider="ValidateLocationByName" finished-at="2019-06-29T14:28:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_ValidateLocationByName_smoke_country]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_ValidateLocationByName_smoke_country -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2]" test-instance-name="Kernel_ValidateLocationByName_smoke_country" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:15Z" finished-at="2019-06-29T14:28:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_ValidateLocationByName_response_time status=SUCCESS method=ValidateLocationByName.validateLocationByName(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2]" test-instance-name="Kernel_ValidateLocationByName_smoke_country" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:18Z" finished-at="2019-06-29T14:28:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_ValidateLocationByName_smoke_country status=SUCCESS method=ValidateLocationByName.validateLocationByName(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.ValidateLocationByName@240237d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.ValidateLocationByName -->
      <class name="io.mosip.kernel.tests.FetchHolidays">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchHolidays@52aa2946]" test-instance-name="kernel_FetchHolidays_invalid_langcode_unexisting" name="getTestCaseName" is-config="true" duration-ms="263" started-at="2019-06-29T14:17:14Z" finished-at="2019-06-29T14:17:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchHolidays.fetchHolidays(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@61a35f53]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchHolidays(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchHolidays@52aa2946]" test-instance-name="kernel_FetchHolidays_invalid_langcode_unexisting" name="kernel_FetchHolidays_allValid_smoke_get" duration-ms="14486" started-at="2019-06-29T14:17:14Z" data-provider="fetchData" finished-at="2019-06-29T14:17:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke_get]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchHolidays_allValid_smoke_get -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchHolidays@52aa2946]" test-instance-name="kernel_FetchHolidays_invalid_langcode_unexisting" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:17:29Z" finished-at="2019-06-29T14:17:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchHolidays_allValid_smoke_get status=SUCCESS method=FetchHolidays.fetchHolidays(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchHolidays@52aa2946] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchHolidays@52aa2946]" test-instance-name="kernel_FetchHolidays_invalid_langcode_unexisting" name="getTestCaseName" is-config="true" duration-ms="4" started-at="2019-06-29T14:17:29Z" finished-at="2019-06-29T14:17:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchHolidays.fetchHolidays(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@50bac431]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchHolidays(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchHolidays@52aa2946]" test-instance-name="kernel_FetchHolidays_invalid_langcode_unexisting" name="kernel_FetchHolidays_allValid_smoke_with Id" duration-ms="15313" started-at="2019-06-29T14:17:29Z" data-provider="fetchData" finished-at="2019-06-29T14:17:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke_with Id]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchHolidays_allValid_smoke_with Id -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchHolidays@52aa2946]" test-instance-name="kernel_FetchHolidays_invalid_langcode_unexisting" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:17:44Z" finished-at="2019-06-29T14:17:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchHolidays_allValid_smoke_with Id status=SUCCESS method=FetchHolidays.fetchHolidays(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchHolidays@52aa2946] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchHolidays@52aa2946]" test-instance-name="kernel_FetchHolidays_invalid_langcode_unexisting" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:17:44Z" finished-at="2019-06-29T14:17:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchHolidays.fetchHolidays(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1de8248f]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchHolidays(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchHolidays@52aa2946]" test-instance-name="kernel_FetchHolidays_invalid_langcode_unexisting" name="kernel_FetchHolidays_allValid_smoke_with Id and langCode" duration-ms="13599" started-at="2019-06-29T14:17:44Z" data-provider="fetchData" finished-at="2019-06-29T14:17:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke_with Id and langCode]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchHolidays_allValid_smoke_with Id and langCode -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchHolidays@52aa2946]" test-instance-name="kernel_FetchHolidays_invalid_langcode_unexisting" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:17:58Z" finished-at="2019-06-29T14:17:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchHolidays_allValid_smoke_with Id and langCode status=SUCCESS method=FetchHolidays.fetchHolidays(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchHolidays@52aa2946] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchHolidays@52aa2946]" test-instance-name="kernel_FetchHolidays_invalid_langcode_unexisting" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:17:58Z" finished-at="2019-06-29T14:17:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchHolidays.fetchHolidays(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@68dc7f43]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchHolidays(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchHolidays@52aa2946]" test-instance-name="kernel_FetchHolidays_invalid_langcode_unexisting" name="kernel_FetchHolidays_invalid_holidayid_unexisting" duration-ms="284" started-at="2019-06-29T14:17:58Z" data-provider="fetchData" finished-at="2019-06-29T14:17:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_holidayid_unexisting]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchHolidays_invalid_holidayid_unexisting -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchHolidays@52aa2946]" test-instance-name="kernel_FetchHolidays_invalid_langcode_unexisting" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:17:58Z" finished-at="2019-06-29T14:17:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchHolidays_invalid_holidayid_unexisting status=SUCCESS method=FetchHolidays.fetchHolidays(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchHolidays@52aa2946] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchHolidays@52aa2946]" test-instance-name="kernel_FetchHolidays_invalid_langcode_unexisting" name="getTestCaseName" is-config="true" duration-ms="5" started-at="2019-06-29T14:17:58Z" finished-at="2019-06-29T14:17:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchHolidays.fetchHolidays(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@137efccc]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchHolidays(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchHolidays@52aa2946]" test-instance-name="kernel_FetchHolidays_invalid_langcode_unexisting" name="kernel_FetchHolidays_invalid_holidayid_unexisting with langCode" duration-ms="338" started-at="2019-06-29T14:17:58Z" data-provider="fetchData" finished-at="2019-06-29T14:17:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_holidayid_unexisting with langCode]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchHolidays_invalid_holidayid_unexisting with langCode -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchHolidays@52aa2946]" test-instance-name="kernel_FetchHolidays_invalid_langcode_unexisting" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:17:58Z" finished-at="2019-06-29T14:17:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchHolidays_invalid_holidayid_unexisting with langCode status=SUCCESS method=FetchHolidays.fetchHolidays(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchHolidays@52aa2946] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchHolidays@52aa2946]" test-instance-name="kernel_FetchHolidays_invalid_langcode_unexisting" name="getTestCaseName" is-config="true" duration-ms="4" started-at="2019-06-29T14:17:58Z" finished-at="2019-06-29T14:17:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchHolidays.fetchHolidays(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@156329de]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchHolidays(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchHolidays@52aa2946]" test-instance-name="kernel_FetchHolidays_invalid_langcode_unexisting" name="kernel_FetchHolidays_invalid_langcode_unexisting" duration-ms="299" started-at="2019-06-29T14:17:58Z" data-provider="fetchData" finished-at="2019-06-29T14:17:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode_unexisting]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchHolidays_invalid_langcode_unexisting -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchHolidays@52aa2946]" test-instance-name="kernel_FetchHolidays_invalid_langcode_unexisting" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:17:59Z" finished-at="2019-06-29T14:17:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchHolidays_invalid_langcode_unexisting status=SUCCESS method=FetchHolidays.fetchHolidays(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchHolidays@52aa2946] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.FetchHolidays -->
      <class name="io.mosip.kernel.tests.FetchTitle">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchTitle@45f45fa1]" test-instance-name="kernel_fetchTitle_valid_smoke" name="getTestCaseName" is-config="true" duration-ms="264" started-at="2019-06-29T14:21:06Z" finished-at="2019-06-29T14:21:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchTitle.fetchTitle(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@33101686]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchTitle(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchTitle@45f45fa1]" test-instance-name="kernel_fetchTitle_valid_smoke" name="kernel_fetchTitle_invalid_langcode" duration-ms="303" started-at="2019-06-29T14:21:06Z" data-provider="fetchData" finished-at="2019-06-29T14:21:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchTitle_invalid_langcode -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchTitle@45f45fa1]" test-instance-name="kernel_fetchTitle_valid_smoke" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:21:06Z" finished-at="2019-06-29T14:21:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchTitle.fetchTitle(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@18bbd4a]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchTitle@45f45fa1]" test-instance-name="kernel_fetchTitle_valid_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:21:06Z" finished-at="2019-06-29T14:21:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchTitle_invalid_langcode status=SUCCESS method=FetchTitle.fetchTitle(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchTitle@45f45fa1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="fetchTitle(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchTitle@45f45fa1]" test-instance-name="kernel_fetchTitle_valid_smoke" name="kernel_fetchTitle_invalid_langcode_empty" duration-ms="274" started-at="2019-06-29T14:21:06Z" data-provider="fetchData" finished-at="2019-06-29T14:21:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode_empty]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchTitle_invalid_langcode_empty -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchTitle@45f45fa1]" test-instance-name="kernel_fetchTitle_valid_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:21:07Z" finished-at="2019-06-29T14:21:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchTitle_invalid_langcode_empty status=SUCCESS method=FetchTitle.fetchTitle(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchTitle@45f45fa1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchTitle@45f45fa1]" test-instance-name="kernel_fetchTitle_valid_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:07Z" finished-at="2019-06-29T14:21:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchTitle.fetchTitle(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@76b36d98]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchTitle(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchTitle@45f45fa1]" test-instance-name="kernel_fetchTitle_valid_smoke" name="kernel_fetchTitle_valid_smoke" duration-ms="268" started-at="2019-06-29T14:21:07Z" data-provider="fetchData" finished-at="2019-06-29T14:21:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[valid_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchTitle_valid_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchTitle@45f45fa1]" test-instance-name="kernel_fetchTitle_valid_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:21:07Z" finished-at="2019-06-29T14:21:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchTitle_valid_smoke status=SUCCESS method=FetchTitle.fetchTitle(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchTitle@45f45fa1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.FetchTitle -->
      <class name="io.mosip.kernel.tests.GetUsersBasedOnRegCenter">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetUsersBasedOnRegCenter@3ec300f1]" test-instance-name="Kernel_GetusersBasedOnRegCenter_smoke" name="getTestCaseName" is-config="true" duration-ms="263" started-at="2019-06-29T14:23:00Z" finished-at="2019-06-29T14:23:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetUsersBasedOnRegCenter.getusersBasedOnRegCenter(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@b1078f2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getusersBasedOnRegCenter(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetUsersBasedOnRegCenter@3ec300f1]" test-instance-name="Kernel_GetusersBasedOnRegCenter_smoke" name="Kernel_GetusersBasedOnRegCenter_invalid_regid" duration-ms="530" started-at="2019-06-29T14:23:01Z" data-provider="GetusersBasedOnRegCenter" finished-at="2019-06-29T14:23:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetusersBasedOnRegCenter_invalid_regid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetusersBasedOnRegCenter_invalid_regid -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetUsersBasedOnRegCenter@3ec300f1]" test-instance-name="Kernel_GetusersBasedOnRegCenter_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:01Z" finished-at="2019-06-29T14:23:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetusersBasedOnRegCenter_invalid_regid status=SUCCESS method=GetUsersBasedOnRegCenter.getusersBasedOnRegCenter(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetUsersBasedOnRegCenter@3ec300f1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetUsersBasedOnRegCenter@3ec300f1]" test-instance-name="Kernel_GetusersBasedOnRegCenter_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:23:01Z" finished-at="2019-06-29T14:23:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetUsersBasedOnRegCenter.getusersBasedOnRegCenter(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@767ab988]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getusersBasedOnRegCenter(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetUsersBasedOnRegCenter@3ec300f1]" test-instance-name="Kernel_GetusersBasedOnRegCenter_smoke" name="Kernel_GetusersBasedOnRegCenter_response_time" duration-ms="575" started-at="2019-06-29T14:23:01Z" data-provider="GetusersBasedOnRegCenter" finished-at="2019-06-29T14:23:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetusersBasedOnRegCenter_response_time]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetusersBasedOnRegCenter_response_time -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetUsersBasedOnRegCenter@3ec300f1]" test-instance-name="Kernel_GetusersBasedOnRegCenter_smoke" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:23:02Z" finished-at="2019-06-29T14:23:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetUsersBasedOnRegCenter.getusersBasedOnRegCenter(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@578ce232]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetUsersBasedOnRegCenter@3ec300f1]" test-instance-name="Kernel_GetusersBasedOnRegCenter_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:02Z" finished-at="2019-06-29T14:23:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetusersBasedOnRegCenter_response_time status=SUCCESS method=GetUsersBasedOnRegCenter.getusersBasedOnRegCenter(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetUsersBasedOnRegCenter@3ec300f1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getusersBasedOnRegCenter(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetUsersBasedOnRegCenter@3ec300f1]" test-instance-name="Kernel_GetusersBasedOnRegCenter_smoke" name="Kernel_GetusersBasedOnRegCenter_smoke" duration-ms="623" started-at="2019-06-29T14:23:02Z" data-provider="GetusersBasedOnRegCenter" finished-at="2019-06-29T14:23:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetusersBasedOnRegCenter_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetusersBasedOnRegCenter_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetUsersBasedOnRegCenter@3ec300f1]" test-instance-name="Kernel_GetusersBasedOnRegCenter_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:02Z" finished-at="2019-06-29T14:23:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetusersBasedOnRegCenter_smoke status=SUCCESS method=GetUsersBasedOnRegCenter.getusersBasedOnRegCenter(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetUsersBasedOnRegCenter@3ec300f1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.GetUsersBasedOnRegCenter -->
      <class name="io.mosip.kernel.tests.EncrptionDecryption">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="getTestCaseName" is-config="true" duration-ms="238" started-at="2019-06-29T14:14:31Z" finished-at="2019-06-29T14:14:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.EncrptionDecryption.encrptionDecryption(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@8b2f35c]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="encrptionDecryption(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="kernel_EncrptionDecryption_allValid_smoke" duration-ms="1391" started-at="2019-06-29T14:14:31Z" data-provider="fetchData" finished-at="2019-06-29T14:14:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_EncrptionDecryption_allValid_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:32Z" finished-at="2019-06-29T14:14:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_EncrptionDecryption_allValid_smoke status=SUCCESS method=EncrptionDecryption.encrptionDecryption(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:14:32Z" finished-at="2019-06-29T14:14:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.EncrptionDecryption.encrptionDecryption(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@41ee3c99]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="encrptionDecryption(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="kernel_EncrptionDecryption_invalid_appID_diff in encrypt and decrypt" duration-ms="808" started-at="2019-06-29T14:14:32Z" data-provider="fetchData" finished-at="2019-06-29T14:14:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_appID_diff in encrypt and decrypt]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_EncrptionDecryption_invalid_appID_diff in encrypt and decrypt -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:33Z" finished-at="2019-06-29T14:14:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_EncrptionDecryption_invalid_appID_diff in encrypt and decrypt status=SUCCESS method=EncrptionDecryption.encrptionDecryption(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="getTestCaseName" is-config="true" duration-ms="6" started-at="2019-06-29T14:14:33Z" finished-at="2019-06-29T14:14:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.EncrptionDecryption.encrptionDecryption(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5b6d1e80]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="encrptionDecryption(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="kernel_EncrptionDecryption_invalid_applicationId_encryption" duration-ms="489" started-at="2019-06-29T14:14:33Z" data-provider="fetchData" finished-at="2019-06-29T14:14:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_applicationId_encryption]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_EncrptionDecryption_invalid_applicationId_encryption -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:34Z" finished-at="2019-06-29T14:14:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_EncrptionDecryption_invalid_applicationId_encryption status=SUCCESS method=EncrptionDecryption.encrptionDecryption(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:14:34Z" finished-at="2019-06-29T14:14:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.EncrptionDecryption.encrptionDecryption(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7141e065]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="encrptionDecryption(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="kernel_EncrptionDecryption_invalid_data_diff in encrypt and decrypt" duration-ms="673" started-at="2019-06-29T14:14:34Z" data-provider="fetchData" finished-at="2019-06-29T14:14:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_data_diff in encrypt and decrypt]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_EncrptionDecryption_invalid_data_diff in encrypt and decrypt -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:14:34Z" finished-at="2019-06-29T14:14:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.EncrptionDecryption.encrptionDecryption(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6e76c502]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:34Z" finished-at="2019-06-29T14:14:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_EncrptionDecryption_invalid_data_diff in encrypt and decrypt status=SUCCESS method=EncrptionDecryption.encrptionDecryption(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="encrptionDecryption(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="kernel_EncrptionDecryption_invalid_data_encryption" duration-ms="291" started-at="2019-06-29T14:14:34Z" data-provider="fetchData" finished-at="2019-06-29T14:14:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_data_encryption]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_EncrptionDecryption_invalid_data_encryption -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:14:35Z" finished-at="2019-06-29T14:14:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.EncrptionDecryption.encrptionDecryption(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5e4c26a1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:35Z" finished-at="2019-06-29T14:14:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_EncrptionDecryption_invalid_data_encryption status=SUCCESS method=EncrptionDecryption.encrptionDecryption(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="encrptionDecryption(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="kernel_EncrptionDecryption_invalid_diff_timeStamp before the encrypt timeStamp" duration-ms="760" started-at="2019-06-29T14:14:35Z" data-provider="fetchData" finished-at="2019-06-29T14:14:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_diff_timeStamp before the encrypt timeStamp]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_EncrptionDecryption_invalid_diff_timeStamp before the encrypt timeStamp -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:35Z" finished-at="2019-06-29T14:14:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_EncrptionDecryption_invalid_diff_timeStamp before the encrypt timeStamp status=SUCCESS method=EncrptionDecryption.encrptionDecryption(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:35Z" finished-at="2019-06-29T14:14:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.EncrptionDecryption.encrptionDecryption(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6de6baf6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="encrptionDecryption(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="kernel_EncrptionDecryption_invalid_referenceId_encryption" duration-ms="967" started-at="2019-06-29T14:14:35Z" data-provider="fetchData" finished-at="2019-06-29T14:14:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_referenceId_encryption]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_EncrptionDecryption_invalid_referenceId_encryption -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:36Z" finished-at="2019-06-29T14:14:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_EncrptionDecryption_invalid_referenceId_encryption status=SUCCESS method=EncrptionDecryption.encrptionDecryption(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:14:36Z" finished-at="2019-06-29T14:14:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.EncrptionDecryption.encrptionDecryption(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@135a2de7]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="encrptionDecryption(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="kernel_EncrptionDecryption_invalid_refId_diff in encrypt and decrypt" duration-ms="740" started-at="2019-06-29T14:14:36Z" data-provider="fetchData" finished-at="2019-06-29T14:14:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_refId_diff in encrypt and decrypt]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_EncrptionDecryption_invalid_refId_diff in encrypt and decrypt -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:37Z" finished-at="2019-06-29T14:14:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_EncrptionDecryption_invalid_refId_diff in encrypt and decrypt status=SUCCESS method=EncrptionDecryption.encrptionDecryption(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:14:37Z" finished-at="2019-06-29T14:14:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.EncrptionDecryption.encrptionDecryption(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@4b5ca45b]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="encrptionDecryption(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="kernel_EncrptionDecryption_invalid_timeStamp_encryption" duration-ms="296" started-at="2019-06-29T14:14:37Z" data-provider="fetchData" finished-at="2019-06-29T14:14:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_timeStamp_encryption]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_EncrptionDecryption_invalid_timeStamp_encryption -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:37Z" finished-at="2019-06-29T14:14:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_EncrptionDecryption_invalid_timeStamp_encryption status=SUCCESS method=EncrptionDecryption.encrptionDecryption(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:14:37Z" finished-at="2019-06-29T14:14:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.EncrptionDecryption.encrptionDecryption(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@749afabf]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="encrptionDecryption(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" duration-ms="810" started-at="2019-06-29T14:14:37Z" data-provider="fetchData" finished-at="2019-06-29T14:14:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[smoke_diff_timeStamp_after the encrypt timeStamp]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be]" test-instance-name="kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:38Z" finished-at="2019-06-29T14:14:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_EncrptionDecryption_smoke_diff_timeStamp_after the encrypt timeStamp status=SUCCESS method=EncrptionDecryption.encrptionDecryption(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.EncrptionDecryption@36f0f1be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.EncrptionDecryption -->
      <class name="io.mosip.kernel.tests.FetchDevice">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchDevice@64c87930]" test-instance-name="kernel_FetchDevice_invalid_languagecode_unexisting_with_deviceType" name="getTestCaseName" is-config="true" duration-ms="247" started-at="2019-06-29T14:15:11Z" finished-at="2019-06-29T14:15:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchDevice.fetchDevice(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1e35c3ff]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchDevice(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDevice@64c87930]" test-instance-name="kernel_FetchDevice_invalid_languagecode_unexisting_with_deviceType" name="kernel_FetchDevice_allValid_smoke_with_lang" duration-ms="15392" started-at="2019-06-29T14:15:11Z" data-provider="fetchData" finished-at="2019-06-29T14:15:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke_with_lang]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchDevice_allValid_smoke_with_lang -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchDevice@64c87930]" test-instance-name="kernel_FetchDevice_invalid_languagecode_unexisting_with_deviceType" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:15:26Z" finished-at="2019-06-29T14:15:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchDevice_allValid_smoke_with_lang status=SUCCESS method=FetchDevice.fetchDevice(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDevice@64c87930] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchDevice@64c87930]" test-instance-name="kernel_FetchDevice_invalid_languagecode_unexisting_with_deviceType" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:15:26Z" finished-at="2019-06-29T14:15:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchDevice.fetchDevice(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@3f7665c5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchDevice(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDevice@64c87930]" test-instance-name="kernel_FetchDevice_invalid_languagecode_unexisting_with_deviceType" name="kernel_FetchDevice_allValid_smoke_with_lang_and_deviceType" duration-ms="13679" started-at="2019-06-29T14:15:26Z" data-provider="fetchData" finished-at="2019-06-29T14:15:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke_with_lang_and_deviceType]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchDevice_allValid_smoke_with_lang_and_deviceType -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchDevice@64c87930]" test-instance-name="kernel_FetchDevice_invalid_languagecode_unexisting_with_deviceType" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:15:40Z" finished-at="2019-06-29T14:15:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchDevice_allValid_smoke_with_lang_and_deviceType status=SUCCESS method=FetchDevice.fetchDevice(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDevice@64c87930] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchDevice@64c87930]" test-instance-name="kernel_FetchDevice_invalid_languagecode_unexisting_with_deviceType" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:15:40Z" finished-at="2019-06-29T14:15:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchDevice.fetchDevice(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@193c3354]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchDevice(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDevice@64c87930]" test-instance-name="kernel_FetchDevice_invalid_languagecode_unexisting_with_deviceType" name="kernel_FetchDevice_invalid_deviceType_unexisting" duration-ms="305" started-at="2019-06-29T14:15:40Z" data-provider="fetchData" finished-at="2019-06-29T14:15:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_deviceType_unexisting]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchDevice_invalid_deviceType_unexisting -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchDevice@64c87930]" test-instance-name="kernel_FetchDevice_invalid_languagecode_unexisting_with_deviceType" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:15:40Z" finished-at="2019-06-29T14:15:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchDevice_invalid_deviceType_unexisting status=SUCCESS method=FetchDevice.fetchDevice(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDevice@64c87930] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchDevice@64c87930]" test-instance-name="kernel_FetchDevice_invalid_languagecode_unexisting_with_deviceType" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:15:40Z" finished-at="2019-06-29T14:15:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchDevice.fetchDevice(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@4cf52777]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchDevice(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDevice@64c87930]" test-instance-name="kernel_FetchDevice_invalid_languagecode_unexisting_with_deviceType" name="kernel_FetchDevice_invalid_languagecode_blank_with_deviceType" duration-ms="294" started-at="2019-06-29T14:15:40Z" data-provider="fetchData" finished-at="2019-06-29T14:15:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_languagecode_blank_with_deviceType]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchDevice_invalid_languagecode_blank_with_deviceType -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchDevice@64c87930]" test-instance-name="kernel_FetchDevice_invalid_languagecode_unexisting_with_deviceType" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:15:40Z" finished-at="2019-06-29T14:15:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchDevice_invalid_languagecode_blank_with_deviceType status=SUCCESS method=FetchDevice.fetchDevice(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDevice@64c87930] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchDevice@64c87930]" test-instance-name="kernel_FetchDevice_invalid_languagecode_unexisting_with_deviceType" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:15:40Z" finished-at="2019-06-29T14:15:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchDevice.fetchDevice(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7cef2f2d]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchDevice(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDevice@64c87930]" test-instance-name="kernel_FetchDevice_invalid_languagecode_unexisting_with_deviceType" name="kernel_FetchDevice_invalid_languagecode_unexisting" duration-ms="290" started-at="2019-06-29T14:15:40Z" data-provider="fetchData" finished-at="2019-06-29T14:15:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_languagecode_unexisting]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchDevice_invalid_languagecode_unexisting -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchDevice@64c87930]" test-instance-name="kernel_FetchDevice_invalid_languagecode_unexisting_with_deviceType" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:15:41Z" finished-at="2019-06-29T14:15:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchDevice_invalid_languagecode_unexisting status=SUCCESS method=FetchDevice.fetchDevice(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDevice@64c87930] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchDevice@64c87930]" test-instance-name="kernel_FetchDevice_invalid_languagecode_unexisting_with_deviceType" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:15:41Z" finished-at="2019-06-29T14:15:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchDevice.fetchDevice(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@703b2538]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchDevice(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDevice@64c87930]" test-instance-name="kernel_FetchDevice_invalid_languagecode_unexisting_with_deviceType" name="kernel_FetchDevice_invalid_languagecode_unexisting_with_deviceType" duration-ms="296" started-at="2019-06-29T14:15:41Z" data-provider="fetchData" finished-at="2019-06-29T14:15:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_languagecode_unexisting_with_deviceType]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchDevice_invalid_languagecode_unexisting_with_deviceType -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchDevice@64c87930]" test-instance-name="kernel_FetchDevice_invalid_languagecode_unexisting_with_deviceType" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:15:41Z" finished-at="2019-06-29T14:15:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchDevice_invalid_languagecode_unexisting_with_deviceType status=SUCCESS method=FetchDevice.fetchDevice(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDevice@64c87930] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.FetchDevice -->
      <class name="io.mosip.kernel.tests.FetchDeviceSpec">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchDeviceSpec@400cff1a]" test-instance-name="kernel_FetchDeviceSpec_invalid_langcode_unexisting_with_deviceType" name="getTestCaseName" is-config="true" duration-ms="257" started-at="2019-06-29T14:15:41Z" finished-at="2019-06-29T14:15:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchDeviceSpec.fetchDeviceSpec(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@8e51ef8]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchDeviceSpec(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDeviceSpec@400cff1a]" test-instance-name="kernel_FetchDeviceSpec_invalid_langcode_unexisting_with_deviceType" name="kernel_FetchDeviceSpec_allValid_smoke_with_lang" duration-ms="13907" started-at="2019-06-29T14:15:41Z" data-provider="fetchData" finished-at="2019-06-29T14:15:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke_with_lang]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchDeviceSpec_allValid_smoke_with_lang -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchDeviceSpec@400cff1a]" test-instance-name="kernel_FetchDeviceSpec_invalid_langcode_unexisting_with_deviceType" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:15:55Z" finished-at="2019-06-29T14:15:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchDeviceSpec_allValid_smoke_with_lang status=SUCCESS method=FetchDeviceSpec.fetchDeviceSpec(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDeviceSpec@400cff1a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchDeviceSpec@400cff1a]" test-instance-name="kernel_FetchDeviceSpec_invalid_langcode_unexisting_with_deviceType" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:15:55Z" finished-at="2019-06-29T14:15:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchDeviceSpec.fetchDeviceSpec(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6d4e4e0c]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchDeviceSpec(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDeviceSpec@400cff1a]" test-instance-name="kernel_FetchDeviceSpec_invalid_langcode_unexisting_with_deviceType" name="kernel_FetchDeviceSpec_allValid_smoke_with_lang_and_deviceType" duration-ms="15180" started-at="2019-06-29T14:15:55Z" data-provider="fetchData" finished-at="2019-06-29T14:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke_with_lang_and_deviceType]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchDeviceSpec_allValid_smoke_with_lang_and_deviceType -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchDeviceSpec@400cff1a]" test-instance-name="kernel_FetchDeviceSpec_invalid_langcode_unexisting_with_deviceType" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:16:10Z" finished-at="2019-06-29T14:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchDeviceSpec.fetchDeviceSpec(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@685d92cf]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchDeviceSpec@400cff1a]" test-instance-name="kernel_FetchDeviceSpec_invalid_langcode_unexisting_with_deviceType" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:16:10Z" finished-at="2019-06-29T14:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchDeviceSpec_allValid_smoke_with_lang_and_deviceType status=SUCCESS method=FetchDeviceSpec.fetchDeviceSpec(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDeviceSpec@400cff1a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="fetchDeviceSpec(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDeviceSpec@400cff1a]" test-instance-name="kernel_FetchDeviceSpec_invalid_langcode_unexisting_with_deviceType" name="kernel_FetchDeviceSpec_invalid_devicetypecode_unexisting" duration-ms="299" started-at="2019-06-29T14:16:10Z" data-provider="fetchData" finished-at="2019-06-29T14:16:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_devicetypecode_unexisting]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchDeviceSpec_invalid_devicetypecode_unexisting -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchDeviceSpec@400cff1a]" test-instance-name="kernel_FetchDeviceSpec_invalid_langcode_unexisting_with_deviceType" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:16:11Z" finished-at="2019-06-29T14:16:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchDeviceSpec_invalid_devicetypecode_unexisting status=SUCCESS method=FetchDeviceSpec.fetchDeviceSpec(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDeviceSpec@400cff1a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchDeviceSpec@400cff1a]" test-instance-name="kernel_FetchDeviceSpec_invalid_langcode_unexisting_with_deviceType" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:16:11Z" finished-at="2019-06-29T14:16:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchDeviceSpec.fetchDeviceSpec(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@41e67819]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchDeviceSpec(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDeviceSpec@400cff1a]" test-instance-name="kernel_FetchDeviceSpec_invalid_langcode_unexisting_with_deviceType" name="kernel_FetchDeviceSpec_invalid_langcode_blank_with_deviceType" duration-ms="310" started-at="2019-06-29T14:16:11Z" data-provider="fetchData" finished-at="2019-06-29T14:16:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode_blank_with_deviceType]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchDeviceSpec_invalid_langcode_blank_with_deviceType -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchDeviceSpec@400cff1a]" test-instance-name="kernel_FetchDeviceSpec_invalid_langcode_unexisting_with_deviceType" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:16:11Z" finished-at="2019-06-29T14:16:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchDeviceSpec_invalid_langcode_blank_with_deviceType status=SUCCESS method=FetchDeviceSpec.fetchDeviceSpec(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDeviceSpec@400cff1a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchDeviceSpec@400cff1a]" test-instance-name="kernel_FetchDeviceSpec_invalid_langcode_unexisting_with_deviceType" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:16:11Z" finished-at="2019-06-29T14:16:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchDeviceSpec.fetchDeviceSpec(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@61d4bc03]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchDeviceSpec(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDeviceSpec@400cff1a]" test-instance-name="kernel_FetchDeviceSpec_invalid_langcode_unexisting_with_deviceType" name="kernel_FetchDeviceSpec_invalid_langcode_unexisting" duration-ms="272" started-at="2019-06-29T14:16:11Z" data-provider="fetchData" finished-at="2019-06-29T14:16:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode_unexisting]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchDeviceSpec_invalid_langcode_unexisting -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchDeviceSpec@400cff1a]" test-instance-name="kernel_FetchDeviceSpec_invalid_langcode_unexisting_with_deviceType" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:16:11Z" finished-at="2019-06-29T14:16:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchDeviceSpec_invalid_langcode_unexisting status=SUCCESS method=FetchDeviceSpec.fetchDeviceSpec(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDeviceSpec@400cff1a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchDeviceSpec@400cff1a]" test-instance-name="kernel_FetchDeviceSpec_invalid_langcode_unexisting_with_deviceType" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:16:11Z" finished-at="2019-06-29T14:16:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchDeviceSpec.fetchDeviceSpec(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7ef5a01b]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchDeviceSpec(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDeviceSpec@400cff1a]" test-instance-name="kernel_FetchDeviceSpec_invalid_langcode_unexisting_with_deviceType" name="kernel_FetchDeviceSpec_invalid_langcode_unexisting_with_deviceType" duration-ms="270" started-at="2019-06-29T14:16:11Z" data-provider="fetchData" finished-at="2019-06-29T14:16:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode_unexisting_with_deviceType]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchDeviceSpec_invalid_langcode_unexisting_with_deviceType -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchDeviceSpec@400cff1a]" test-instance-name="kernel_FetchDeviceSpec_invalid_langcode_unexisting_with_deviceType" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:16:12Z" finished-at="2019-06-29T14:16:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchDeviceSpec_invalid_langcode_unexisting_with_deviceType status=SUCCESS method=FetchDeviceSpec.fetchDeviceSpec(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchDeviceSpec@400cff1a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.FetchDeviceSpec -->
      <class name="io.mosip.kernel.tests.OTP">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="getTestCaseName" is-config="true" duration-ms="235" started-at="2019-06-29T14:23:11Z" finished-at="2019-06-29T14:23:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.OTP.otp(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@58ca3439]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="otp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="kernel_OTP_allValid_smoke_generation" duration-ms="322" started-at="2019-06-29T14:23:11Z" data-provider="fetchData" finished-at="2019-06-29T14:23:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke_generation]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_OTP_allValid_smoke_generation -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:11Z" finished-at="2019-06-29T14:23:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_OTP_allValid_smoke_generation status=SUCCESS method=OTP.otp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:23:11Z" finished-at="2019-06-29T14:23:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.OTP.otp(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@da2dbd0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="otp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="kernel_OTP_allValid_smoke_validation" duration-ms="629" started-at="2019-06-29T14:23:11Z" data-provider="fetchData" finished-at="2019-06-29T14:23:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke_validation]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_OTP_allValid_smoke_validation -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:23:12Z" finished-at="2019-06-29T14:23:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.OTP.otp(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@50c43f7d]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:12Z" finished-at="2019-06-29T14:23:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_OTP_allValid_smoke_validation status=SUCCESS method=OTP.otp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="otp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="kernel_OTP_invalid_KEY_blocked" duration-ms="3961" started-at="2019-06-29T14:23:12Z" data-provider="fetchData" finished-at="2019-06-29T14:23:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_KEY_blocked]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_OTP_invalid_KEY_blocked -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:16Z" finished-at="2019-06-29T14:23:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_OTP_invalid_KEY_blocked status=SUCCESS method=OTP.otp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:23:16Z" finished-at="2019-06-29T14:23:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.OTP.otp(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@4615c513]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="otp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="kernel_OTP_invalid_KEY_Empty" duration-ms="590" started-at="2019-06-29T14:23:16Z" data-provider="fetchData" finished-at="2019-06-29T14:23:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_KEY_Empty]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_OTP_invalid_KEY_Empty -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:16Z" finished-at="2019-06-29T14:23:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_OTP_invalid_KEY_Empty status=SUCCESS method=OTP.otp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:23:16Z" finished-at="2019-06-29T14:23:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.OTP.otp(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@4f774a14]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="otp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="kernel_OTP_invalid_KEY_Length2" duration-ms="294" started-at="2019-06-29T14:23:16Z" data-provider="fetchData" finished-at="2019-06-29T14:23:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_KEY_Length2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_OTP_invalid_KEY_Length2 -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:23:17Z" finished-at="2019-06-29T14:23:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.OTP.otp(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@54907471]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:17Z" finished-at="2019-06-29T14:23:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_OTP_invalid_KEY_Length2 status=SUCCESS method=OTP.otp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="otp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="kernel_OTP_invalid_key_Length65" duration-ms="301" started-at="2019-06-29T14:23:17Z" data-provider="fetchData" finished-at="2019-06-29T14:23:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_key_Length65]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_OTP_invalid_key_Length65 -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:23:17Z" finished-at="2019-06-29T14:23:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.OTP.otp(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@255e9649]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:17Z" finished-at="2019-06-29T14:23:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_OTP_invalid_key_Length65 status=SUCCESS method=OTP.otp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="otp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="kernel_OTP_invalid_KEY_otherKey" duration-ms="722" started-at="2019-06-29T14:23:17Z" data-provider="fetchData" finished-at="2019-06-29T14:23:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_KEY_otherKey]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_OTP_invalid_KEY_otherKey -->
        <test-method status="PASS" signature="otp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="kernel_OTP_invalid_OTP_alphanumeric" duration-ms="611" started-at="2019-06-29T14:23:18Z" data-provider="fetchData" finished-at="2019-06-29T14:23:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_OTP_alphanumeric]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_OTP_invalid_OTP_alphanumeric -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:18Z" finished-at="2019-06-29T14:23:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.OTP.otp(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@4d0be2ac]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:18Z" finished-at="2019-06-29T14:23:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_OTP_invalid_KEY_otherKey status=SUCCESS method=OTP.otp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:18Z" finished-at="2019-06-29T14:23:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_OTP_invalid_OTP_alphanumeric status=SUCCESS method=OTP.otp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:23:18Z" finished-at="2019-06-29T14:23:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.OTP.otp(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@385936f3]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="otp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="kernel_OTP_invalid_OTP_blocks_user" duration-ms="3656" started-at="2019-06-29T14:23:18Z" data-provider="fetchData" finished-at="2019-06-29T14:23:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_OTP_blocks_user]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_OTP_invalid_OTP_blocks_user -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:23:22Z" finished-at="2019-06-29T14:23:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.OTP.otp(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6fbdee75]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:22Z" finished-at="2019-06-29T14:23:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_OTP_invalid_OTP_blocks_user status=SUCCESS method=OTP.otp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="otp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="kernel_OTP_invalid_OTP_empty" duration-ms="624" started-at="2019-06-29T14:23:22Z" data-provider="fetchData" finished-at="2019-06-29T14:23:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_OTP_empty]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_OTP_invalid_OTP_empty -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:23Z" finished-at="2019-06-29T14:23:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_OTP_invalid_OTP_empty status=SUCCESS method=OTP.otp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:23:23Z" finished-at="2019-06-29T14:23:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.OTP.otp(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@3e00d115]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="otp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="kernel_OTP_invalid_OTP_expired" duration-ms="181961" started-at="2019-06-29T14:23:23Z" data-provider="fetchData" finished-at="2019-06-29T14:26:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_OTP_expired]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_OTP_invalid_OTP_expired -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:25Z" finished-at="2019-06-29T14:26:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_OTP_invalid_OTP_expired status=SUCCESS method=OTP.otp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:25Z" finished-at="2019-06-29T14:26:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.OTP.otp(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2c8c4afb]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="otp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="kernel_OTP_invalid_OTP_incorrect" duration-ms="640" started-at="2019-06-29T14:26:25Z" data-provider="fetchData" finished-at="2019-06-29T14:26:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_OTP_incorrect]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_OTP_invalid_OTP_incorrect -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40]" test-instance-name="kernel_OTP_invalid_OTP_incorrect" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:25Z" finished-at="2019-06-29T14:26:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_OTP_invalid_OTP_incorrect status=SUCCESS method=OTP.otp(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.OTP@7d68ef40] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.OTP -->
      <class name="io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2]" test-instance-name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" name="getTestCaseName" is-config="true" duration-ms="11091" started-at="2019-06-29T14:22:14Z" finished-at="2019-06-29T14:22:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode.getImmediateChildrenByLocCodeAndLangCode(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5548d5c4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getImmediateChildrenByLocCodeAndLangCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2]" test-instance-name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_By_city" duration-ms="304" started-at="2019-06-29T14:22:25Z" data-provider="GetImmediateChildrenByLocCodeAndLangCode" finished-at="2019-06-29T14:22:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetImmediateChildrenByLocCodeAndLangCode_By_city]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetImmediateChildrenByLocCodeAndLangCode_By_city -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2]" test-instance-name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:25Z" finished-at="2019-06-29T14:22:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode.getImmediateChildrenByLocCodeAndLangCode(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7e95bbbb]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2]" test-instance-name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:25Z" finished-at="2019-06-29T14:22:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetImmediateChildrenByLocCodeAndLangCode_By_city status=SUCCESS method=GetImmediateChildrenByLocCodeAndLangCode.getImmediateChildrenByLocCodeAndLangCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getImmediateChildrenByLocCodeAndLangCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2]" test-instance-name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_By_country" duration-ms="276" started-at="2019-06-29T14:22:25Z" data-provider="GetImmediateChildrenByLocCodeAndLangCode" finished-at="2019-06-29T14:22:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetImmediateChildrenByLocCodeAndLangCode_By_country]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetImmediateChildrenByLocCodeAndLangCode_By_country -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2]" test-instance-name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:26Z" finished-at="2019-06-29T14:22:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetImmediateChildrenByLocCodeAndLangCode_By_country status=SUCCESS method=GetImmediateChildrenByLocCodeAndLangCode.getImmediateChildrenByLocCodeAndLangCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2]" test-instance-name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:26Z" finished-at="2019-06-29T14:22:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode.getImmediateChildrenByLocCodeAndLangCode(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@48562206]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getImmediateChildrenByLocCodeAndLangCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2]" test-instance-name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_By_localAuthority" duration-ms="290" started-at="2019-06-29T14:22:26Z" data-provider="GetImmediateChildrenByLocCodeAndLangCode" finished-at="2019-06-29T14:22:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetImmediateChildrenByLocCodeAndLangCode_By_localAuthority]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetImmediateChildrenByLocCodeAndLangCode_By_localAuthority -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2]" test-instance-name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:26Z" finished-at="2019-06-29T14:22:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode.getImmediateChildrenByLocCodeAndLangCode(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@700df0dd]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2]" test-instance-name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:26Z" finished-at="2019-06-29T14:22:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetImmediateChildrenByLocCodeAndLangCode_By_localAuthority status=SUCCESS method=GetImmediateChildrenByLocCodeAndLangCode.getImmediateChildrenByLocCodeAndLangCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getImmediateChildrenByLocCodeAndLangCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2]" test-instance-name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_By_provinace" duration-ms="275" started-at="2019-06-29T14:22:26Z" data-provider="GetImmediateChildrenByLocCodeAndLangCode" finished-at="2019-06-29T14:22:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetImmediateChildrenByLocCodeAndLangCode_By_provinace]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetImmediateChildrenByLocCodeAndLangCode_By_provinace -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2]" test-instance-name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:26Z" finished-at="2019-06-29T14:22:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetImmediateChildrenByLocCodeAndLangCode_By_provinace status=SUCCESS method=GetImmediateChildrenByLocCodeAndLangCode.getImmediateChildrenByLocCodeAndLangCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2]" test-instance-name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:26Z" finished-at="2019-06-29T14:22:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode.getImmediateChildrenByLocCodeAndLangCode(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@63f8fded]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getImmediateChildrenByLocCodeAndLangCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2]" test-instance-name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_By_region" duration-ms="282" started-at="2019-06-29T14:22:26Z" data-provider="GetImmediateChildrenByLocCodeAndLangCode" finished-at="2019-06-29T14:22:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetImmediateChildrenByLocCodeAndLangCode_By_region]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetImmediateChildrenByLocCodeAndLangCode_By_region -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2]" test-instance-name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:27Z" finished-at="2019-06-29T14:22:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode.getImmediateChildrenByLocCodeAndLangCode(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@30e3ca4a]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2]" test-instance-name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:27Z" finished-at="2019-06-29T14:22:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetImmediateChildrenByLocCodeAndLangCode_By_region status=SUCCESS method=GetImmediateChildrenByLocCodeAndLangCode.getImmediateChildrenByLocCodeAndLangCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getImmediateChildrenByLocCodeAndLangCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2]" test-instance-name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_invalid_langcode" duration-ms="276" started-at="2019-06-29T14:22:27Z" data-provider="GetImmediateChildrenByLocCodeAndLangCode" finished-at="2019-06-29T14:22:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetImmediateChildrenByLocCodeAndLangCode_invalid_langcode]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetImmediateChildrenByLocCodeAndLangCode_invalid_langcode -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2]" test-instance-name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:27Z" finished-at="2019-06-29T14:22:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetImmediateChildrenByLocCodeAndLangCode_invalid_langcode status=SUCCESS method=GetImmediateChildrenByLocCodeAndLangCode.getImmediateChildrenByLocCodeAndLangCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2]" test-instance-name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:27Z" finished-at="2019-06-29T14:22:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode.getImmediateChildrenByLocCodeAndLangCode(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@49dc8842]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getImmediateChildrenByLocCodeAndLangCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2]" test-instance-name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_invalid_locationcode" duration-ms="287" started-at="2019-06-29T14:22:27Z" data-provider="GetImmediateChildrenByLocCodeAndLangCode" finished-at="2019-06-29T14:22:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetImmediateChildrenByLocCodeAndLangCode_invalid_locationcode]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetImmediateChildrenByLocCodeAndLangCode_invalid_locationcode -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2]" test-instance-name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:27Z" finished-at="2019-06-29T14:22:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetImmediateChildrenByLocCodeAndLangCode_invalid_locationcode status=SUCCESS method=GetImmediateChildrenByLocCodeAndLangCode.getImmediateChildrenByLocCodeAndLangCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2]" test-instance-name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:27Z" finished-at="2019-06-29T14:22:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode.getImmediateChildrenByLocCodeAndLangCode(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@56c802bc]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getImmediateChildrenByLocCodeAndLangCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2]" test-instance-name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_response_time" duration-ms="290" started-at="2019-06-29T14:22:27Z" data-provider="GetImmediateChildrenByLocCodeAndLangCode" finished-at="2019-06-29T14:22:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetImmediateChildrenByLocCodeAndLangCode_response_time]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetImmediateChildrenByLocCodeAndLangCode_response_time -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2]" test-instance-name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:27Z" finished-at="2019-06-29T14:22:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetImmediateChildrenByLocCodeAndLangCode_response_time status=SUCCESS method=GetImmediateChildrenByLocCodeAndLangCode.getImmediateChildrenByLocCodeAndLangCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2]" test-instance-name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:22:27Z" finished-at="2019-06-29T14:22:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode.getImmediateChildrenByLocCodeAndLangCode(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@72fb8a1d]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getImmediateChildrenByLocCodeAndLangCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2]" test-instance-name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" duration-ms="15302" started-at="2019-06-29T14:22:27Z" data-provider="GetImmediateChildrenByLocCodeAndLangCode" finished-at="2019-06-29T14:22:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2]" test-instance-name="Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:43Z" finished-at="2019-06-29T14:22:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetImmediateChildrenByLocCodeAndLangCode_smoke status=SUCCESS method=GetImmediateChildrenByLocCodeAndLangCode.getImmediateChildrenByLocCodeAndLangCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode@341b80b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.GetImmediateChildrenByLocCodeAndLangCode -->
      <class name="io.mosip.kernel.tests.FetchRegCentHistory">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHistory@4ae3c1cd]" test-instance-name="kernel_FetchRegCentHistory_invalid_registrationCenterId_unexisting" name="getTestCaseName" is-config="true" duration-ms="291" started-at="2019-06-29T14:19:24Z" finished-at="2019-06-29T14:19:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCentHistory.fetchRegCentHistory(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@232a935]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegCentHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHistory@4ae3c1cd]" test-instance-name="kernel_FetchRegCentHistory_invalid_registrationCenterId_unexisting" name="kernel_FetchRegCentHistory_allValid_smoke" duration-ms="13766" started-at="2019-06-29T14:19:25Z" data-provider="fetchData" finished-at="2019-06-29T14:19:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCentHistory_allValid_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHistory@4ae3c1cd]" test-instance-name="kernel_FetchRegCentHistory_invalid_registrationCenterId_unexisting" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:19:38Z" finished-at="2019-06-29T14:19:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCentHistory_allValid_smoke status=SUCCESS method=FetchRegCentHistory.fetchRegCentHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHistory@4ae3c1cd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHistory@4ae3c1cd]" test-instance-name="kernel_FetchRegCentHistory_invalid_registrationCenterId_unexisting" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:19:38Z" finished-at="2019-06-29T14:19:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCentHistory.fetchRegCentHistory(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1414800e]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegCentHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHistory@4ae3c1cd]" test-instance-name="kernel_FetchRegCentHistory_invalid_registrationCenterId_unexisting" name="kernel_FetchRegCentHistory_invalid_effectiveDate_before_effective_date" duration-ms="295" started-at="2019-06-29T14:19:38Z" data-provider="fetchData" finished-at="2019-06-29T14:19:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_effectiveDate_before_effective_date]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCentHistory_invalid_effectiveDate_before_effective_date -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHistory@4ae3c1cd]" test-instance-name="kernel_FetchRegCentHistory_invalid_registrationCenterId_unexisting" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:19:39Z" finished-at="2019-06-29T14:19:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCentHistory_invalid_effectiveDate_before_effective_date status=SUCCESS method=FetchRegCentHistory.fetchRegCentHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHistory@4ae3c1cd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHistory@4ae3c1cd]" test-instance-name="kernel_FetchRegCentHistory_invalid_registrationCenterId_unexisting" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:19:39Z" finished-at="2019-06-29T14:19:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCentHistory.fetchRegCentHistory(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2a3f74fd]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegCentHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHistory@4ae3c1cd]" test-instance-name="kernel_FetchRegCentHistory_invalid_registrationCenterId_unexisting" name="kernel_FetchRegCentHistory_invalid_effectiveDate_invalid Date format" duration-ms="295" started-at="2019-06-29T14:19:39Z" data-provider="fetchData" finished-at="2019-06-29T14:19:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_effectiveDate_invalid Date format]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCentHistory_invalid_effectiveDate_invalid Date format -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHistory@4ae3c1cd]" test-instance-name="kernel_FetchRegCentHistory_invalid_registrationCenterId_unexisting" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:19:39Z" finished-at="2019-06-29T14:19:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCentHistory_invalid_effectiveDate_invalid Date format status=SUCCESS method=FetchRegCentHistory.fetchRegCentHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHistory@4ae3c1cd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHistory@4ae3c1cd]" test-instance-name="kernel_FetchRegCentHistory_invalid_registrationCenterId_unexisting" name="getTestCaseName" is-config="true" duration-ms="4" started-at="2019-06-29T14:19:39Z" finished-at="2019-06-29T14:19:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCentHistory.fetchRegCentHistory(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@67131e6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegCentHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHistory@4ae3c1cd]" test-instance-name="kernel_FetchRegCentHistory_invalid_registrationCenterId_unexisting" name="kernel_FetchRegCentHistory_invalid_langcode_unexisting in DB" duration-ms="290" started-at="2019-06-29T14:19:39Z" data-provider="fetchData" finished-at="2019-06-29T14:19:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode_unexisting in DB]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCentHistory_invalid_langcode_unexisting in DB -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHistory@4ae3c1cd]" test-instance-name="kernel_FetchRegCentHistory_invalid_registrationCenterId_unexisting" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:19:39Z" finished-at="2019-06-29T14:19:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCentHistory_invalid_langcode_unexisting in DB status=SUCCESS method=FetchRegCentHistory.fetchRegCentHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHistory@4ae3c1cd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHistory@4ae3c1cd]" test-instance-name="kernel_FetchRegCentHistory_invalid_registrationCenterId_unexisting" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:19:39Z" finished-at="2019-06-29T14:19:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchRegCentHistory.fetchRegCentHistory(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@111d4b1c]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchRegCentHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHistory@4ae3c1cd]" test-instance-name="kernel_FetchRegCentHistory_invalid_registrationCenterId_unexisting" name="kernel_FetchRegCentHistory_invalid_registrationCenterId_unexisting" duration-ms="286" started-at="2019-06-29T14:19:39Z" data-provider="fetchData" finished-at="2019-06-29T14:19:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_registrationCenterId_unexisting]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchRegCentHistory_invalid_registrationCenterId_unexisting -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHistory@4ae3c1cd]" test-instance-name="kernel_FetchRegCentHistory_invalid_registrationCenterId_unexisting" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:19:40Z" finished-at="2019-06-29T14:19:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchRegCentHistory_invalid_registrationCenterId_unexisting status=SUCCESS method=FetchRegCentHistory.fetchRegCentHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchRegCentHistory@4ae3c1cd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.FetchRegCentHistory -->
      <class name="io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1]" test-instance-name="Kernel_GetRegistrationCenterDeviceHistory_updatedDate" name="getTestCaseName" is-config="true" duration-ms="248" started-at="2019-06-29T14:22:54Z" finished-at="2019-06-29T14:22:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory.getRegistrationCenterDeviceHistory(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@64ed45eb]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getRegistrationCenterDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1]" test-instance-name="Kernel_GetRegistrationCenterDeviceHistory_updatedDate" name="Kernel_GetRegistrationCenterDeviceHistory_effdatetimes_format_2" duration-ms="288" started-at="2019-06-29T14:22:54Z" data-provider="GetRegistrationCenterDeviceHistory" finished-at="2019-06-29T14:22:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetRegistrationCenterDeviceHistory_effdatetimes_format_2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetRegistrationCenterDeviceHistory_effdatetimes_format_2 -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1]" test-instance-name="Kernel_GetRegistrationCenterDeviceHistory_updatedDate" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:54Z" finished-at="2019-06-29T14:22:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetRegistrationCenterDeviceHistory_effdatetimes_format_2 status=SUCCESS method=GetRegistrationCenterDeviceHistory.getRegistrationCenterDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1]" test-instance-name="Kernel_GetRegistrationCenterDeviceHistory_updatedDate" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:54Z" finished-at="2019-06-29T14:22:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory.getRegistrationCenterDeviceHistory(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@519e7396]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getRegistrationCenterDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1]" test-instance-name="Kernel_GetRegistrationCenterDeviceHistory_updatedDate" name="Kernel_GetRegistrationCenterDeviceHistory_effdatetimes_format_3" duration-ms="294" started-at="2019-06-29T14:22:54Z" data-provider="GetRegistrationCenterDeviceHistory" finished-at="2019-06-29T14:22:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetRegistrationCenterDeviceHistory_effdatetimes_format_3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetRegistrationCenterDeviceHistory_effdatetimes_format_3 -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1]" test-instance-name="Kernel_GetRegistrationCenterDeviceHistory_updatedDate" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:55Z" finished-at="2019-06-29T14:22:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetRegistrationCenterDeviceHistory_effdatetimes_format_3 status=SUCCESS method=GetRegistrationCenterDeviceHistory.getRegistrationCenterDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1]" test-instance-name="Kernel_GetRegistrationCenterDeviceHistory_updatedDate" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:55Z" finished-at="2019-06-29T14:22:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory.getRegistrationCenterDeviceHistory(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@51d84d7f]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getRegistrationCenterDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1]" test-instance-name="Kernel_GetRegistrationCenterDeviceHistory_updatedDate" name="Kernel_GetRegistrationCenterDeviceHistory_invalid_deviceid" duration-ms="276" started-at="2019-06-29T14:22:55Z" data-provider="GetRegistrationCenterDeviceHistory" finished-at="2019-06-29T14:22:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetRegistrationCenterDeviceHistory_invalid_deviceid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetRegistrationCenterDeviceHistory_invalid_deviceid -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1]" test-instance-name="Kernel_GetRegistrationCenterDeviceHistory_updatedDate" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:22:55Z" finished-at="2019-06-29T14:22:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory.getRegistrationCenterDeviceHistory(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5a2c8199]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1]" test-instance-name="Kernel_GetRegistrationCenterDeviceHistory_updatedDate" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:55Z" finished-at="2019-06-29T14:22:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetRegistrationCenterDeviceHistory_invalid_deviceid status=SUCCESS method=GetRegistrationCenterDeviceHistory.getRegistrationCenterDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getRegistrationCenterDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1]" test-instance-name="Kernel_GetRegistrationCenterDeviceHistory_updatedDate" name="Kernel_GetRegistrationCenterDeviceHistory_invalid_effdatetimes" duration-ms="282" started-at="2019-06-29T14:22:55Z" data-provider="GetRegistrationCenterDeviceHistory" finished-at="2019-06-29T14:22:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetRegistrationCenterDeviceHistory_invalid_effdatetimes]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetRegistrationCenterDeviceHistory_invalid_effdatetimes -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1]" test-instance-name="Kernel_GetRegistrationCenterDeviceHistory_updatedDate" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:55Z" finished-at="2019-06-29T14:22:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetRegistrationCenterDeviceHistory_invalid_effdatetimes status=SUCCESS method=GetRegistrationCenterDeviceHistory.getRegistrationCenterDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1]" test-instance-name="Kernel_GetRegistrationCenterDeviceHistory_updatedDate" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:55Z" finished-at="2019-06-29T14:22:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory.getRegistrationCenterDeviceHistory(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5460452a]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getRegistrationCenterDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1]" test-instance-name="Kernel_GetRegistrationCenterDeviceHistory_updatedDate" name="Kernel_GetRegistrationCenterDeviceHistory_invalid_regcenterid" duration-ms="283" started-at="2019-06-29T14:22:55Z" data-provider="GetRegistrationCenterDeviceHistory" finished-at="2019-06-29T14:22:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetRegistrationCenterDeviceHistory_invalid_regcenterid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetRegistrationCenterDeviceHistory_invalid_regcenterid -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1]" test-instance-name="Kernel_GetRegistrationCenterDeviceHistory_updatedDate" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:22:56Z" finished-at="2019-06-29T14:22:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory.getRegistrationCenterDeviceHistory(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@76c08ef3]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1]" test-instance-name="Kernel_GetRegistrationCenterDeviceHistory_updatedDate" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:56Z" finished-at="2019-06-29T14:22:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetRegistrationCenterDeviceHistory_invalid_regcenterid status=SUCCESS method=GetRegistrationCenterDeviceHistory.getRegistrationCenterDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getRegistrationCenterDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1]" test-instance-name="Kernel_GetRegistrationCenterDeviceHistory_updatedDate" name="Kernel_GetRegistrationCenterDeviceHistory_response_time" duration-ms="288" started-at="2019-06-29T14:22:56Z" data-provider="GetRegistrationCenterDeviceHistory" finished-at="2019-06-29T14:22:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetRegistrationCenterDeviceHistory_response_time]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetRegistrationCenterDeviceHistory_response_time -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1]" test-instance-name="Kernel_GetRegistrationCenterDeviceHistory_updatedDate" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:56Z" finished-at="2019-06-29T14:22:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetRegistrationCenterDeviceHistory_response_time status=SUCCESS method=GetRegistrationCenterDeviceHistory.getRegistrationCenterDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1]" test-instance-name="Kernel_GetRegistrationCenterDeviceHistory_updatedDate" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:56Z" finished-at="2019-06-29T14:22:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory.getRegistrationCenterDeviceHistory(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@656096e1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getRegistrationCenterDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1]" test-instance-name="Kernel_GetRegistrationCenterDeviceHistory_updatedDate" name="Kernel_GetRegistrationCenterDeviceHistory_smoke_2" duration-ms="301" started-at="2019-06-29T14:22:56Z" data-provider="GetRegistrationCenterDeviceHistory" finished-at="2019-06-29T14:22:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetRegistrationCenterDeviceHistory_smoke_2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetRegistrationCenterDeviceHistory_smoke_2 -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1]" test-instance-name="Kernel_GetRegistrationCenterDeviceHistory_updatedDate" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:56Z" finished-at="2019-06-29T14:22:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory.getRegistrationCenterDeviceHistory(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5bfee39d]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getRegistrationCenterDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1]" test-instance-name="Kernel_GetRegistrationCenterDeviceHistory_updatedDate" name="Kernel_GetRegistrationCenterDeviceHistory_updatedDate" duration-ms="286" started-at="2019-06-29T14:22:56Z" data-provider="GetRegistrationCenterDeviceHistory" finished-at="2019-06-29T14:22:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetRegistrationCenterDeviceHistory_updatedDate]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetRegistrationCenterDeviceHistory_updatedDate -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1]" test-instance-name="Kernel_GetRegistrationCenterDeviceHistory_updatedDate" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:56Z" finished-at="2019-06-29T14:22:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetRegistrationCenterDeviceHistory_smoke_2 status=SUCCESS method=GetRegistrationCenterDeviceHistory.getRegistrationCenterDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1]" test-instance-name="Kernel_GetRegistrationCenterDeviceHistory_updatedDate" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:56Z" finished-at="2019-06-29T14:22:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetRegistrationCenterDeviceHistory_updatedDate status=SUCCESS method=GetRegistrationCenterDeviceHistory.getRegistrationCenterDeviceHistory(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory@40e6dfe1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.GetRegistrationCenterDeviceHistory -->
      <class name="io.mosip.kernel.tests.FetchGenderType">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchGenderType@75f9eccc]" test-instance-name="kernel_FetchGenderType_invalid_langcode_unexisting" name="getTestCaseName" is-config="true" duration-ms="233" started-at="2019-06-29T14:16:43Z" finished-at="2019-06-29T14:16:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchGenderType.fetchGenderType(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2e93e779]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchGenderType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchGenderType@75f9eccc]" test-instance-name="kernel_FetchGenderType_invalid_langcode_unexisting" name="kernel_FetchGenderType_allValid_smoke_get" duration-ms="15440" started-at="2019-06-29T14:16:43Z" data-provider="fetchData" finished-at="2019-06-29T14:16:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke_get]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchGenderType_allValid_smoke_get -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchGenderType@75f9eccc]" test-instance-name="kernel_FetchGenderType_invalid_langcode_unexisting" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:16:58Z" finished-at="2019-06-29T14:16:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchGenderType.fetchGenderType(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@413195dc]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchGenderType@75f9eccc]" test-instance-name="kernel_FetchGenderType_invalid_langcode_unexisting" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:16:58Z" finished-at="2019-06-29T14:16:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchGenderType_allValid_smoke_get status=SUCCESS method=FetchGenderType.fetchGenderType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchGenderType@75f9eccc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="fetchGenderType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchGenderType@75f9eccc]" test-instance-name="kernel_FetchGenderType_invalid_langcode_unexisting" name="kernel_FetchGenderType_allValid_smoke_lang" duration-ms="15312" started-at="2019-06-29T14:16:58Z" data-provider="fetchData" finished-at="2019-06-29T14:17:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allValid_smoke_lang]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchGenderType_allValid_smoke_lang -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchGenderType@75f9eccc]" test-instance-name="kernel_FetchGenderType_invalid_langcode_unexisting" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:17:14Z" finished-at="2019-06-29T14:17:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchGenderType_allValid_smoke_lang status=SUCCESS method=FetchGenderType.fetchGenderType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchGenderType@75f9eccc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="fetchGenderType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchGenderType@75f9eccc]" test-instance-name="kernel_FetchGenderType_invalid_langcode_unexisting" name="kernel_FetchGenderType_invalid_langcode_unexisting" duration-ms="310" started-at="2019-06-29T14:17:14Z" data-provider="fetchData" finished-at="2019-06-29T14:17:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode_unexisting]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_FetchGenderType_invalid_langcode_unexisting -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchGenderType@75f9eccc]" test-instance-name="kernel_FetchGenderType_invalid_langcode_unexisting" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:17:14Z" finished-at="2019-06-29T14:17:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchGenderType.fetchGenderType(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@230ac978]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchGenderType@75f9eccc]" test-instance-name="kernel_FetchGenderType_invalid_langcode_unexisting" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:17:14Z" finished-at="2019-06-29T14:17:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_FetchGenderType_invalid_langcode_unexisting status=SUCCESS method=FetchGenderType.fetchGenderType(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchGenderType@75f9eccc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.FetchGenderType -->
      <class name="io.mosip.kernel.tests.GetAllTemplateByTemplateTypeCode">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetAllTemplateByTemplateTypeCode@4c6e276e]" test-instance-name="kernel_GetAllTemplateByTemplateTypeCode_Kernel_GetAllTemplateByTemplateTypeCode_smoke" name="getTestCaseName" is-config="true" duration-ms="12116" started-at="2019-06-29T14:21:07Z" finished-at="2019-06-29T14:21:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetAllTemplateByTemplateTypeCode.getAllTemplateByTemplateTypeCode(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6ff6508e]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getAllTemplateByTemplateTypeCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetAllTemplateByTemplateTypeCode@4c6e276e]" test-instance-name="kernel_GetAllTemplateByTemplateTypeCode_Kernel_GetAllTemplateByTemplateTypeCode_smoke" name="kernel_GetAllTemplateByTemplateTypeCode_Kernel_GetAllTemplateByTemplateTypeCode_invalid_code" duration-ms="293" started-at="2019-06-29T14:21:19Z" data-provider="GetAllTemplateByTemplateTypeCode" finished-at="2019-06-29T14:21:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetAllTemplateByTemplateTypeCode_invalid_code]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_GetAllTemplateByTemplateTypeCode_Kernel_GetAllTemplateByTemplateTypeCode_invalid_code -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetAllTemplateByTemplateTypeCode@4c6e276e]" test-instance-name="kernel_GetAllTemplateByTemplateTypeCode_Kernel_GetAllTemplateByTemplateTypeCode_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:21:19Z" finished-at="2019-06-29T14:21:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_GetAllTemplateByTemplateTypeCode_Kernel_GetAllTemplateByTemplateTypeCode_invalid_code status=SUCCESS method=GetAllTemplateByTemplateTypeCode.getAllTemplateByTemplateTypeCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetAllTemplateByTemplateTypeCode@4c6e276e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetAllTemplateByTemplateTypeCode@4c6e276e]" test-instance-name="kernel_GetAllTemplateByTemplateTypeCode_Kernel_GetAllTemplateByTemplateTypeCode_smoke" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:21:19Z" finished-at="2019-06-29T14:21:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetAllTemplateByTemplateTypeCode.getAllTemplateByTemplateTypeCode(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5c61cfd0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getAllTemplateByTemplateTypeCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetAllTemplateByTemplateTypeCode@4c6e276e]" test-instance-name="kernel_GetAllTemplateByTemplateTypeCode_Kernel_GetAllTemplateByTemplateTypeCode_smoke" name="kernel_GetAllTemplateByTemplateTypeCode_Kernel_GetAllTemplateByTemplateTypeCode_response_time" duration-ms="283" started-at="2019-06-29T14:21:19Z" data-provider="GetAllTemplateByTemplateTypeCode" finished-at="2019-06-29T14:21:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetAllTemplateByTemplateTypeCode_response_time]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_GetAllTemplateByTemplateTypeCode_Kernel_GetAllTemplateByTemplateTypeCode_response_time -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetAllTemplateByTemplateTypeCode@4c6e276e]" test-instance-name="kernel_GetAllTemplateByTemplateTypeCode_Kernel_GetAllTemplateByTemplateTypeCode_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:21:20Z" finished-at="2019-06-29T14:21:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_GetAllTemplateByTemplateTypeCode_Kernel_GetAllTemplateByTemplateTypeCode_response_time status=SUCCESS method=GetAllTemplateByTemplateTypeCode.getAllTemplateByTemplateTypeCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetAllTemplateByTemplateTypeCode@4c6e276e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetAllTemplateByTemplateTypeCode@4c6e276e]" test-instance-name="kernel_GetAllTemplateByTemplateTypeCode_Kernel_GetAllTemplateByTemplateTypeCode_smoke" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:21:20Z" finished-at="2019-06-29T14:21:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetAllTemplateByTemplateTypeCode.getAllTemplateByTemplateTypeCode(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@dc58fb]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getAllTemplateByTemplateTypeCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetAllTemplateByTemplateTypeCode@4c6e276e]" test-instance-name="kernel_GetAllTemplateByTemplateTypeCode_Kernel_GetAllTemplateByTemplateTypeCode_smoke" name="kernel_GetAllTemplateByTemplateTypeCode_Kernel_GetAllTemplateByTemplateTypeCode_smoke" duration-ms="282" started-at="2019-06-29T14:21:20Z" data-provider="GetAllTemplateByTemplateTypeCode" finished-at="2019-06-29T14:21:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetAllTemplateByTemplateTypeCode_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_GetAllTemplateByTemplateTypeCode_Kernel_GetAllTemplateByTemplateTypeCode_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetAllTemplateByTemplateTypeCode@4c6e276e]" test-instance-name="kernel_GetAllTemplateByTemplateTypeCode_Kernel_GetAllTemplateByTemplateTypeCode_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:21:20Z" finished-at="2019-06-29T14:21:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_GetAllTemplateByTemplateTypeCode_Kernel_GetAllTemplateByTemplateTypeCode_smoke status=SUCCESS method=GetAllTemplateByTemplateTypeCode.getAllTemplateByTemplateTypeCode(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetAllTemplateByTemplateTypeCode@4c6e276e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.GetAllTemplateByTemplateTypeCode -->
      <class name="io.mosip.kernel.tests.FetchBlackListedWord">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchBlackListedWord@55040f2f]" test-instance-name="kernel_fetchBlackListedWord_valid_smoke" name="getTestCaseName" is-config="true" duration-ms="236" started-at="2019-06-29T14:15:10Z" finished-at="2019-06-29T14:15:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchBlackListedWord.fetchBlackListedWord(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@3382adc2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchBlackListedWord(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchBlackListedWord@55040f2f]" test-instance-name="kernel_fetchBlackListedWord_valid_smoke" name="kernel_fetchBlackListedWord_invalid_langcode" duration-ms="286" started-at="2019-06-29T14:15:10Z" data-provider="fetchData" finished-at="2019-06-29T14:15:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchBlackListedWord_invalid_langcode -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchBlackListedWord@55040f2f]" test-instance-name="kernel_fetchBlackListedWord_valid_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:15:10Z" finished-at="2019-06-29T14:15:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchBlackListedWord.fetchBlackListedWord(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5680639f]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchBlackListedWord@55040f2f]" test-instance-name="kernel_fetchBlackListedWord_valid_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:15:10Z" finished-at="2019-06-29T14:15:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchBlackListedWord_invalid_langcode status=SUCCESS method=FetchBlackListedWord.fetchBlackListedWord(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchBlackListedWord@55040f2f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="fetchBlackListedWord(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchBlackListedWord@55040f2f]" test-instance-name="kernel_fetchBlackListedWord_valid_smoke" name="kernel_fetchBlackListedWord_valid_smoke" duration-ms="289" started-at="2019-06-29T14:15:10Z" data-provider="fetchData" finished-at="2019-06-29T14:15:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[valid_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchBlackListedWord_valid_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchBlackListedWord@55040f2f]" test-instance-name="kernel_fetchBlackListedWord_valid_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:15:11Z" finished-at="2019-06-29T14:15:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchBlackListedWord_valid_smoke status=SUCCESS method=FetchBlackListedWord.fetchBlackListedWord(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchBlackListedWord@55040f2f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.FetchBlackListedWord -->
      <class name="io.mosip.kernel.tests.LicenseKeyController">
        <test-method status="PASS" signature="generateLicenseKey(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="Kernel_GenerateLicenseKey_invalid_licenseExpiryTime_generateLicenceKey" duration-ms="248" started-at="2019-06-29T14:23:02Z" data-provider="LicenseKeyGenerator" finished-at="2019-06-29T14:23:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GenerateLicenseKey_invalid_licenseExpiryTime_generateLicenceKey]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GenerateLicenseKey_invalid_licenseExpiryTime_generateLicenceKey -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:02Z" finished-at="2019-06-29T14:23:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.LicenseKeyController.generateLicenseKey(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@3bfd73e7]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:23:03Z" finished-at="2019-06-29T14:23:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GenerateLicenseKey_invalid_licenseExpiryTime_generateLicenceKey status=SUCCESS method=LicenseKeyController.generateLicenseKey(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:03Z" finished-at="2019-06-29T14:23:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.LicenseKeyController.generateLicenseKey(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@33225b82]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="generateLicenseKey(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="Kernel_GenerateLicenseKey_invalid_timeFormat2" duration-ms="253" started-at="2019-06-29T14:23:03Z" data-provider="LicenseKeyGenerator" finished-at="2019-06-29T14:23:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GenerateLicenseKey_invalid_timeFormat2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GenerateLicenseKey_invalid_timeFormat2 -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:03Z" finished-at="2019-06-29T14:23:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GenerateLicenseKey_invalid_timeFormat2 status=SUCCESS method=LicenseKeyController.generateLicenseKey(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="generateLicenseKey(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="Kernel_GenerateLicenseKey_invalid_tspId_generateLicenceKey" duration-ms="233" started-at="2019-06-29T14:23:03Z" data-provider="LicenseKeyGenerator" finished-at="2019-06-29T14:23:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GenerateLicenseKey_invalid_tspId_generateLicenceKey]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GenerateLicenseKey_invalid_tspId_generateLicenceKey -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:03Z" finished-at="2019-06-29T14:23:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.LicenseKeyController.generateLicenseKey(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@10370297]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="generateLicenseKey(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="Kernel_GenerateLicenseKey_response_time" duration-ms="222" started-at="2019-06-29T14:23:03Z" data-provider="LicenseKeyGenerator" finished-at="2019-06-29T14:23:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GenerateLicenseKey_response_time]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GenerateLicenseKey_response_time -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:03Z" finished-at="2019-06-29T14:23:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.LicenseKeyController.generateLicenseKey(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@209aefd1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:03Z" finished-at="2019-06-29T14:23:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GenerateLicenseKey_invalid_tspId_generateLicenceKey status=SUCCESS method=LicenseKeyController.generateLicenseKey(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:03Z" finished-at="2019-06-29T14:23:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GenerateLicenseKey_response_time status=SUCCESS method=LicenseKeyController.generateLicenseKey(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:03Z" finished-at="2019-06-29T14:23:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.LicenseKeyController.generateLicenseKey(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@70a8c26e]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="generateLicenseKey(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="Kernel_GenerateLicenseKey_smoke_generateLicenceKey" duration-ms="257" started-at="2019-06-29T14:23:03Z" data-provider="LicenseKeyGenerator" finished-at="2019-06-29T14:23:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GenerateLicenseKey_smoke_generateLicenceKey]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GenerateLicenseKey_smoke_generateLicenceKey -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:23:04Z" finished-at="2019-06-29T14:23:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GenerateLicenseKey_smoke_generateLicenceKey status=SUCCESS method=LicenseKeyController.generateLicenseKey(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:28:18Z" finished-at="2019-06-29T14:28:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.LicenseKeyController.mapLicenceKey(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@54210bb8]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="mapLicenceKey(java.lang.String)[pri:1, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="Kernel_MapLicenseKeyPermission_invalid_licenseKey" duration-ms="238" started-at="2019-06-29T14:28:18Z" data-provider="mapLicenseKey" finished-at="2019-06-29T14:28:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_MapLicenseKeyPermission_invalid_licenseKey]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_MapLicenseKeyPermission_invalid_licenseKey -->
        <test-method status="PASS" signature="mapLicenceKey(java.lang.String)[pri:1, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="Kernel_MapLicenseKeyPermission_invalid_permissions" duration-ms="233" started-at="2019-06-29T14:28:18Z" data-provider="mapLicenseKey" finished-at="2019-06-29T14:28:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_MapLicenseKeyPermission_invalid_permissions]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_MapLicenseKeyPermission_invalid_permissions -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:18Z" finished-at="2019-06-29T14:28:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_MapLicenseKeyPermission_invalid_licenseKey status=SUCCESS method=LicenseKeyController.mapLicenceKey(java.lang.String)[pri:1, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:18Z" finished-at="2019-06-29T14:28:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.LicenseKeyController.mapLicenceKey(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@63574fbf]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:19Z" finished-at="2019-06-29T14:28:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_MapLicenseKeyPermission_invalid_permissions status=SUCCESS method=LicenseKeyController.mapLicenceKey(java.lang.String)[pri:1, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:19Z" finished-at="2019-06-29T14:28:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.LicenseKeyController.mapLicenceKey(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7d7a4740]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="mapLicenceKey(java.lang.String)[pri:1, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="Kernel_MapLicenseKeyPermission_invalid_tspId" duration-ms="220" started-at="2019-06-29T14:28:19Z" data-provider="mapLicenseKey" finished-at="2019-06-29T14:28:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_MapLicenseKeyPermission_invalid_tspId]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_MapLicenseKeyPermission_invalid_tspId -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:19Z" finished-at="2019-06-29T14:28:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_MapLicenseKeyPermission_invalid_tspId status=SUCCESS method=LicenseKeyController.mapLicenceKey(java.lang.String)[pri:1, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="mapLicenceKey(java.lang.String)[pri:1, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="Kernel_MapLicenseKeyPermission_licenseKey_missing" duration-ms="219" started-at="2019-06-29T14:28:19Z" data-provider="mapLicenseKey" finished-at="2019-06-29T14:28:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_MapLicenseKeyPermission_licenseKey_missing]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_MapLicenseKeyPermission_licenseKey_missing -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:19Z" finished-at="2019-06-29T14:28:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.LicenseKeyController.mapLicenceKey(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@643afff3]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:19Z" finished-at="2019-06-29T14:28:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_MapLicenseKeyPermission_licenseKey_missing status=SUCCESS method=LicenseKeyController.mapLicenceKey(java.lang.String)[pri:1, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:28:19Z" finished-at="2019-06-29T14:28:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.LicenseKeyController.mapLicenceKey(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@381a4407]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="mapLicenceKey(java.lang.String)[pri:1, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="Kernel_MapLicenseKeyPermission_response_time" duration-ms="236" started-at="2019-06-29T14:28:19Z" data-provider="mapLicenseKey" finished-at="2019-06-29T14:28:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_MapLicenseKeyPermission_response_time]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_MapLicenseKeyPermission_response_time -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:19Z" finished-at="2019-06-29T14:28:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_MapLicenseKeyPermission_response_time status=SUCCESS method=LicenseKeyController.mapLicenceKey(java.lang.String)[pri:1, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:19Z" finished-at="2019-06-29T14:28:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.LicenseKeyController.mapLicenceKey(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6169de0c]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="mapLicenceKey(java.lang.String)[pri:1, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="Kernel_MapLicenseKeyPermission_smoke" duration-ms="242" started-at="2019-06-29T14:28:19Z" data-provider="mapLicenseKey" finished-at="2019-06-29T14:28:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_MapLicenseKeyPermission_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_MapLicenseKeyPermission_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:19Z" finished-at="2019-06-29T14:28:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_MapLicenseKeyPermission_smoke status=SUCCESS method=LicenseKeyController.mapLicenceKey(java.lang.String)[pri:1, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:19Z" finished-at="2019-06-29T14:28:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.LicenseKeyController.mapLicenceKey(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@4e06d526]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="mapLicenceKey(java.lang.String)[pri:1, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="Kernel_MapLicenseKeyPermission_tspId_missing" duration-ms="323" started-at="2019-06-29T14:28:19Z" data-provider="mapLicenseKey" finished-at="2019-06-29T14:28:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_MapLicenseKeyPermission_tspId_missing]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_MapLicenseKeyPermission_tspId_missing -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:20Z" finished-at="2019-06-29T14:28:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_MapLicenseKeyPermission_tspId_missing status=SUCCESS method=LicenseKeyController.mapLicenceKey(java.lang.String)[pri:1, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:28:20Z" finished-at="2019-06-29T14:28:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.LicenseKeyController.fetchMapLicenceKeyPermissions(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7d707e72]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchMapLicenceKeyPermissions(java.lang.String)[pri:2, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="Kernel_FetchLicenseKeyPermissions_invalid_lincenseKey" duration-ms="270" started-at="2019-06-29T14:28:20Z" data-provider="fetchmapLicenseKey" finished-at="2019-06-29T14:28:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_FetchLicenseKeyPermissions_invalid_lincenseKey]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_FetchLicenseKeyPermissions_invalid_lincenseKey -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:28:20Z" finished-at="2019-06-29T14:28:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_FetchLicenseKeyPermissions_invalid_lincenseKey status=SUCCESS method=LicenseKeyController.fetchMapLicenceKeyPermissions(java.lang.String)[pri:2, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:20Z" finished-at="2019-06-29T14:28:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.LicenseKeyController.fetchMapLicenceKeyPermissions(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@17a027a7]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchMapLicenceKeyPermissions(java.lang.String)[pri:2, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="Kernel_FetchLicenseKeyPermissions_invalid_tspId" duration-ms="249" started-at="2019-06-29T14:28:20Z" data-provider="fetchmapLicenseKey" finished-at="2019-06-29T14:28:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_FetchLicenseKeyPermissions_invalid_tspId]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_FetchLicenseKeyPermissions_invalid_tspId -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:20Z" finished-at="2019-06-29T14:28:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.LicenseKeyController.fetchMapLicenceKeyPermissions(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@381602e1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:20Z" finished-at="2019-06-29T14:28:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_FetchLicenseKeyPermissions_invalid_tspId status=SUCCESS method=LicenseKeyController.fetchMapLicenceKeyPermissions(java.lang.String)[pri:2, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="fetchMapLicenceKeyPermissions(java.lang.String)[pri:2, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="Kernel_FetchLicenseKeyPermissions_response_time" duration-ms="286" started-at="2019-06-29T14:28:20Z" data-provider="fetchmapLicenseKey" finished-at="2019-06-29T14:28:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_FetchLicenseKeyPermissions_response_time]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_FetchLicenseKeyPermissions_response_time -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:21Z" finished-at="2019-06-29T14:28:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.LicenseKeyController.fetchMapLicenceKeyPermissions(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@40c14f20]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:28:21Z" finished-at="2019-06-29T14:28:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_FetchLicenseKeyPermissions_response_time status=SUCCESS method=LicenseKeyController.fetchMapLicenceKeyPermissions(java.lang.String)[pri:2, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="fetchMapLicenceKeyPermissions(java.lang.String)[pri:2, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" duration-ms="236" started-at="2019-06-29T14:28:21Z" data-provider="fetchmapLicenseKey" finished-at="2019-06-29T14:28:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f]" test-instance-name="Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:28:21Z" finished-at="2019-06-29T14:28:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_FetchLicenseKeyPermissions_smoke_FetchLicenseKeyPermissions status=SUCCESS method=LicenseKeyController.fetchMapLicenceKeyPermissions(java.lang.String)[pri:2, instance:io.mosip.kernel.tests.LicenseKeyController@482cd91f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.LicenseKeyController -->
      <class name="io.mosip.kernel.tests.RIDGenerator">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94]" test-instance-name="kernel_RIDGenerator_smoke_valid_machineId and centerId" name="getTestCaseName" is-config="true" duration-ms="246" started-at="2019-06-29T14:26:25Z" finished-at="2019-06-29T14:26:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.RIDGenerator.ridGenerator(java.lang.String) throws java.lang.NumberFormatException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5d131f37]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="ridGenerator(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94]" test-instance-name="kernel_RIDGenerator_smoke_valid_machineId and centerId" name="kernel_RIDGenerator_invalid_centerid_ blank" duration-ms="318" started-at="2019-06-29T14:26:26Z" data-provider="fetchData" finished-at="2019-06-29T14:26:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_centerid_ blank]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_RIDGenerator_invalid_centerid_ blank -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94]" test-instance-name="kernel_RIDGenerator_smoke_valid_machineId and centerId" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:26Z" finished-at="2019-06-29T14:26:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_RIDGenerator_invalid_centerid_ blank status=SUCCESS method=RIDGenerator.ridGenerator(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94]" test-instance-name="kernel_RIDGenerator_smoke_valid_machineId and centerId" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:26Z" finished-at="2019-06-29T14:26:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.RIDGenerator.ridGenerator(java.lang.String) throws java.lang.NumberFormatException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5d5d8ca6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="ridGenerator(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94]" test-instance-name="kernel_RIDGenerator_smoke_valid_machineId and centerId" name="kernel_RIDGenerator_invalid_centerid_length above 5" duration-ms="291" started-at="2019-06-29T14:26:26Z" data-provider="fetchData" finished-at="2019-06-29T14:26:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_centerid_length above 5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_RIDGenerator_invalid_centerid_length above 5 -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94]" test-instance-name="kernel_RIDGenerator_smoke_valid_machineId and centerId" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:26Z" finished-at="2019-06-29T14:26:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_RIDGenerator_invalid_centerid_length above 5 status=SUCCESS method=RIDGenerator.ridGenerator(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94]" test-instance-name="kernel_RIDGenerator_smoke_valid_machineId and centerId" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:26Z" finished-at="2019-06-29T14:26:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.RIDGenerator.ridGenerator(java.lang.String) throws java.lang.NumberFormatException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@65ed7661]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="ridGenerator(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94]" test-instance-name="kernel_RIDGenerator_smoke_valid_machineId and centerId" name="kernel_RIDGenerator_invalid_centerid_length below 5" duration-ms="289" started-at="2019-06-29T14:26:26Z" data-provider="fetchData" finished-at="2019-06-29T14:26:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_centerid_length below 5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_RIDGenerator_invalid_centerid_length below 5 -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94]" test-instance-name="kernel_RIDGenerator_smoke_valid_machineId and centerId" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:26Z" finished-at="2019-06-29T14:26:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_RIDGenerator_invalid_centerid_length below 5 status=SUCCESS method=RIDGenerator.ridGenerator(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94]" test-instance-name="kernel_RIDGenerator_smoke_valid_machineId and centerId" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:26Z" finished-at="2019-06-29T14:26:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.RIDGenerator.ridGenerator(java.lang.String) throws java.lang.NumberFormatException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2bf833b5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="ridGenerator(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94]" test-instance-name="kernel_RIDGenerator_smoke_valid_machineId and centerId" name="kernel_RIDGenerator_invalid_machineid_blank" duration-ms="304" started-at="2019-06-29T14:26:26Z" data-provider="fetchData" finished-at="2019-06-29T14:26:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_machineid_blank]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_RIDGenerator_invalid_machineid_blank -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94]" test-instance-name="kernel_RIDGenerator_smoke_valid_machineId and centerId" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:27Z" finished-at="2019-06-29T14:26:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_RIDGenerator_invalid_machineid_blank status=SUCCESS method=RIDGenerator.ridGenerator(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94]" test-instance-name="kernel_RIDGenerator_smoke_valid_machineId and centerId" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:27Z" finished-at="2019-06-29T14:26:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.RIDGenerator.ridGenerator(java.lang.String) throws java.lang.NumberFormatException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6e576b5a]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="ridGenerator(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94]" test-instance-name="kernel_RIDGenerator_smoke_valid_machineId and centerId" name="kernel_RIDGenerator_invalid_machineid_length above 5" duration-ms="290" started-at="2019-06-29T14:26:27Z" data-provider="fetchData" finished-at="2019-06-29T14:26:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_machineid_length above 5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_RIDGenerator_invalid_machineid_length above 5 -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94]" test-instance-name="kernel_RIDGenerator_smoke_valid_machineId and centerId" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:26:27Z" finished-at="2019-06-29T14:26:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.RIDGenerator.ridGenerator(java.lang.String) throws java.lang.NumberFormatException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5fdef28a]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94]" test-instance-name="kernel_RIDGenerator_smoke_valid_machineId and centerId" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:27Z" finished-at="2019-06-29T14:26:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_RIDGenerator_invalid_machineid_length above 5 status=SUCCESS method=RIDGenerator.ridGenerator(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="ridGenerator(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94]" test-instance-name="kernel_RIDGenerator_smoke_valid_machineId and centerId" name="kernel_RIDGenerator_invalid_machineid_length below 5" duration-ms="293" started-at="2019-06-29T14:26:27Z" data-provider="fetchData" finished-at="2019-06-29T14:26:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_machineid_length below 5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_RIDGenerator_invalid_machineid_length below 5 -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94]" test-instance-name="kernel_RIDGenerator_smoke_valid_machineId and centerId" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:27Z" finished-at="2019-06-29T14:26:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_RIDGenerator_invalid_machineid_length below 5 status=SUCCESS method=RIDGenerator.ridGenerator(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94]" test-instance-name="kernel_RIDGenerator_smoke_valid_machineId and centerId" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:26:27Z" finished-at="2019-06-29T14:26:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.RIDGenerator.ridGenerator(java.lang.String) throws java.lang.NumberFormatException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@518ed96e]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="ridGenerator(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94]" test-instance-name="kernel_RIDGenerator_smoke_valid_machineId and centerId" name="kernel_RIDGenerator_smoke_valid_machineId and centerId" duration-ms="1836" started-at="2019-06-29T14:26:27Z" data-provider="fetchData" finished-at="2019-06-29T14:26:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[smoke_valid_machineId and centerId]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_RIDGenerator_smoke_valid_machineId and centerId -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94]" test-instance-name="kernel_RIDGenerator_smoke_valid_machineId and centerId" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:29Z" finished-at="2019-06-29T14:26:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_RIDGenerator_smoke_valid_machineId and centerId status=SUCCESS method=RIDGenerator.ridGenerator(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.RIDGenerator@5b0abc94] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.RIDGenerator -->
      <class name="io.mosip.kernel.tests.FetchBiometricAttribute">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAttribute@157632c9]" test-instance-name="kernel_fetchBiometricAttribute_valid_smoke" name="getTestCaseName" is-config="true" duration-ms="273" started-at="2019-06-29T14:14:38Z" finished-at="2019-06-29T14:14:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchBiometricAttribute.fetchBiometricAttribute(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2c73dfd0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchBiometricAttribute(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAttribute@157632c9]" test-instance-name="kernel_fetchBiometricAttribute_valid_smoke" name="kernel_fetchBiometricAttribute_invalid_biometrictypecode" duration-ms="314" started-at="2019-06-29T14:14:38Z" data-provider="fetchData" finished-at="2019-06-29T14:14:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_biometrictypecode]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchBiometricAttribute_invalid_biometrictypecode -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAttribute@157632c9]" test-instance-name="kernel_fetchBiometricAttribute_valid_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:39Z" finished-at="2019-06-29T14:14:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchBiometricAttribute_invalid_biometrictypecode status=SUCCESS method=FetchBiometricAttribute.fetchBiometricAttribute(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAttribute@157632c9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAttribute@157632c9]" test-instance-name="kernel_fetchBiometricAttribute_valid_smoke" name="getTestCaseName" is-config="true" duration-ms="7" started-at="2019-06-29T14:14:39Z" finished-at="2019-06-29T14:14:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchBiometricAttribute.fetchBiometricAttribute(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6e84faac]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchBiometricAttribute(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAttribute@157632c9]" test-instance-name="kernel_fetchBiometricAttribute_valid_smoke" name="kernel_fetchBiometricAttribute_invalid_biometrictypecode_empty" duration-ms="391" started-at="2019-06-29T14:14:39Z" data-provider="fetchData" finished-at="2019-06-29T14:14:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_biometrictypecode_empty]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchBiometricAttribute_invalid_biometrictypecode_empty -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAttribute@157632c9]" test-instance-name="kernel_fetchBiometricAttribute_valid_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:39Z" finished-at="2019-06-29T14:14:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchBiometricAttribute_invalid_biometrictypecode_empty status=SUCCESS method=FetchBiometricAttribute.fetchBiometricAttribute(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAttribute@157632c9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAttribute@157632c9]" test-instance-name="kernel_fetchBiometricAttribute_valid_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:39Z" finished-at="2019-06-29T14:14:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchBiometricAttribute.fetchBiometricAttribute(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@4054e55b]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchBiometricAttribute(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAttribute@157632c9]" test-instance-name="kernel_fetchBiometricAttribute_valid_smoke" name="kernel_fetchBiometricAttribute_invalid_langcode" duration-ms="298" started-at="2019-06-29T14:14:39Z" data-provider="fetchData" finished-at="2019-06-29T14:14:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchBiometricAttribute_invalid_langcode -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAttribute@157632c9]" test-instance-name="kernel_fetchBiometricAttribute_valid_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:39Z" finished-at="2019-06-29T14:14:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchBiometricAttribute_invalid_langcode status=SUCCESS method=FetchBiometricAttribute.fetchBiometricAttribute(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAttribute@157632c9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAttribute@157632c9]" test-instance-name="kernel_fetchBiometricAttribute_valid_smoke" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:39Z" finished-at="2019-06-29T14:14:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchBiometricAttribute.fetchBiometricAttribute(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6338a0ec]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchBiometricAttribute(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAttribute@157632c9]" test-instance-name="kernel_fetchBiometricAttribute_valid_smoke" name="kernel_fetchBiometricAttribute_invalid_langcode_empty" duration-ms="333" started-at="2019-06-29T14:14:39Z" data-provider="fetchData" finished-at="2019-06-29T14:14:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_langcode_empty]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchBiometricAttribute_invalid_langcode_empty -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAttribute@157632c9]" test-instance-name="kernel_fetchBiometricAttribute_valid_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:14:40Z" finished-at="2019-06-29T14:14:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchBiometricAttribute_invalid_langcode_empty status=SUCCESS method=FetchBiometricAttribute.fetchBiometricAttribute(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAttribute@157632c9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAttribute@157632c9]" test-instance-name="kernel_fetchBiometricAttribute_valid_smoke" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:14:40Z" finished-at="2019-06-29T14:14:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.FetchBiometricAttribute.fetchBiometricAttribute(java.lang.String) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@51077e04]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="fetchBiometricAttribute(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAttribute@157632c9]" test-instance-name="kernel_fetchBiometricAttribute_valid_smoke" name="kernel_fetchBiometricAttribute_valid_smoke" duration-ms="14781" started-at="2019-06-29T14:14:40Z" data-provider="fetchData" finished-at="2019-06-29T14:14:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[valid_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_fetchBiometricAttribute_valid_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAttribute@157632c9]" test-instance-name="kernel_fetchBiometricAttribute_valid_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:14:55Z" finished-at="2019-06-29T14:14:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_fetchBiometricAttribute_valid_smoke status=SUCCESS method=FetchBiometricAttribute.fetchBiometricAttribute(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.FetchBiometricAttribute@157632c9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.FetchBiometricAttribute -->
      <class name="io.mosip.kernel.tests.SyncMDataWithKeyIndex">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="239" started-at="2019-06-29T14:26:37Z" finished-at="2019-06-29T14:26:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndex.syncMDataWithKeyIndex(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@52381b6e]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="FAIL" signature="syncMDataWithKeyIndex(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndex_allvalid_smoke_with keyIndex" duration-ms="442" started-at="2019-06-29T14:26:37Z" data-provider="fetchData" finished-at="2019-06-29T14:26:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[allvalid_smoke_with keyIndex]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Response Data Mismatch Failure expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Response Data Mismatch Failure expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.service.AssertKernel.jsonComparison1(AssertKernel.java:178)
	at io.mosip.kernel.service.AssertKernel.assertKernel(AssertKernel.java:53)
	at io.mosip.kernel.tests.SyncMDataWithKeyIndex.syncMDataWithKeyIndex(SyncMDataWithKeyIndex.java:124)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndex_allvalid_smoke_with keyIndex -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:38Z" finished-at="2019-06-29T14:26:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndex_allvalid_smoke_with keyIndex status=FAILURE method=SyncMDataWithKeyIndex.syncMDataWithKeyIndex(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:26:38Z" finished-at="2019-06-29T14:26:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndex.syncMDataWithKeyIndex(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2b067248]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="syncMDataWithKeyIndex(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndex_invalid_keyIndex blank" duration-ms="292" started-at="2019-06-29T14:26:38Z" data-provider="fetchData" finished-at="2019-06-29T14:26:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_keyIndex blank]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndex_invalid_keyIndex blank -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:38Z" finished-at="2019-06-29T14:26:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndex.syncMDataWithKeyIndex(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@22bd3618]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:38Z" finished-at="2019-06-29T14:26:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndex_invalid_keyIndex blank status=SUCCESS method=SyncMDataWithKeyIndex.syncMDataWithKeyIndex(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="syncMDataWithKeyIndex(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndex_invalid_keyIndex nonexisting in DB" duration-ms="287" started-at="2019-06-29T14:26:38Z" data-provider="fetchData" finished-at="2019-06-29T14:26:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_keyIndex nonexisting in DB]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndex_invalid_keyIndex nonexisting in DB -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:38Z" finished-at="2019-06-29T14:26:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndex_invalid_keyIndex nonexisting in DB status=SUCCESS method=SyncMDataWithKeyIndex.syncMDataWithKeyIndex(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="syncMDataWithKeyIndex(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndex_invalid_keyIndex of diff machine" duration-ms="290" started-at="2019-06-29T14:26:38Z" data-provider="fetchData" finished-at="2019-06-29T14:26:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_keyIndex of diff machine]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndex_invalid_keyIndex of diff machine -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:38Z" finished-at="2019-06-29T14:26:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndex.syncMDataWithKeyIndex(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@ce2077]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:39Z" finished-at="2019-06-29T14:26:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndex_invalid_keyIndex of diff machine status=SUCCESS method=SyncMDataWithKeyIndex.syncMDataWithKeyIndex(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:39Z" finished-at="2019-06-29T14:26:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndex.syncMDataWithKeyIndex(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@123fb86b]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="FAIL" signature="syncMDataWithKeyIndex(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndex_invalid_lastupdated_blank" duration-ms="237" started-at="2019-06-29T14:26:39Z" data-provider="fetchData" finished-at="2019-06-29T14:26:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_lastupdated_blank]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.util.CommonLibrary.responseAuthValidation(CommonLibrary.java:160)
	at io.mosip.kernel.tests.SyncMDataWithKeyIndex.syncMDataWithKeyIndex(SyncMDataWithKeyIndex.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndex_invalid_lastupdated_blank -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:39Z" finished-at="2019-06-29T14:26:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndex_invalid_lastupdated_blank status=FAILURE method=SyncMDataWithKeyIndex.syncMDataWithKeyIndex(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:39Z" finished-at="2019-06-29T14:26:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndex.syncMDataWithKeyIndex(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@ab30c56]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="FAIL" signature="syncMDataWithKeyIndex(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndex_invalid_lastupdated_diff format" duration-ms="258" started-at="2019-06-29T14:26:39Z" data-provider="fetchData" finished-at="2019-06-29T14:26:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_lastupdated_diff format]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.util.CommonLibrary.responseAuthValidation(CommonLibrary.java:160)
	at io.mosip.kernel.tests.SyncMDataWithKeyIndex.syncMDataWithKeyIndex(SyncMDataWithKeyIndex.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndex_invalid_lastupdated_diff format -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:39Z" finished-at="2019-06-29T14:26:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndex_invalid_lastupdated_diff format status=FAILURE method=SyncMDataWithKeyIndex.syncMDataWithKeyIndex(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="FAIL" signature="syncMDataWithKeyIndex(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndex_invalid_lastupdated_future date" duration-ms="262" started-at="2019-06-29T14:26:39Z" data-provider="fetchData" finished-at="2019-06-29T14:26:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_lastupdated_future date]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.util.CommonLibrary.responseAuthValidation(CommonLibrary.java:160)
	at io.mosip.kernel.tests.SyncMDataWithKeyIndex.syncMDataWithKeyIndex(SyncMDataWithKeyIndex.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndex_invalid_lastupdated_future date -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:39Z" finished-at="2019-06-29T14:26:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndex.syncMDataWithKeyIndex(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@41f5e6ee]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:39Z" finished-at="2019-06-29T14:26:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndex_invalid_lastupdated_future date status=FAILURE method=SyncMDataWithKeyIndex.syncMDataWithKeyIndex(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="FAIL" signature="syncMDataWithKeyIndex(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndex_invalid_macaddress blank" duration-ms="249" started-at="2019-06-29T14:26:39Z" data-provider="fetchData" finished-at="2019-06-29T14:26:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_macaddress blank]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.util.CommonLibrary.responseAuthValidation(CommonLibrary.java:160)
	at io.mosip.kernel.tests.SyncMDataWithKeyIndex.syncMDataWithKeyIndex(SyncMDataWithKeyIndex.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndex_invalid_macaddress blank -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:39Z" finished-at="2019-06-29T14:26:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndex.syncMDataWithKeyIndex(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@30c9ab3f]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:40Z" finished-at="2019-06-29T14:26:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndex_invalid_macaddress blank status=FAILURE method=SyncMDataWithKeyIndex.syncMDataWithKeyIndex(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:40Z" finished-at="2019-06-29T14:26:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndex.syncMDataWithKeyIndex(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5f5ab1ad]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="FAIL" signature="syncMDataWithKeyIndex(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndex_invalid_macaddress nonexisting in DB" duration-ms="265" started-at="2019-06-29T14:26:40Z" data-provider="fetchData" finished-at="2019-06-29T14:26:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_macaddress nonexisting in DB]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.util.CommonLibrary.responseAuthValidation(CommonLibrary.java:160)
	at io.mosip.kernel.tests.SyncMDataWithKeyIndex.syncMDataWithKeyIndex(SyncMDataWithKeyIndex.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndex_invalid_macaddress nonexisting in DB -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:40Z" finished-at="2019-06-29T14:26:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndex_invalid_macaddress nonexisting in DB status=FAILURE method=SyncMDataWithKeyIndex.syncMDataWithKeyIndex(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:40Z" finished-at="2019-06-29T14:26:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndex.syncMDataWithKeyIndex(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@4d99d7ac]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="FAIL" signature="syncMDataWithKeyIndex(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndex_invalid_macaddress of diff machine" duration-ms="272" started-at="2019-06-29T14:26:40Z" data-provider="fetchData" finished-at="2019-06-29T14:26:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_macaddress of diff machine]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.util.CommonLibrary.responseAuthValidation(CommonLibrary.java:160)
	at io.mosip.kernel.tests.SyncMDataWithKeyIndex.syncMDataWithKeyIndex(SyncMDataWithKeyIndex.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndex_invalid_macaddress of diff machine -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:40Z" finished-at="2019-06-29T14:26:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndex_invalid_macaddress of diff machine status=FAILURE method=SyncMDataWithKeyIndex.syncMDataWithKeyIndex(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:40Z" finished-at="2019-06-29T14:26:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndex.syncMDataWithKeyIndex(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@23358a67]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="FAIL" signature="syncMDataWithKeyIndex(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber blank" duration-ms="242" started-at="2019-06-29T14:26:40Z" data-provider="fetchData" finished-at="2019-06-29T14:26:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_serialnumber blank]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.util.CommonLibrary.responseAuthValidation(CommonLibrary.java:160)
	at io.mosip.kernel.tests.SyncMDataWithKeyIndex.syncMDataWithKeyIndex(SyncMDataWithKeyIndex.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndex_invalid_serialnumber blank -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:40Z" finished-at="2019-06-29T14:26:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndex_invalid_serialnumber blank status=FAILURE method=SyncMDataWithKeyIndex.syncMDataWithKeyIndex(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:26:40Z" finished-at="2019-06-29T14:26:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndex.syncMDataWithKeyIndex(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5ed84d6d]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="FAIL" signature="syncMDataWithKeyIndex(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber nonexisting in DB" duration-ms="256" started-at="2019-06-29T14:26:40Z" data-provider="fetchData" finished-at="2019-06-29T14:26:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_serialnumber nonexisting in DB]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.util.CommonLibrary.responseAuthValidation(CommonLibrary.java:160)
	at io.mosip.kernel.tests.SyncMDataWithKeyIndex.syncMDataWithKeyIndex(SyncMDataWithKeyIndex.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndex_invalid_serialnumber nonexisting in DB -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:26:41Z" finished-at="2019-06-29T14:26:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndex_invalid_serialnumber nonexisting in DB status=FAILURE method=SyncMDataWithKeyIndex.syncMDataWithKeyIndex(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:41Z" finished-at="2019-06-29T14:26:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.SyncMDataWithKeyIndex.syncMDataWithKeyIndex(java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@548548c2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="FAIL" signature="syncMDataWithKeyIndex(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" duration-ms="273" started-at="2019-06-29T14:26:41Z" data-provider="fetchData" finished-at="2019-06-29T14:26:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[invalid_serialnumber of diff machine]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Failed due to Authentication failure. Error message is='Invalid Token' expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.kernel.util.CommonLibrary.responseAuthValidation(CommonLibrary.java:160)
	at io.mosip.kernel.tests.SyncMDataWithKeyIndex.syncMDataWithKeyIndex(SyncMDataWithKeyIndex.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384]" test-instance-name="kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:26:41Z" finished-at="2019-06-29T14:26:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=kernel_SyncMDataWithKeyIndex_invalid_serialnumber of diff machine status=FAILURE method=SyncMDataWithKeyIndex.syncMDataWithKeyIndex(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.SyncMDataWithKeyIndex@2b546384] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.SyncMDataWithKeyIndex -->
      <class name="io.mosip.kernel.tests.GetDocTypeDocCatByAppID">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305]" test-instance-name="Kernel_GetDocType_DocCatByAppID_validatingResponse" name="getTestCaseName" is-config="true" duration-ms="12085" started-at="2019-06-29T14:21:58Z" finished-at="2019-06-29T14:22:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetDocTypeDocCatByAppID.getDocTypeDocCatByAppID(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@116d3f22]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getDocTypeDocCatByAppID(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305]" test-instance-name="Kernel_GetDocType_DocCatByAppID_validatingResponse" name="Kernel_GetDocType_DocCatByAppID_invalid_applicantId" duration-ms="306" started-at="2019-06-29T14:22:10Z" data-provider="GetDocType_DocCatByAppID" finished-at="2019-06-29T14:22:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetDocType_DocCatByAppID_invalid_applicantId]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetDocType_DocCatByAppID_invalid_applicantId -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305]" test-instance-name="Kernel_GetDocType_DocCatByAppID_validatingResponse" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:11Z" finished-at="2019-06-29T14:22:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetDocType_DocCatByAppID_invalid_applicantId status=SUCCESS method=GetDocTypeDocCatByAppID.getDocTypeDocCatByAppID(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getDocTypeDocCatByAppID(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305]" test-instance-name="Kernel_GetDocType_DocCatByAppID_validatingResponse" name="Kernel_GetDocType_DocCatByAppID_invalid_languages" duration-ms="271" started-at="2019-06-29T14:22:11Z" data-provider="GetDocType_DocCatByAppID" finished-at="2019-06-29T14:22:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetDocType_DocCatByAppID_invalid_languages]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetDocType_DocCatByAppID_invalid_languages -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305]" test-instance-name="Kernel_GetDocType_DocCatByAppID_validatingResponse" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:11Z" finished-at="2019-06-29T14:22:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetDocTypeDocCatByAppID.getDocTypeDocCatByAppID(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@3ab815ab]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305]" test-instance-name="Kernel_GetDocType_DocCatByAppID_validatingResponse" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:11Z" finished-at="2019-06-29T14:22:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetDocType_DocCatByAppID_invalid_languages status=SUCCESS method=GetDocTypeDocCatByAppID.getDocTypeDocCatByAppID(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305]" test-instance-name="Kernel_GetDocType_DocCatByAppID_validatingResponse" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:11Z" finished-at="2019-06-29T14:22:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetDocTypeDocCatByAppID.getDocTypeDocCatByAppID(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@3140ee29]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getDocTypeDocCatByAppID(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305]" test-instance-name="Kernel_GetDocType_DocCatByAppID_validatingResponse" name="Kernel_GetDocType_DocCatByAppID_langcode_threeLanguageCodes" duration-ms="287" started-at="2019-06-29T14:22:11Z" data-provider="GetDocType_DocCatByAppID" finished-at="2019-06-29T14:22:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetDocType_DocCatByAppID_langcode_threeLanguageCodes]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetDocType_DocCatByAppID_langcode_threeLanguageCodes -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305]" test-instance-name="Kernel_GetDocType_DocCatByAppID_validatingResponse" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:11Z" finished-at="2019-06-29T14:22:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetDocType_DocCatByAppID_langcode_threeLanguageCodes status=SUCCESS method=GetDocTypeDocCatByAppID.getDocTypeDocCatByAppID(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305]" test-instance-name="Kernel_GetDocType_DocCatByAppID_validatingResponse" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:11Z" finished-at="2019-06-29T14:22:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetDocTypeDocCatByAppID.getDocTypeDocCatByAppID(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7973d55a]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getDocTypeDocCatByAppID(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305]" test-instance-name="Kernel_GetDocType_DocCatByAppID_validatingResponse" name="Kernel_GetDocType_DocCatByAppID_langcode_twoLanguageCodes" duration-ms="305" started-at="2019-06-29T14:22:11Z" data-provider="GetDocType_DocCatByAppID" finished-at="2019-06-29T14:22:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetDocType_DocCatByAppID_langcode_twoLanguageCodes]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetDocType_DocCatByAppID_langcode_twoLanguageCodes -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305]" test-instance-name="Kernel_GetDocType_DocCatByAppID_validatingResponse" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:11Z" finished-at="2019-06-29T14:22:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetDocType_DocCatByAppID_langcode_twoLanguageCodes status=SUCCESS method=GetDocTypeDocCatByAppID.getDocTypeDocCatByAppID(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305]" test-instance-name="Kernel_GetDocType_DocCatByAppID_validatingResponse" name="getTestCaseName" is-config="true" duration-ms="3" started-at="2019-06-29T14:22:11Z" finished-at="2019-06-29T14:22:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetDocTypeDocCatByAppID.getDocTypeDocCatByAppID(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@19f7179]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getDocTypeDocCatByAppID(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305]" test-instance-name="Kernel_GetDocType_DocCatByAppID_validatingResponse" name="Kernel_GetDocType_DocCatByAppID_responsetime" duration-ms="315" started-at="2019-06-29T14:22:11Z" data-provider="GetDocType_DocCatByAppID" finished-at="2019-06-29T14:22:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetDocType_DocCatByAppID_responsetime]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetDocType_DocCatByAppID_responsetime -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305]" test-instance-name="Kernel_GetDocType_DocCatByAppID_validatingResponse" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:12Z" finished-at="2019-06-29T14:22:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetDocType_DocCatByAppID_responsetime status=SUCCESS method=GetDocTypeDocCatByAppID.getDocTypeDocCatByAppID(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305]" test-instance-name="Kernel_GetDocType_DocCatByAppID_validatingResponse" name="getTestCaseName" is-config="true" duration-ms="2" started-at="2019-06-29T14:22:12Z" finished-at="2019-06-29T14:22:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetDocTypeDocCatByAppID.getDocTypeDocCatByAppID(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7b7039ac]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getDocTypeDocCatByAppID(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305]" test-instance-name="Kernel_GetDocType_DocCatByAppID_validatingResponse" name="Kernel_GetDocType_DocCatByAppID_smoke" duration-ms="300" started-at="2019-06-29T14:22:12Z" data-provider="GetDocType_DocCatByAppID" finished-at="2019-06-29T14:22:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetDocType_DocCatByAppID_smoke]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetDocType_DocCatByAppID_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305]" test-instance-name="Kernel_GetDocType_DocCatByAppID_validatingResponse" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:12Z" finished-at="2019-06-29T14:22:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetDocType_DocCatByAppID_smoke status=SUCCESS method=GetDocTypeDocCatByAppID.getDocTypeDocCatByAppID(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305]" test-instance-name="Kernel_GetDocType_DocCatByAppID_validatingResponse" name="getTestCaseName" is-config="true" duration-ms="1" started-at="2019-06-29T14:22:12Z" finished-at="2019-06-29T14:22:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetDocTypeDocCatByAppID.getDocTypeDocCatByAppID(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@4d77a14d]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getDocTypeDocCatByAppID(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305]" test-instance-name="Kernel_GetDocType_DocCatByAppID_validatingResponse" name="Kernel_GetDocType_DocCatByAppID_validatingRequest" duration-ms="280" started-at="2019-06-29T14:22:12Z" data-provider="GetDocType_DocCatByAppID" finished-at="2019-06-29T14:22:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetDocType_DocCatByAppID_validatingRequest]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetDocType_DocCatByAppID_validatingRequest -->
        <test-method status="PASS" signature="getDocTypeDocCatByAppID(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305]" test-instance-name="Kernel_GetDocType_DocCatByAppID_validatingResponse" name="Kernel_GetDocType_DocCatByAppID_validatingResponse" duration-ms="282" started-at="2019-06-29T14:22:12Z" data-provider="GetDocType_DocCatByAppID" finished-at="2019-06-29T14:22:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Kernel_GetDocType_DocCatByAppID_validatingResponse]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Kernel_GetDocType_DocCatByAppID_validatingResponse -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305]" test-instance-name="Kernel_GetDocType_DocCatByAppID_validatingResponse" name="getTestCaseName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:12Z" finished-at="2019-06-29T14:22:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.kernel.tests.GetDocTypeDocCatByAppID.getDocTypeDocCatByAppID(java.lang.String) throws java.io.FileNotFoundException,java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2ac974bc]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@5d30303]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305]" test-instance-name="Kernel_GetDocType_DocCatByAppID_validatingResponse" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:12Z" finished-at="2019-06-29T14:22:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetDocType_DocCatByAppID_validatingRequest status=SUCCESS method=GetDocTypeDocCatByAppID.getDocTypeDocCatByAppID(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305]" test-instance-name="Kernel_GetDocType_DocCatByAppID_validatingResponse" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-06-29T14:22:13Z" finished-at="2019-06-29T14:22:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Kernel_GetDocType_DocCatByAppID_validatingResponse status=SUCCESS method=GetDocTypeDocCatByAppID.getDocTypeDocCatByAppID(java.lang.String)[pri:0, instance:io.mosip.kernel.tests.GetDocTypeDocCatByAppID@35083305] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.kernel.tests.GetDocTypeDocCatByAppID -->
    </test> <!-- Kernel Tests -->
  </suite> <!-- Mosip API Suite -->
</testng-results>
